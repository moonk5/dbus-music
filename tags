!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!D	M,module	/modules/
!_TAG_KIND_DESCRIPTION!D	T,template	/templates/
!_TAG_KIND_DESCRIPTION!D	V,version	/version statements/
!_TAG_KIND_DESCRIPTION!D	X,mixin	/mixins/
!_TAG_KIND_DESCRIPTION!D	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!D	c,class	/classes/
!_TAG_KIND_DESCRIPTION!D	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!D	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!D	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!D	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!D	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!D	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!D	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!D	u,union	/union names/
!_TAG_KIND_DESCRIPTION!D	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!ReStructuredText	C,citation	/citations/
!_TAG_KIND_DESCRIPTION!ReStructuredText	H,title	/titles/
!_TAG_KIND_DESCRIPTION!ReStructuredText	S,subsection	/subsections/
!_TAG_KIND_DESCRIPTION!ReStructuredText	T,target	/targets/
!_TAG_KIND_DESCRIPTION!ReStructuredText	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!ReStructuredText	d,substdef	/substitute definitions/
!_TAG_KIND_DESCRIPTION!ReStructuredText	h,subtitle	/sub titles/
!_TAG_KIND_DESCRIPTION!ReStructuredText	s,section	/sections/
!_TAG_KIND_DESCRIPTION!ReStructuredText	t,subsubsection	/subsubsections/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!D	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!ReStructuredText	0.0	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/moonk5/developments/git/dbus-music/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
$(VERBOSE).SILENT	build/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE)MAKESILENT	build/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
%	build/Makefile	/^% : %,v$/;"	t
%	build/Makefile	/^% : RCS\/%$/;"	t
%	build/Makefile	/^% : RCS\/%,v$/;"	t
%	build/Makefile	/^% : SCCS\/s.%$/;"	t
%	build/Makefile	/^% : s.%$/;"	t
APPEND	include/spdlog/fmt/bundled/os.h	/^    APPEND = FMT_POSIX(O_APPEND),  \/\/ Open in append mode.$/;"	e	enum:file::__anondea7980b0103
ARCHITECTURE_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
A_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit A_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::A_formatter
A_formatter	include/spdlog/pattern_formatter-inl.h	/^class A_formatter : public flag_formatter {$/;"	c	namespace:spdlog::details
B_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit B_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::B_formatter
B_formatter	include/spdlog/pattern_formatter-inl.h	/^class B_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
CMAKE_AR	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/sbin\/ar")$/;"	v
CMAKE_AR	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/sbin\/ar")$/;"	v
CMAKE_AR	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/sbin\/ar")$/;"	v
CMAKE_AR	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/sbin\/ar")$/;"	v
CMAKE_AR	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/sbin\/ar")$/;"	v
CMAKE_AR	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/sbin\/ar")$/;"	v
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/moonk5\/developments\/git\/dbus-music\/build$/;"	m
CMAKE_BUILD_TYPE	CMakeLists.txt	/^set(CMAKE_BUILD_TYPE Debug)$/;"	v
CMAKE_C11_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C11_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C11_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C17_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C17_COMPILE_FEATURES "c_std_17")$/;"	v
CMAKE_C17_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C17_COMPILE_FEATURES "c_std_17")$/;"	v
CMAKE_C17_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C17_COMPILE_FEATURES "c_std_17")$/;"	v
CMAKE_C23_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C23_COMPILE_FEATURES "c_std_23")$/;"	v
CMAKE_C23_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C23_COMPILE_FEATURES "c_std_23")$/;"	v
CMAKE_C23_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C23_COMPILE_FEATURES "c_std_23")$/;"	v
CMAKE_C90_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C90_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C90_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C99_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_C99_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_C99_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMPILER_IS_GNUCC	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCC	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCC	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "cxx_std_23")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "cxx_std_23")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "cxx_std_23")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_BYTE_ORDER	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_BYTE_ORDER	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_BYTE_ORDER	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/sbin\/c++")$/;"	v
CMAKE_CXX_COMPILER	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/sbin\/c++")$/;"	v
CMAKE_CXX_COMPILER	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/sbin\/c++")$/;"	v
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/sbin\/gcc-ar")$/;"	v
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/sbin\/gcc-ar")$/;"	v
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/sbin\/gcc-ar")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR "")$/;"	v
CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR "")$/;"	v
CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_LINKER	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER "\/sbin\/ld")$/;"	v
CMAKE_CXX_COMPILER_LINKER	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER "\/sbin\/ld")$/;"	v
CMAKE_CXX_COMPILER_LINKER	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER "\/sbin\/ld")$/;"	v
CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT GNU)$/;"	v
CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT GNU)$/;"	v
CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT GNU)$/;"	v
CMAKE_CXX_COMPILER_LINKER_ID	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_LINKER_ID	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_LINKER_ID	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_LINKER_VERSION	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_VERSION 2.42.0)$/;"	v
CMAKE_CXX_COMPILER_LINKER_VERSION	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_VERSION 2.42.0)$/;"	v
CMAKE_CXX_COMPILER_LINKER_VERSION	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_VERSION 2.42.0)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/sbin\/gcc-ranlib")$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/sbin\/gcc-ranlib")$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/sbin\/gcc-ranlib")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "14.1.1")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "14.1.1")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "14.1.1")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/14.1.1;\/usr\/include\/c++\/14./;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/14.1.1;\/usr\/include\/c++\/14./;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/14.1.1;\/usr\/include\/c++\/14./;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1;\/usr\/lib/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1;\/usr\/lib/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1;\/usr\/lib/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_CXX_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_DEPFILE_SUPPORTED FALSE)$/;"	v
CMAKE_CXX_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_DEPFILE_SUPPORTED FALSE)$/;"	v
CMAKE_CXX_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_DEPFILE_SUPPORTED FALSE)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm;ccm;cxxm;c++m)$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm;ccm;cxxm;c++m)$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm;ccm;cxxm;c++m)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_C_ABI_COMPILED	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_ABI_COMPILED	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_ABI_COMPILED	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_BYTE_ORDER	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_C_BYTE_ORDER	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_C_BYTE_ORDER	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_COMPILER	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/sbin\/cc")$/;"	v
CMAKE_C_COMPILER	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/sbin\/cc")$/;"	v
CMAKE_C_COMPILER	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/sbin\/cc")$/;"	v
CMAKE_C_COMPILER_ABI	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_ABI	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_ABI	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_AR	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/sbin\/gcc-ar")$/;"	v
CMAKE_C_COMPILER_AR	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/sbin\/gcc-ar")$/;"	v
CMAKE_C_COMPILER_AR	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/sbin\/gcc-ar")$/;"	v
CMAKE_C_COMPILER_ARG1	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ARG1	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ARG1	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_C_COMPILER_ID	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID_RUN	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_ID_RUN	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_ID_RUN	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_LINKER	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER "\/sbin\/ld")$/;"	v
CMAKE_C_COMPILER_LINKER	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER "\/sbin\/ld")$/;"	v
CMAKE_C_COMPILER_LINKER	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER "\/sbin\/ld")$/;"	v
CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT GNU)$/;"	v
CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT GNU)$/;"	v
CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT GNU)$/;"	v
CMAKE_C_COMPILER_LINKER_ID	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_LINKER_ID	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_LINKER_ID	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_LINKER_VERSION	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_VERSION 2.42.0)$/;"	v
CMAKE_C_COMPILER_LINKER_VERSION	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_VERSION 2.42.0)$/;"	v
CMAKE_C_COMPILER_LINKER_VERSION	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LINKER_VERSION 2.42.0)$/;"	v
CMAKE_C_COMPILER_LOADED	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_LOADED	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_LOADED	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_RANLIB	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/sbin\/gcc-ranlib")$/;"	v
CMAKE_C_COMPILER_RANLIB	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/sbin\/gcc-ranlib")$/;"	v
CMAKE_C_COMPILER_RANLIB	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/sbin\/gcc-ranlib")$/;"	v
CMAKE_C_COMPILER_VERSION	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "14.1.1")$/;"	v
CMAKE_C_COMPILER_VERSION	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "14.1.1")$/;"	v
CMAKE_C_COMPILER_VERSION	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "14.1.1")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_WORKS	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WORKS	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WORKS	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WRAPPER	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILER_WRAPPER	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILER_WRAPPER	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILE_FEATURES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_COMPILE_FEATURES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_COMPILE_FEATURES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_C_IGNORE_EXTENSIONS	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IGNORE_EXTENSIONS	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IGNORE_EXTENSIONS	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1\/include;/;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1\/include;/;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1\/include;/;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1;\/usr\/lib;\//;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1;\/usr\/lib;\//;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/14.1.1;\/usr\/lib;\//;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_C_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_DEPFILE_SUPPORTED FALSE)$/;"	v
CMAKE_C_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_DEPFILE_SUPPORTED FALSE)$/;"	v
CMAKE_C_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_DEPFILE_SUPPORTED FALSE)$/;"	v
CMAKE_C_LINKER_PREFERENCE	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_LINKER_PREFERENCE	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_LINKER_PREFERENCE	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_PLATFORM_ID	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_PLATFORM_ID	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_PLATFORM_ID	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_SIMULATE_ID	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_ID	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_ID	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_VERSION	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIMULATE_VERSION	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIMULATE_VERSION	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/dbus-music.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_GENERATOR	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/dbus-music.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/dbus-music.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPEND_INFO_FILES	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_FORCE_UNIX_PATHS	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/dbus-music.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/dbus-music.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/dbus-music.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-6.9.2-arch1-1")$/;"	v
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-6.9.3-arch1-1")$/;"	v
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-6.9.3-arch1-1")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "6.9.2-arch1-1")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "6.9.3-arch1-1")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "6.9.3-arch1-1")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "Debug")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "0")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/sbin\/ld")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/sbin\/ld")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/sbin\/ld")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/sbin\/ld")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/sbin\/ld")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/sbin\/ld")$/;"	v
CMAKE_LINKER_LINK	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_LINKER_LINK "")$/;"	v
CMAKE_LINKER_LINK	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LINK "")$/;"	v
CMAKE_LINKER_LINK	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_LINKER_LINK "")$/;"	v
CMAKE_LINKER_LINK	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LINK "")$/;"	v
CMAKE_LINKER_LINK	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_LINKER_LINK "")$/;"	v
CMAKE_LINKER_LINK	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LINK "")$/;"	v
CMAKE_LINKER_LLD	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_LINKER_LLD "")$/;"	v
CMAKE_LINKER_LLD	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LLD "")$/;"	v
CMAKE_LINKER_LLD	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_LINKER_LLD "")$/;"	v
CMAKE_LINKER_LLD	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LLD "")$/;"	v
CMAKE_LINKER_LLD	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_LINKER_LLD "")$/;"	v
CMAKE_LINKER_LLD	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LLD "")$/;"	v
CMAKE_MAKEFILE_DEPENDS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MODULE_PATH	CMakeLists.txt	/^set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}\/cmake\/")$/;"	v
CMAKE_MT	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_OBJDUMP	build/cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/sbin\/objdump")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/sbin\/ranlib")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/sbin\/ranlib")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/sbin\/ranlib")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/sbin\/ranlib")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/sbin\/ranlib")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/sbin\/ranlib")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/moonk5\/developments\/git\/dbus-music\/build")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/moonk5\/developments\/git\/dbus-music")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/moonk5\/developments\/git\/dbus-music$/;"	m
CMAKE_SYSTEM	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-6.9.2-arch1-1")$/;"	v
CMAKE_SYSTEM	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-6.9.3-arch1-1")$/;"	v
CMAKE_SYSTEM	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-6.9.3-arch1-1")$/;"	v
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.29.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "6.9.2-arch1-1")$/;"	v
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.29.5/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "6.9.3-arch1-1")$/;"	v
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.29.6/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "6.9.3-arch1-1")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.29.3/CMakeCCompiler.cmake	/^set(CMAKE_TAPI "CMAKE_TAPI-NOTFOUND")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.29.3/CMakeCXXCompiler.cmake	/^set(CMAKE_TAPI "CMAKE_TAPI-NOTFOUND")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.29.5/CMakeCCompiler.cmake	/^set(CMAKE_TAPI "CMAKE_TAPI-NOTFOUND")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.29.5/CMakeCXXCompiler.cmake	/^set(CMAKE_TAPI "CMAKE_TAPI-NOTFOUND")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.29.6/CMakeCCompiler.cmake	/^set(CMAKE_TAPI "CMAKE_TAPI-NOTFOUND")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.29.6/CMakeCXXCompiler.cmake	/^set(CMAKE_TAPI "CMAKE_TAPI-NOTFOUND")$/;"	v
COMPILER_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CREATE	include/spdlog/fmt/bundled/os.h	/^    CREATE = FMT_POSIX(O_CREAT),   \/\/ Create if the file doesn't exist.$/;"	e	enum:file::__anondea7980b0103
CXX_STD	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
C_VERSION	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
C_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit C_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::C_formatter
C_formatter	include/spdlog/pattern_formatter-inl.h	/^class C_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
CanControl	include/mpris_media_player.h	/^  CanControl,$/;"	e	enum:DBusProperties
CanGoNext	include/mpris_media_player.h	/^  CanGoNext,$/;"	e	enum:DBusProperties
CanGoPrevious	include/mpris_media_player.h	/^  CanGoPrevious,$/;"	e	enum:DBusProperties
CanPause	include/mpris_media_player.h	/^  CanPause,$/;"	e	enum:DBusProperties
CanPlay	include/mpris_media_player.h	/^  CanPlay,$/;"	e	enum:DBusProperties
CanSeek	include/mpris_media_player.h	/^  CanSeek,$/;"	e	enum:DBusProperties
CommonSecondsType	include/spdlog/fmt/bundled/chrono.h	/^  using CommonSecondsType =$/;"	t	function:detail::get_milliseconds
Container	include/spdlog/fmt/bin_to_hex.h	/^    using Container = std::span<Value, Extent>;$/;"	t	function:spdlog::to_hex	typeref:typename:std::span<Value,Extent>
DBusGetSet	include/mpris_media_player.h	/^typedef enum DBusGetSet { Getter = 1, Setter } DBusGetSetType;$/;"	g
DBusGetSetType	include/mpris_media_player.h	/^typedef enum DBusGetSet { Getter = 1, Setter } DBusGetSetType;$/;"	t	typeref:enum:DBusGetSet
DBusLoopStatus	include/mpris_media_player.h	/^typedef enum DBusLoopStatus {$/;"	g
DBusLoopStatusType	include/mpris_media_player.h	/^} DBusLoopStatusType;$/;"	t	typeref:enum:DBusLoopStatus
DBusMetadata	include/mpris_media_player.h	/^struct DBusMetadata {$/;"	s
DBusMethodType	include/mpris_media_player.h	/^} DBusMethodType;$/;"	t	typeref:enum:DBusMethods
DBusMethods	include/mpris_media_player.h	/^typedef enum DBusMethods {$/;"	g
DBusProperties	include/mpris_media_player.h	/^typedef enum DBusProperties {$/;"	g
DBusPropertyType	include/mpris_media_player.h	/^} DBusPropertyType;$/;"	t	typeref:enum:DBusProperties
DEC	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
D_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit D_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::D_formatter
D_formatter	include/spdlog/pattern_formatter-inl.h	/^class D_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
DurationUnits	include/spdlog/pattern_formatter-inl.h	/^    using DurationUnits = Units;$/;"	t	class:spdlog::details::elapsed_formatter	typeref:typename:Units
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
ERROR_DBUS	include/mpris_media_player.h	/^  ERROR_DBUS = -1,$/;"	e	enum:ErrorCode
ERROR_NONE	include/mpris_media_player.h	/^  ERROR_NONE = 1,$/;"	e	enum:ErrorCode
ERROR_NULL_PTR	include/mpris_media_player.h	/^  ERROR_NULL_PTR = -2,$/;"	e	enum:ErrorCode
ERROR_UNKNOWN_TYPE	include/mpris_media_player.h	/^  ERROR_UNKNOWN_TYPE = -3$/;"	e	enum:ErrorCode
E_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit E_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::E_formatter
E_formatter	include/spdlog/pattern_formatter-inl.h	/^class E_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
ErrorCode	include/mpris_media_player.h	/^typedef enum ErrorCode {$/;"	g
ErrorCodeType	include/mpris_media_player.h	/^} ErrorCodeType;$/;"	t	typeref:enum:ErrorCode
F	include/spdlog/fmt/bundled/chrono.h	/^  using F = std::numeric_limits<From>;$/;"	t	function:safe_duration_cast::lossless_integral_conversion	typeref:typename:std::numeric_limits<From>
FMT_API	include/spdlog/fmt/bundled/core.h	/^#    define FMT_API /;"	d
FMT_API	include/spdlog/fmt/bundled/core.h	/^#  define FMT_API /;"	d
FMT_API	include/spdlog/fmt/bundled/core.h	/^#  define FMT_API$/;"	d
FMT_ARGS_H_	include/spdlog/fmt/bundled/args.h	/^#define FMT_ARGS_H_$/;"	d
FMT_ASSERT	include/spdlog/fmt/bundled/core.h	/^#    define FMT_ASSERT(/;"	d
FMT_BEGIN_EXPORT	include/spdlog/fmt/bundled/core.h	/^#  define FMT_BEGIN_EXPORT$/;"	d
FMT_BEGIN_NAMESPACE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_BEGIN_NAMESPACE /;"	d
FMT_BUILTIN_CLZ	include/spdlog/fmt/bundled/format.h	/^#    define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZ	include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZLL	include/spdlog/fmt/bundled/format.h	/^#    define FMT_BUILTIN_CLZLL(/;"	d
FMT_BUILTIN_CLZLL	include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CLZLL(/;"	d
FMT_BUILTIN_CTZ	include/spdlog/fmt/bundled/format.h	/^#    define FMT_BUILTIN_CTZ(/;"	d
FMT_BUILTIN_CTZ	include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CTZ(/;"	d
FMT_BUILTIN_CTZLL	include/spdlog/fmt/bundled/format.h	/^#    define FMT_BUILTIN_CTZLL(/;"	d
FMT_BUILTIN_CTZLL	include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CTZLL(/;"	d
FMT_CATCH	include/spdlog/fmt/bundled/format.h	/^#  define FMT_CATCH(/;"	d
FMT_CHRONO_H_	include/spdlog/fmt/bundled/chrono.h	/^#define FMT_CHRONO_H_$/;"	d
FMT_CLANG_VERSION	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CLANG_VERSION /;"	d
FMT_COLOR_H_	include/spdlog/fmt/bundled/color.h	/^#define FMT_COLOR_H_$/;"	d
FMT_COMPILE	include/spdlog/fmt/bundled/compile.h	/^#  define FMT_COMPILE(/;"	d
FMT_COMPILE_H_	include/spdlog/fmt/bundled/compile.h	/^#define FMT_COMPILE_H_$/;"	d
FMT_CONSTEVAL	include/spdlog/fmt/bundled/core.h	/^#    define FMT_CONSTEVAL /;"	d
FMT_CONSTEVAL	include/spdlog/fmt/bundled/core.h	/^#    define FMT_CONSTEVAL$/;"	d
FMT_CONSTEXPR	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CONSTEXPR /;"	d
FMT_CONSTEXPR	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CONSTEXPR$/;"	d
FMT_CONSTEXPR20	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CONSTEXPR20 /;"	d
FMT_CONSTEXPR20	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CONSTEXPR20$/;"	d
FMT_CONSTEXPR_CHAR_TRAITS	include/spdlog/fmt/bundled/core.h	/^#    define FMT_CONSTEXPR_CHAR_TRAITS /;"	d
FMT_CONSTEXPR_CHAR_TRAITS	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CONSTEXPR_CHAR_TRAITS /;"	d
FMT_CONSTEXPR_CHAR_TRAITS	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CONSTEXPR_CHAR_TRAITS$/;"	d
FMT_CORE_H_	include/spdlog/fmt/bundled/core.h	/^#define FMT_CORE_H_$/;"	d
FMT_CPLUSPLUS	include/spdlog/fmt/bundled/core.h	/^#  define FMT_CPLUSPLUS /;"	d
FMT_CPP_LIB_FILESYSTEM	include/spdlog/fmt/bundled/std.h	/^#    define FMT_CPP_LIB_FILESYSTEM /;"	d
FMT_CPP_LIB_VARIANT	include/spdlog/fmt/bundled/std.h	/^#    define FMT_CPP_LIB_VARIANT /;"	d
FMT_DECLTYPE_RETURN	include/spdlog/fmt/bundled/ranges.h	/^#  define FMT_DECLTYPE_RETURN(/;"	d
FMT_DECLTYPE_THIS	include/spdlog/fmt/bundled/core.h	/^#    define FMT_DECLTYPE_THIS /;"	d
FMT_DECLTYPE_THIS	include/spdlog/fmt/bundled/core.h	/^#    define FMT_DECLTYPE_THIS$/;"	d
FMT_DEPRECATED	include/spdlog/fmt/bundled/format.h	/^#      define FMT_DEPRECATED /;"	d
FMT_DEPRECATED	include/spdlog/fmt/bundled/format.h	/^#    define FMT_DEPRECATED /;"	d
FMT_ENABLE_IF	include/spdlog/fmt/bundled/core.h	/^#  define FMT_ENABLE_IF(/;"	d
FMT_END_EXPORT	include/spdlog/fmt/bundled/core.h	/^#  define FMT_END_EXPORT$/;"	d
FMT_END_NAMESPACE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_END_NAMESPACE /;"	d
FMT_ENUM_UNDERLYING_TYPE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_ENUM_UNDERLYING_TYPE(/;"	d
FMT_ENUM_UNDERLYING_TYPE	include/spdlog/fmt/bundled/core.h	/^enum type FMT_ENUM_UNDERLYING_TYPE(unsigned char){none, left, right, center,$/;"	f	namespace:align	typeref:enum:type
FMT_ENUM_UNDERLYING_TYPE	include/spdlog/fmt/bundled/core.h	/^enum type FMT_ENUM_UNDERLYING_TYPE(unsigned char){none, minus, plus, space};$/;"	f	namespace:sign	typeref:enum:type
FMT_EXCEPTIONS	include/spdlog/fmt/bundled/core.h	/^#    define FMT_EXCEPTIONS /;"	d
FMT_EXPORT	include/spdlog/fmt/bundled/core.h	/^#  define FMT_EXPORT$/;"	d
FMT_FALLTHROUGH	include/spdlog/fmt/bundled/format.h	/^#  define FMT_FALLTHROUGH /;"	d
FMT_FALLTHROUGH	include/spdlog/fmt/bundled/format.h	/^#  define FMT_FALLTHROUGH$/;"	d
FMT_FORMAT_AS	include/spdlog/fmt/bundled/format.h	/^#define FMT_FORMAT_AS(/;"	d
FMT_FORMAT_H_	include/spdlog/fmt/bundled/format.h	/^#define FMT_FORMAT_H_$/;"	d
FMT_FORMAT_INL_H_	include/spdlog/fmt/bundled/format-inl.h	/^#define FMT_FORMAT_INL_H_$/;"	d
FMT_FUNC	include/spdlog/fmt/bundled/format.h	/^#  define FMT_FUNC /;"	d
FMT_GCC_PRAGMA	include/spdlog/fmt/bundled/core.h	/^#    define FMT_GCC_PRAGMA(/;"	d
FMT_GCC_VERSION	include/spdlog/fmt/bundled/core.h	/^#  define FMT_GCC_VERSION /;"	d
FMT_HAS_ABI_CXA_DEMANGLE	include/spdlog/fmt/bundled/std.h	/^#    define FMT_HAS_ABI_CXA_DEMANGLE$/;"	d
FMT_HAS_BUILTIN	include/spdlog/fmt/bundled/format.h	/^#  define FMT_HAS_BUILTIN(/;"	d
FMT_HAS_CONSTEVAL	include/spdlog/fmt/bundled/core.h	/^#    define FMT_HAS_CONSTEVAL$/;"	d
FMT_HAS_CPP14_ATTRIBUTE	include/spdlog/fmt/bundled/core.h	/^#define FMT_HAS_CPP14_ATTRIBUTE(/;"	d
FMT_HAS_CPP17_ATTRIBUTE	include/spdlog/fmt/bundled/core.h	/^#define FMT_HAS_CPP17_ATTRIBUTE(/;"	d
FMT_HAS_CPP_ATTRIBUTE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_HAS_CPP_ATTRIBUTE(/;"	d
FMT_HAS_FEATURE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_HAS_FEATURE(/;"	d
FMT_HAS_INCLUDE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_HAS_INCLUDE(/;"	d
FMT_HAS_SYSTEM	include/spdlog/fmt/bundled/os.h	/^#  define FMT_HAS_SYSTEM$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/chrono.h	/^                #define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/compile.h	/^                #define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/fmt.h	/^        #define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/ostr.h	/^                #define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/ranges.h	/^                #define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/std.h	/^                #define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/xchar.h	/^                #define FMT_HEADER_ONLY$/;"	d
FMT_ICC_VERSION	include/spdlog/fmt/bundled/core.h	/^#  define FMT_ICC_VERSION /;"	d
FMT_INC	include/spdlog/fmt/bundled/format.h	/^#  define FMT_INC(/;"	d
FMT_INLINE	include/spdlog/fmt/bundled/core.h	/^#    define FMT_INLINE /;"	d
FMT_INLINE_VARIABLE	include/spdlog/fmt/bundled/format.h	/^#  define FMT_INLINE_VARIABLE /;"	d
FMT_INLINE_VARIABLE	include/spdlog/fmt/bundled/format.h	/^#  define FMT_INLINE_VARIABLE$/;"	d
FMT_MAYBE_UNUSED	include/spdlog/fmt/bundled/format.h	/^#    define FMT_MAYBE_UNUSED /;"	d
FMT_MSC_VERSION	include/spdlog/fmt/bundled/core.h	/^#  define FMT_MSC_VERSION /;"	d
FMT_MSC_WARNING	include/spdlog/fmt/bundled/core.h	/^#  define FMT_MSC_WARNING(/;"	d
FMT_NODISCARD	include/spdlog/fmt/bundled/core.h	/^#    define FMT_NODISCARD /;"	d
FMT_NODISCARD	include/spdlog/fmt/bundled/core.h	/^#    define FMT_NODISCARD$/;"	d
FMT_NOINLINE	include/spdlog/fmt/bundled/format.h	/^#  define FMT_NOINLINE /;"	d
FMT_NOINLINE	include/spdlog/fmt/bundled/format.h	/^#  define FMT_NOINLINE$/;"	d
FMT_NOMACRO	include/spdlog/fmt/bundled/chrono.h	/^#define FMT_NOMACRO$/;"	d
FMT_NOMACRO	include/spdlog/fmt/bundled/chrono.h	/^inline auto localtime_r FMT_NOMACRO(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:auto localtime_r
FMT_NORETURN	include/spdlog/fmt/bundled/core.h	/^#  define FMT_NORETURN /;"	d
FMT_NORETURN	include/spdlog/fmt/bundled/core.h	/^#  define FMT_NORETURN$/;"	d
FMT_NO_UNIQUE_ADDRESS	include/spdlog/fmt/bundled/format.h	/^#      define FMT_NO_UNIQUE_ADDRESS /;"	d
FMT_NO_UNIQUE_ADDRESS	include/spdlog/fmt/bundled/format.h	/^#  define FMT_NO_UNIQUE_ADDRESS$/;"	d
FMT_OSTREAM_H_	include/spdlog/fmt/bundled/ostream.h	/^#define FMT_OSTREAM_H_$/;"	d
FMT_OS_H_	include/spdlog/fmt/bundled/os.h	/^#define FMT_OS_H_$/;"	d
FMT_POSIX	include/spdlog/fmt/bundled/os.h	/^#    define FMT_POSIX(/;"	d
FMT_POSIX_CALL	include/spdlog/fmt/bundled/os.h	/^#    define FMT_POSIX_CALL(/;"	d
FMT_POSIX_CALL	include/spdlog/fmt/bundled/os.h	/^#  define FMT_POSIX_CALL(/;"	d
FMT_POWERS_OF_10	include/spdlog/fmt/bundled/format.h	/^#define FMT_POWERS_OF_10(/;"	d
FMT_PRINTF_H_	include/spdlog/fmt/bundled/printf.h	/^#define FMT_PRINTF_H_$/;"	d
FMT_RANGES_H_	include/spdlog/fmt/bundled/ranges.h	/^#define FMT_RANGES_H_$/;"	d
FMT_REDUCE_INT_INSTANTIATIONS	include/spdlog/fmt/bundled/format.h	/^#  define FMT_REDUCE_INT_INSTANTIATIONS /;"	d
FMT_RETRY	include/spdlog/fmt/bundled/os.h	/^#define FMT_RETRY(result, expression) FMT_RETRY_/;"	d
FMT_RETRY_VAL	include/spdlog/fmt/bundled/os.h	/^#  define FMT_RETRY_VAL(/;"	d
FMT_SAFE_DURATION_CAST	include/spdlog/fmt/bundled/chrono.h	/^#  define FMT_SAFE_DURATION_CAST /;"	d
FMT_SO_VISIBILITY	include/spdlog/fmt/bundled/format.h	/^#  define FMT_SO_VISIBILITY(/;"	d
FMT_STD_H_	include/spdlog/fmt/bundled/std.h	/^#define FMT_STD_H_$/;"	d
FMT_STRING	include/spdlog/fmt/bundled/format.h	/^#define FMT_STRING(s) FMT_STRING_/;"	d
FMT_STRING_IMPL	include/spdlog/fmt/bundled/format.h	/^#define FMT_STRING_IMPL(/;"	d
FMT_SYSTEM	include/spdlog/fmt/bundled/os.h	/^#  define FMT_SYSTEM(/;"	d
FMT_THROW	include/spdlog/fmt/bundled/format.h	/^#      define FMT_THROW(/;"	d
FMT_TRY	include/spdlog/fmt/bundled/format.h	/^#  define FMT_TRY /;"	d
FMT_TUPLE_JOIN_SPECIFIERS	include/spdlog/fmt/bundled/ranges.h	/^#  define FMT_TUPLE_JOIN_SPECIFIERS /;"	d
FMT_TYPE_CONSTANT	include/spdlog/fmt/bundled/core.h	/^#define FMT_TYPE_CONSTANT(/;"	d
FMT_UNCHECKED_ITERATOR	include/spdlog/fmt/bundled/core.h	/^#  define FMT_UNCHECKED_ITERATOR(/;"	d
FMT_UNICODE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_UNICODE /;"	d
FMT_USE_CONSTEXPR	include/spdlog/fmt/bundled/core.h	/^#    define FMT_USE_CONSTEXPR /;"	d
FMT_USE_DOUBLE	include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_DOUBLE /;"	d
FMT_USE_EXPERIMENTAL_STRING_VIEW	include/spdlog/fmt/bundled/core.h	/^#  define FMT_USE_EXPERIMENTAL_STRING_VIEW$/;"	d
FMT_USE_FCNTL	include/spdlog/fmt/bundled/os.h	/^#    define FMT_USE_FCNTL /;"	d
FMT_USE_FLOAT	include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_FLOAT /;"	d
FMT_USE_FLOAT128	include/spdlog/fmt/bundled/format.h	/^#      define FMT_USE_FLOAT128 /;"	d
FMT_USE_FLOAT128	include/spdlog/fmt/bundled/format.h	/^#    define FMT_USE_FLOAT128 /;"	d
FMT_USE_FULL_CACHE_DRAGONBOX	include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_FULL_CACHE_DRAGONBOX /;"	d
FMT_USE_INT128	include/spdlog/fmt/bundled/core.h	/^#  define FMT_USE_INT128 /;"	d
FMT_USE_LOCAL_TIME	include/spdlog/fmt/bundled/chrono.h	/^#    define FMT_USE_LOCAL_TIME /;"	d
FMT_USE_LONG_DOUBLE	include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_LONG_DOUBLE /;"	d
FMT_USE_NONTYPE_TEMPLATE_ARGS	include/spdlog/fmt/bundled/core.h	/^#    define FMT_USE_NONTYPE_TEMPLATE_ARGS /;"	d
FMT_USE_STRING_VIEW	include/spdlog/fmt/bundled/core.h	/^#  define FMT_USE_STRING_VIEW$/;"	d
FMT_USE_TYPEID	include/spdlog/fmt/bundled/std.h	/^#    define FMT_USE_TYPEID /;"	d
FMT_USE_TZSET	include/spdlog/fmt/bundled/chrono.h	/^#    define FMT_USE_TZSET /;"	d
FMT_USE_USER_DEFINED_LITERALS	include/spdlog/fmt/bundled/format.h	/^#    define FMT_USE_USER_DEFINED_LITERALS /;"	d
FMT_USE_UTC_TIME	include/spdlog/fmt/bundled/chrono.h	/^#    define FMT_USE_UTC_TIME /;"	d
FMT_USE_WINDOWS_H	include/spdlog/fmt/fmt.h	/^        #define FMT_USE_WINDOWS_H /;"	d
FMT_VERSION	include/spdlog/fmt/bundled/core.h	/^#define FMT_VERSION /;"	d
FMT_VISIBILITY	include/spdlog/fmt/bundled/core.h	/^#  define FMT_VISIBILITY(/;"	d
FMT_XCHAR_H_	include/spdlog/fmt/bundled/xchar.h	/^#define FMT_XCHAR_H_$/;"	d
F_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit F_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::F_formatter
F_formatter	include/spdlog/pattern_formatter-inl.h	/^class F_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
Factor	include/spdlog/fmt/bundled/chrono.h	/^  struct Factor$/;"	s	function:safe_duration_cast::safe_duration_cast
From	include/spdlog/fmt/bundled/chrono.h	/^  using From = std::chrono::duration<FromRep, FromPeriod>;$/;"	t	function:safe_duration_cast::safe_duration_cast	typeref:typename:std::chrono::duration<FromRep,FromPeriod>
Getter	include/mpris_media_player.h	/^typedef enum DBusGetSet { Getter = 1, Setter } DBusGetSetType;$/;"	e	enum:DBusGetSet
HEX	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
H_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit H_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::H_formatter
H_formatter	include/spdlog/pattern_formatter-inl.h	/^class H_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
ID_VOID_MAIN	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
I_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit I_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::I_formatter
I_formatter	include/spdlog/pattern_formatter-inl.h	/^class I_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
IntermediateRep	include/spdlog/fmt/bundled/chrono.h	/^  using IntermediateRep =$/;"	t	function:safe_duration_cast::safe_duration_cast
Iter	include/spdlog/fmt/bin_to_hex.h	/^    using Iter = typename Container::const_iterator;$/;"	t	function:spdlog::to_hex	typeref:typename:Container::const_iterator
Iter	include/spdlog/fmt/bin_to_hex.h	/^    using Iter = typename Container::iterator;$/;"	t	function:spdlog::to_hex	typeref:typename:Container::iterator
LOG_H	include/log.h	/^#define LOG_H$/;"	d
Log	include/log.h	/^  Log() {}$/;"	f	class:Log
Log	include/log.h	/^  Log(const std::string &filename) : log_filename(filename) {$/;"	f	class:Log
Log	include/log.h	/^class Log {$/;"	c
LoopStatus	include/mpris_media_player.h	/^  LoopStatus,$/;"	e	enum:DBusProperties
LoopStatusNone	include/mpris_media_player.h	/^  LoopStatusNone = 1,$/;"	e	enum:DBusLoopStatus
LoopStatusPlaylist	include/mpris_media_player.h	/^  LoopStatusPlaylist$/;"	e	enum:DBusLoopStatus
LoopStatusTrack	include/mpris_media_player.h	/^  LoopStatusTrack,$/;"	e	enum:DBusLoopStatus
MPRIS_MEDIA_PLAYER_H	include/mpris_media_player.h	/^#define MPRIS_MEDIA_PLAYER_H$/;"	d
M_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit M_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::M_formatter
M_formatter	include/spdlog/pattern_formatter-inl.h	/^class M_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
MaximumRate	include/mpris_media_player.h	/^  MaximumRate,$/;"	e	enum:DBusProperties
Metadata	include/mpris_media_player.h	/^  Metadata,$/;"	e	enum:DBusProperties
MinimumRate	include/mpris_media_player.h	/^  MinimumRate,$/;"	e	enum:DBusProperties
MprisMediaPlayer	include/mpris_media_player.h	/^class MprisMediaPlayer {$/;"	c
MprisMediaPlayer	src/mpris_media_player.cpp	/^MprisMediaPlayer::MprisMediaPlayer(const std::string &session)$/;"	f	class:MprisMediaPlayer
NOMINMAX	include/spdlog/details/windows_include.h	/^    #define NOMINMAX /;"	d
Next	include/mpris_media_player.h	/^  Next = 1,$/;"	e	enum:DBusMethods
OpenUri	include/mpris_media_player.h	/^  OpenUri,$/;"	e	enum:DBusMethods
PATH	include/mpris_media_player.h	/^  static const std::string PATH;$/;"	m	class:MprisMediaPlayer	typeref:typename:const std::string
PATH	src/mpris_media_player.cpp	/^const std::string MprisMediaPlayer::PATH = "\/org\/mpris\/MediaPlayer2";$/;"	m	class:MprisMediaPlayer	typeref:typename:const std::string
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
Pause	include/mpris_media_player.h	/^  Pause,$/;"	e	enum:DBusMethods
Play	include/mpris_media_player.h	/^  Play,$/;"	e	enum:DBusMethods
PlayPause	include/mpris_media_player.h	/^  PlayPause,$/;"	e	enum:DBusMethods
PlaybackStatus	include/mpris_media_player.h	/^  PlaybackStatus,$/;"	e	enum:DBusProperties
Position	include/mpris_media_player.h	/^  Position,$/;"	e	enum:DBusProperties
Previous	include/mpris_media_player.h	/^  Previous,$/;"	e	enum:DBusMethods
RDONLY	include/spdlog/fmt/bundled/os.h	/^    RDONLY = FMT_POSIX(O_RDONLY),  \/\/ Open for reading only.$/;"	e	enum:file::__anondea7980b0103
RDWR	include/spdlog/fmt/bundled/os.h	/^    RDWR = FMT_POSIX(O_RDWR),      \/\/ Open for reading and writing.$/;"	e	enum:file::__anondea7980b0103
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
R_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit R_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::R_formatter
R_formatter	include/spdlog/pattern_formatter-inl.h	/^class R_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
Rate	include/mpris_media_player.h	/^  Rate,$/;"	e	enum:DBusProperties
SD_JOURNAL_SUPPRESS_LOCATION	include/spdlog/sinks/systemd_sink.h	/^    #define SD_JOURNAL_SUPPRESS_LOCATION$/;"	d
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SOURCES	CMakeLists.txt	/^set(SOURCES$/;"	v
SPDLOG_ACTIVE_LEVEL	include/spdlog/common.h	/^    #define SPDLOG_ACTIVE_LEVEL /;"	d
SPDLOG_ANDROID_RETRIES	include/spdlog/sinks/android_sink.h	/^        #define SPDLOG_ANDROID_RETRIES /;"	d
SPDLOG_API	include/spdlog/common.h	/^                #define SPDLOG_API /;"	d
SPDLOG_API	include/spdlog/common.h	/^            #define SPDLOG_API /;"	d
SPDLOG_API	include/spdlog/common.h	/^        #define SPDLOG_API$/;"	d
SPDLOG_API	include/spdlog/common.h	/^    #define SPDLOG_API$/;"	d
SPDLOG_BUF_TO_STRING	include/spdlog/common.h	/^    #define SPDLOG_BUF_TO_STRING(/;"	d
SPDLOG_CATCH_STD	include/spdlog/common.h	/^    #define SPDLOG_CATCH_STD /;"	d
SPDLOG_CATCH_STD	include/spdlog/common.h	/^    #define SPDLOG_CATCH_STD$/;"	d
SPDLOG_CONSTEXPR	include/spdlog/common.h	/^    #define SPDLOG_CONSTEXPR /;"	d
SPDLOG_CONSTEXPR	include/spdlog/common.h	/^    #define SPDLOG_CONSTEXPR$/;"	d
SPDLOG_CONSTEXPR_FUNC	include/spdlog/common.h	/^        #define SPDLOG_CONSTEXPR_FUNC /;"	d
SPDLOG_CONSTEXPR_FUNC	include/spdlog/common.h	/^    #define SPDLOG_CONSTEXPR_FUNC /;"	d
SPDLOG_CRITICAL	include/spdlog/spdlog.h	/^    #define SPDLOG_CRITICAL(/;"	d
SPDLOG_DEBUG	include/spdlog/spdlog.h	/^    #define SPDLOG_DEBUG(/;"	d
SPDLOG_DEPRECATED	include/spdlog/common.h	/^    #define SPDLOG_DEPRECATED /;"	d
SPDLOG_DEPRECATED	include/spdlog/common.h	/^    #define SPDLOG_DEPRECATED$/;"	d
SPDLOG_EOL	include/spdlog/details/os.h	/^        #define SPDLOG_EOL /;"	d
SPDLOG_ERROR	include/spdlog/spdlog.h	/^    #define SPDLOG_ERROR(/;"	d
SPDLOG_FILENAME_T	include/spdlog/common.h	/^    #define SPDLOG_FILENAME_T(/;"	d
SPDLOG_FILENAME_T	include/spdlog/common.h	/^    #define SPDLOG_FILENAME_T(s) SPDLOG_FILENAME_T_/;"	d
SPDLOG_FILENAME_T_INNER	include/spdlog/common.h	/^    #define SPDLOG_FILENAME_T_INNER(/;"	d
SPDLOG_FMT_RUNTIME	include/spdlog/common.h	/^    #define SPDLOG_FMT_RUNTIME(/;"	d
SPDLOG_FMT_STRING	include/spdlog/common.h	/^    #define SPDLOG_FMT_STRING(/;"	d
SPDLOG_FOLDER_SEPS	include/spdlog/details/os.h	/^        #define SPDLOG_FOLDER_SEPS /;"	d
SPDLOG_FUNCTION	include/spdlog/common.h	/^    #define SPDLOG_FUNCTION /;"	d
SPDLOG_H	include/spdlog/spdlog.h	/^#define SPDLOG_H$/;"	d
SPDLOG_HEADER_ONLY	include/spdlog/common.h	/^    #define SPDLOG_HEADER_ONLY$/;"	d
SPDLOG_INFO	include/spdlog/spdlog.h	/^    #define SPDLOG_INFO(/;"	d
SPDLOG_INLINE	include/spdlog/common.h	/^    #define SPDLOG_INLINE /;"	d
SPDLOG_INLINE	include/spdlog/common.h	/^    #define SPDLOG_INLINE$/;"	d
SPDLOG_LEVEL_CRITICAL	include/spdlog/common.h	/^#define SPDLOG_LEVEL_CRITICAL /;"	d
SPDLOG_LEVEL_DEBUG	include/spdlog/common.h	/^#define SPDLOG_LEVEL_DEBUG /;"	d
SPDLOG_LEVEL_ERROR	include/spdlog/common.h	/^#define SPDLOG_LEVEL_ERROR /;"	d
SPDLOG_LEVEL_INFO	include/spdlog/common.h	/^#define SPDLOG_LEVEL_INFO /;"	d
SPDLOG_LEVEL_NAMES	include/spdlog/common.h	/^    #define SPDLOG_LEVEL_NAMES /;"	d
SPDLOG_LEVEL_NAME_CRITICAL	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAME_CRITICAL /;"	d
SPDLOG_LEVEL_NAME_DEBUG	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAME_DEBUG /;"	d
SPDLOG_LEVEL_NAME_ERROR	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAME_ERROR /;"	d
SPDLOG_LEVEL_NAME_INFO	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAME_INFO /;"	d
SPDLOG_LEVEL_NAME_OFF	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAME_OFF /;"	d
SPDLOG_LEVEL_NAME_TRACE	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAME_TRACE /;"	d
SPDLOG_LEVEL_NAME_WARNING	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAME_WARNING /;"	d
SPDLOG_LEVEL_OFF	include/spdlog/common.h	/^#define SPDLOG_LEVEL_OFF /;"	d
SPDLOG_LEVEL_TRACE	include/spdlog/common.h	/^#define SPDLOG_LEVEL_TRACE /;"	d
SPDLOG_LEVEL_WARN	include/spdlog/common.h	/^#define SPDLOG_LEVEL_WARN /;"	d
SPDLOG_LOGGER_CALL	include/spdlog/spdlog.h	/^    #define SPDLOG_LOGGER_CALL(/;"	d
SPDLOG_LOGGER_CATCH	include/spdlog/logger.h	/^    #define SPDLOG_LOGGER_CATCH(/;"	d
SPDLOG_LOGGER_CRITICAL	include/spdlog/spdlog.h	/^    #define SPDLOG_LOGGER_CRITICAL(/;"	d
SPDLOG_LOGGER_DEBUG	include/spdlog/spdlog.h	/^    #define SPDLOG_LOGGER_DEBUG(/;"	d
SPDLOG_LOGGER_ERROR	include/spdlog/spdlog.h	/^    #define SPDLOG_LOGGER_ERROR(/;"	d
SPDLOG_LOGGER_INFO	include/spdlog/spdlog.h	/^    #define SPDLOG_LOGGER_INFO(/;"	d
SPDLOG_LOGGER_TRACE	include/spdlog/spdlog.h	/^    #define SPDLOG_LOGGER_TRACE(/;"	d
SPDLOG_LOGGER_WARN	include/spdlog/spdlog.h	/^    #define SPDLOG_LOGGER_WARN(/;"	d
SPDLOG_NOEXCEPT	include/spdlog/common.h	/^    #define SPDLOG_NOEXCEPT /;"	d
SPDLOG_NO_TLS	include/spdlog/common.h	/^        #define SPDLOG_NO_TLS /;"	d
SPDLOG_SHORT_LEVEL_NAMES	include/spdlog/common.h	/^    #define SPDLOG_SHORT_LEVEL_NAMES /;"	d
SPDLOG_THROW	include/spdlog/common.h	/^    #define SPDLOG_THROW(/;"	d
SPDLOG_TO_VERSION	include/spdlog/version.h	/^#define SPDLOG_TO_VERSION(/;"	d
SPDLOG_TRACE	include/spdlog/spdlog.h	/^    #define SPDLOG_TRACE(/;"	d
SPDLOG_TRY	include/spdlog/common.h	/^    #define SPDLOG_TRY /;"	d
SPDLOG_TRY	include/spdlog/common.h	/^    #define SPDLOG_TRY$/;"	d
SPDLOG_VERSION	include/spdlog/version.h	/^#define SPDLOG_VERSION /;"	d
SPDLOG_VER_MAJOR	include/spdlog/version.h	/^#define SPDLOG_VER_MAJOR /;"	d
SPDLOG_VER_MINOR	include/spdlog/version.h	/^#define SPDLOG_VER_MINOR /;"	d
SPDLOG_VER_PATCH	include/spdlog/version.h	/^#define SPDLOG_VER_PATCH /;"	d
SPDLOG_WARN	include/spdlog/spdlog.h	/^    #define SPDLOG_WARN(/;"	d
STRINGIFY	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
S_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit S_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::S_formatter
S_formatter	include/spdlog/pattern_formatter-inl.h	/^class S_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
Seek	include/mpris_media_player.h	/^  Seek,$/;"	e	enum:DBusMethods
SetPosition	include/mpris_media_player.h	/^  SetPosition,$/;"	e	enum:DBusMethods
Setter	include/mpris_media_player.h	/^typedef enum DBusGetSet { Getter = 1, Setter } DBusGetSetType;$/;"	e	enum:DBusGetSet
Shuffle	include/mpris_media_player.h	/^  Shuffle,$/;"	e	enum:DBusProperties
Stop	include/mpris_media_player.h	/^  Stop$/;"	e	enum:DBusMethods
T	include/spdlog/fmt/bundled/chrono.h	/^  using T = std::numeric_limits<To>;$/;"	t	function:safe_duration_cast::lossless_integral_conversion	typeref:typename:std::numeric_limits<To>
T	include/spdlog/fmt/bundled/chrono.h	/^  using T = std::numeric_limits<To>;$/;"	t	function:safe_duration_cast::safe_float_conversion	typeref:typename:std::numeric_limits<To>
TRUNC	include/spdlog/fmt/bundled/os.h	/^    TRUNC = FMT_POSIX(O_TRUNC)     \/\/ Truncate the content of the file.$/;"	e	enum:file::__anondea7980b0103
TX_BUFFER_SIZE	include/spdlog/details/udp_client-windows.h	/^    static constexpr int TX_BUFFER_SIZE = 1024 * 10;$/;"	m	class:spdlog::details::udp_client	typeref:typename:int
TX_BUFFER_SIZE	include/spdlog/details/udp_client.h	/^    static constexpr int TX_BUFFER_SIZE = 1024 * 10;$/;"	m	class:spdlog::details::udp_client	typeref:typename:int
T_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit T_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::T_formatter
T_formatter	include/spdlog/pattern_formatter-inl.h	/^class T_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
ToRep	include/spdlog/fmt/bundled/chrono.h	/^  using ToRep = typename To::rep;$/;"	t	function:safe_duration_cast::safe_duration_cast	typeref:typename:To::rep
Volume	include/mpris_media_player.h	/^  Volume$/;"	e	enum:DBusProperties
WIN32_LEAN_AND_MEAN	include/spdlog/details/tcp_client-windows.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	include/spdlog/details/windows_include.h	/^    #define WIN32_LEAN_AND_MEAN$/;"	d
WRONLY	include/spdlog/fmt/bundled/os.h	/^    WRONLY = FMT_POSIX(O_WRONLY),  \/\/ Open for writing only.$/;"	e	enum:file::__anondea7980b0103
Y_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit Y_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::Y_formatter
Y_formatter	include/spdlog/pattern_formatter-inl.h	/^class Y_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
__anon0652ec360103	include/spdlog/fmt/bundled/args.h	/^    enum {$/;"	g	struct:dynamic_format_arg_store::need_copy
__anon0652ec360202	include/spdlog/fmt/bundled/args.h	/^    auto pop_one = [](std::vector<basic_format_arg<Context>>* data) {$/;"	f	function:dynamic_format_arg_store::emplace_arg	file:
__anon0accc0920103	include/spdlog/fmt/bundled/core.h	/^enum {$/;"	g	namespace:detail
__anon0accc0920203	include/spdlog/fmt/bundled/core.h	/^  enum { buffer_size = 256 };$/;"	g	class:detail::iterator_buffer
__anon0accc0920303	include/spdlog/fmt/bundled/core.h	/^  enum { buffer_size = 256 };$/;"	g	class:detail::iterator_buffer
__anon0accc0920403	include/spdlog/fmt/bundled/core.h	/^  enum { buffer_size = 256 };$/;"	g	class:detail::counting_buffer
__anon0accc092050a	include/spdlog/fmt/bundled/core.h	/^  union {$/;"	u	class:detail::value
__anon0accc0920603	include/spdlog/fmt/bundled/core.h	/^enum { long_short = sizeof(long) == sizeof(int) };$/;"	g	namespace:detail
__anon0accc0920702	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(const T (&values)[N]) -> const T (&)[N] {$/;"	f	struct:detail::arg_mapper	file:
__anon0accc0920803	include/spdlog/fmt/bundled/core.h	/^enum { packed_arg_bits = 4 };$/;"	g	namespace:detail
__anon0accc0920903	include/spdlog/fmt/bundled/core.h	/^enum { max_packed_args = 62 \/ packed_arg_bits };$/;"	g	namespace:detail
__anon0accc0920a03	include/spdlog/fmt/bundled/core.h	/^enum : unsigned long long { is_unpacked_bit = 1ULL << 63 };$/;"	g	namespace:detail	typeref:typename:unsigned long long
__anon0accc0920b03	include/spdlog/fmt/bundled/core.h	/^enum : unsigned long long { has_named_args_bit = 1ULL << 62 };$/;"	g	namespace:detail	typeref:typename:unsigned long long
__anon0accc0920c0a	include/spdlog/fmt/bundled/core.h	/^  union {$/;"	u	class:basic_format_args
__anon0accc0920d03	include/spdlog/fmt/bundled/core.h	/^  enum { max_size = 4 };$/;"	g	struct:detail::fill_t
__anon0accc0920e08	include/spdlog/fmt/bundled/core.h	/^  struct {$/;"	s	function:detail::parse_format_specs
__anon0accc0920f08	include/spdlog/fmt/bundled/core.h	/^  struct {$/;"	s	function:detail::parse_format_specs
__anon1c2269140102	include/spdlog/details/registry.h	/^        auto clbk = [this]() { this->flush_all(); };$/;"	f	function:spdlog::details::registry::flush_every	file:
__anon6a679f160102	include/spdlog/logger-inl.h	/^        tracer_.foreach_pop([this](const log_msg &msg) { this->sink_it_(msg); });$/;"	f	function:spdlog::logger::dump_backtrace_	file:
__anon75bb1ee30102	include/spdlog/details/periodic_worker.h	/^        worker_thread_ = std::thread([this, callback_fun, interval]() {$/;"	f	function:spdlog::details::periodic_worker::periodic_worker	file:
__anon75bb1ee30202	include/spdlog/details/periodic_worker.h	/^                if (this->cv_.wait_for(lock, interval, [this] { return !this->active_; })) {$/;"	f	function:spdlog::details::periodic_worker::periodic_worker::__anon75bb1ee30102	file:
__anon8a2b39890102	include/spdlog/sinks/qt_sinks.h	/^            qt_text_edit_, [params]() { invoke_method_(params); }, Qt::AutoConnection);$/;"	f	function:spdlog::sinks::qt_color_sink::sink_it_	file:
__anon9b43c3a80102	include/spdlog/cfg/helpers-inl.h	/^    std::transform(str.begin(), str.end(), str.begin(), [](char ch) {$/;"	f	function:spdlog::cfg::helpers::to_lower_	file:
__anonab1e89840102	include/spdlog/async.h	/^    init_thread_pool(q_size, thread_count, on_thread_start, [] {});$/;"	f	function:spdlog::init_thread_pool	file:
__anonab1e89840202	include/spdlog/async.h	/^        q_size, thread_count, [] {}, [] {});$/;"	f	function:spdlog::init_thread_pool	file:
__anonab1e89840302	include/spdlog/async.h	/^        q_size, thread_count, [] {}, [] {});$/;"	f	function:spdlog::init_thread_pool	file:
__anonadd9e9b20103	include/spdlog/fmt/bundled/compile.h	/^enum { manual_indexing_id = -1 };$/;"	g	namespace:detail
__anonb3e466740102	include/spdlog/fmt/bundled/std.h	/^          [&](const auto& v) {$/;"	f	function:formatter::format	file:
__anonb671a0720102	include/spdlog/fmt/bundled/format.h	/^  auto decode = [f](const char* buf_ptr, const char* ptr) {$/;"	f	function:detail::for_each_codepoint	file:
__anonb671a0720202	include/spdlog/fmt/bundled/format.h	/^  for_each_codepoint(s, [begin, &n, &result](uint32_t, string_view sv) {$/;"	f	function:detail::code_point_index	file:
__anonb671a0720303	include/spdlog/fmt/bundled/format.h	/^enum { inline_buffer_size = 500 };$/;"	g
__anonb671a0720402	include/spdlog/fmt/bundled/format.h	/^  return [](UInt m) {$/;"	f	function:detail::count_digits	file:
__anonb671a0720502	include/spdlog/fmt/bundled/format.h	/^      out, specs, bytes.size(), [bytes](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_bytes	file:
__anonb671a0720602	include/spdlog/fmt/bundled/format.h	/^  auto write = [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_ptr	file:
__anonb671a0720702	include/spdlog/fmt/bundled/format.h	/^                     [&](uint32_t cp, string_view sv) {$/;"	f	function:detail::find_escape	file:
__anonb671a0720802	include/spdlog/fmt/bundled/format.h	/^  return write_padded(out, specs, 1, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_char	file:
__anonb671a0720902	include/spdlog/fmt/bundled/format.h	/^      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anonb671a0720a02	include/spdlog/fmt/bundled/format.h	/^      out, specs, size, size, [&](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anonb671a0720b02	include/spdlog/fmt/bundled/format.h	/^        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anonb671a0720c02	include/spdlog/fmt/bundled/format.h	/^        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anonb671a0720d02	include/spdlog/fmt/bundled/format.h	/^                     [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anonb671a0720e02	include/spdlog/fmt/bundled/format.h	/^                     [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anonb671a0720f02	include/spdlog/fmt/bundled/format.h	/^                      [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write	file:
__anonb671a0721002	include/spdlog/fmt/bundled/format.h	/^  return write_padded(out, specs, size, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_nonfinite	file:
__anonb671a0721102	include/spdlog/fmt/bundled/format.h	/^  auto use_exp_format = [=]() {$/;"	f	function:detail::do_write_float	file:
__anonb671a0721202	include/spdlog/fmt/bundled/format.h	/^    auto write = [=](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anonb671a0721302	include/spdlog/fmt/bundled/format.h	/^    return write_padded<align::right>(out, specs, size, [&](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anonb671a0721402	include/spdlog/fmt/bundled/format.h	/^    return write_padded<align::right>(out, specs, size, [&](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anonb671a0721502	include/spdlog/fmt/bundled/format.h	/^  return write_padded<align::right>(out, specs, size, [&](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anonb671a0721603	include/spdlog/fmt/bundled/format.h	/^  enum { bigits_capacity = 32 };$/;"	g	class:detail::bigint
__anonb671a0721702	include/spdlog/fmt/bundled/format.h	/^    auto minimum = [](int a, int b) { return a < b ? a : b; };$/;"	f	function:detail::bigint::add_compare	file:
__anonb671a0721802	include/spdlog/fmt/bundled/format.h	/^    auto maximum = [](int a, int b) { return a > b ? a : b; };$/;"	f	function:detail::bigint::add_compare	file:
__anonb671a0721902	include/spdlog/fmt/bundled/format.h	/^    auto get_bigit = [](const bigint& n, int i) -> bigit {$/;"	f	function:detail::bigint::add_compare	typeref:typename:bigit	file:
__anonb671a0721a02	include/spdlog/fmt/bundled/format.h	/^        auto print_subsegment = [&](uint32_t subsegment, char* buffer) {$/;"	f	function:detail::format_float	file:
__anonb671a0721b03	include/spdlog/fmt/bundled/format.h	/^  enum { buffer_size = std::numeric_limits<unsigned long long>::digits10 + 3 };$/;"	g	class:format_int
__anonc31081fc0102	include/spdlog/fmt/bundled/printf.h	/^  auto get_arg = [&](int arg_index) {$/;"	f	function:detail::vprintf	file:
__anond6ffb5320102	include/spdlog/fmt/bundled/chrono.h	/^  static bool init = []() -> bool {$/;"	f	function:detail::tzset_once	typeref:typename:bool	file:
__anond6ffb532020a	include/spdlog/fmt/bundled/chrono.h	/^  union {$/;"	u	class:detail::get_locale
__anondc4b9cc20108	include/spdlog/fmt/bundled/format-inl.h	/^FMT_INLINE_VARIABLE constexpr struct {$/;"	s	namespace:detail::dragonbox
__anondc4b9cc20202	include/spdlog/fmt/bundled/format-inl.h	/^  for_each_codepoint(s, [this](uint32_t cp, string_view) {$/;"	f	function:detail::utf8_to_utf16::utf8_to_utf16	file:
__anondea7980b0103	include/spdlog/fmt/bundled/os.h	/^  enum {$/;"	g	class:file
__anonf3ea3ba40111	include/spdlog/fmt/bundled/ostream.h	/^namespace {$/;"	n	namespace:detail
__anonfe2f5b5c0102	include/spdlog/details/thread_pool-inl.h	/^        threads_.emplace_back([this, on_thread_start, on_thread_stop] {$/;"	f	function:spdlog::details::thread_pool::thread_pool	file:
__anonfe2f5b5c0202	include/spdlog/details/thread_pool-inl.h	/^    : thread_pool(q_max_items, threads_n, on_thread_start, [] {}) {}$/;"	f	namespace:spdlog::details	file:
__anonfe2f5b5c0302	include/spdlog/details/thread_pool-inl.h	/^          q_max_items, threads_n, [] {}, [] {}) {}$/;"	f	namespace:spdlog::details	file:
__anonfe2f5b5c0402	include/spdlog/details/thread_pool-inl.h	/^          q_max_items, threads_n, [] {}, [] {}) {}$/;"	f	namespace:spdlog::details	file:
__anonffab3f600102	include/spdlog/details/mpmc_blocking_q.h	/^            pop_cv_.wait(lock, [this] { return !this->q_.full(); });$/;"	f	function:spdlog::details::mpmc_blocking_queue::enqueue	file:
__anonffab3f600202	include/spdlog/details/mpmc_blocking_q.h	/^            if (!push_cv_.wait_for(lock, wait_duration, [this] { return !this->q_.empty(); })) {$/;"	f	function:spdlog::details::mpmc_blocking_queue::dequeue_for	file:
__anonffab3f600302	include/spdlog/details/mpmc_blocking_q.h	/^            push_cv_.wait(lock, [this] { return !this->q_.empty(); });$/;"	f	function:spdlog::details::mpmc_blocking_queue::dequeue	file:
__anonffab3f600402	include/spdlog/details/mpmc_blocking_q.h	/^        pop_cv_.wait(lock, [this] { return !this->q_.full(); });$/;"	f	function:spdlog::details::mpmc_blocking_queue::enqueue	file:
__anonffab3f600502	include/spdlog/details/mpmc_blocking_q.h	/^        if (!push_cv_.wait_for(lock, wait_duration, [this] { return !this->q_.empty(); })) {$/;"	f	function:spdlog::details::mpmc_blocking_queue::dequeue_for	file:
__anonffab3f600602	include/spdlog/details/mpmc_blocking_q.h	/^        push_cv_.wait(lock, [this] { return !this->q_.empty(); });$/;"	f	function:spdlog::details::mpmc_blocking_queue::dequeue	file:
__has_feature	include/spdlog/details/os-inl.h	/^    #define __has_feature(/;"	d
__has_include	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
_dbus_msg_new_method_call	src/mpris_media_player.cpp	/^DBusMessage *MprisMediaPlayer::_dbus_msg_new_method_call($/;"	f	class:MprisMediaPlayer	typeref:typename:DBusMessage *
_thread_id	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE size_t _thread_id() SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE size_t
a_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit a_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::a_formatter
a_formatter	include/spdlog/pattern_formatter-inl.h	/^class a_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
abort	include/spdlog/fmt/bundled/format.h	/^enum class to_utf8_error_policy { abort, replace };$/;"	e	enum:detail::to_utf8_error_policy
abort_fuzzing_if	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
abs_value	include/spdlog/fmt/bundled/format.h	/^  UInt abs_value;$/;"	m	struct:detail::write_int_arg	typeref:typename:UInt
accessor	include/spdlog/fmt/bundled/core.h	/^    accessor(base b) : base(b) {}$/;"	f	struct:detail::get_container::accessor
accessor	include/spdlog/fmt/bundled/core.h	/^  struct accessor : base {$/;"	s	function:detail::get_container
active_	include/spdlog/details/periodic_worker.h	/^    bool active_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:bool
add_ch	include/spdlog/pattern_formatter-inl.h	/^    void add_ch(char ch) { str_ += ch; }$/;"	f	class:spdlog::details::aggregate_formatter	typeref:typename:void
add_compare	include/spdlog/fmt/bundled/format.h	/^  friend FMT_CONSTEXPR20 auto add_compare(const bigint& lhs1,$/;"	f	namespace:detail	typeref:typename:int
add_flag	include/spdlog/pattern_formatter.h	/^    pattern_formatter &add_flag(char flag, Args &&...args) {$/;"	f	class:spdlog::pattern_formatter	typeref:typename:pattern_formatter &
add_sink	include/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sub_sink) {$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
addr_	include/spdlog/details/udp_client-windows.h	/^    sockaddr_in addr_ = {};$/;"	m	class:spdlog::details::udp_client	typeref:typename:sockaddr_in
adjust_precision	include/spdlog/fmt/bundled/format.h	/^inline FMT_CONSTEXPR20 void adjust_precision(int& precision, int exp10) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 void
advance_to	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void advance_to(iterator it) {$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
advance_to	include/spdlog/fmt/bundled/core.h	/^  void advance_to(iterator it) {$/;"	f	class:basic_format_context	typeref:typename:void
advance_to	include/spdlog/fmt/bundled/printf.h	/^  void advance_to(detail::buffer_appender<Char>) {}$/;"	f	class:basic_printf_context	typeref:typename:void
after_close	include/spdlog/common.h	/^    std::function<void(const filename_t &filename)> after_close;$/;"	m	struct:spdlog::file_event_handlers	typeref:typename:std::function<void (const filename_t & filename)>
after_open	include/spdlog/common.h	/^    std::function<void(const filename_t &filename, std::FILE *file_stream)> after_open;$/;"	m	struct:spdlog::file_event_handlers	typeref:typename:std::function<void (const filename_t & filename,std::FILE * file_stream)>
aggregate_formatter	include/spdlog/pattern_formatter-inl.h	/^class aggregate_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
album_artist	include/mpris_media_player.h	/^  std::vector<std::string> album_artist;$/;"	m	struct:DBusMetadata	typeref:typename:std::vector<std::string>
alice_blue	include/spdlog/fmt/bundled/color.h	/^  alice_blue = 0xF0F8FF,               \/\/ rgb(240,248,255)$/;"	e	enum:color
align	include/spdlog/fmt/bundled/core.h	/^  align_t align : 4;$/;"	m	struct:format_specs	typeref:typename:align_t:4
align	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
align	include/spdlog/fmt/bundled/core.h	/^namespace align {$/;"	n
align	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void align(const bigint& other) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
align_	include/spdlog/fmt/bundled/format.h	/^  align_t align_ : 4;$/;"	m	struct:nested_formatter	typeref:typename:align_t:4
align_t	include/spdlog/fmt/bundled/core.h	/^using align_t = align::type;$/;"	t	typeref:typename:align::type
all	build/Makefile	/^all: cmake_check_build_system$/;"	t
all	include/spdlog/fmt/bundled/ranges.h	/^  using all = detail::all<typename T::container_type>;$/;"	t	struct:formatter	typeref:typename:detail::all<typename T::container_type>
all	include/spdlog/fmt/bundled/ranges.h	/^template <typename Container> struct all {$/;"	s	namespace:detail
alloc_	include/spdlog/fmt/bundled/format.h	/^  FMT_NO_UNIQUE_ADDRESS Allocator alloc_;$/;"	m	class:basic_memory_buffer	typeref:typename:FMT_NO_UNIQUE_ADDRESS Allocator
alt	include/spdlog/fmt/bundled/core.h	/^  bool alt : 1;  \/\/ Alternate form ('#').$/;"	m	struct:format_specs	typeref:typename:bool:1
alternative	include/spdlog/fmt/bundled/chrono.h	/^  alternative$/;"	e	enum:detail::numeric_system
always	include/spdlog/common.h	/^enum class color_mode { always, automatic, never };$/;"	e	enum:spdlog::color_mode
ampm	include/spdlog/pattern_formatter-inl.h	/^static const char *ampm(const tm &t) { return t.tm_hour >= 12 ? "PM" : "AM"; }$/;"	f	namespace:spdlog::details	typeref:typename:const char *
android_log	include/spdlog/sinks/android_sink.h	/^    typename std::enable_if<ID != static_cast<int>(log_id::LOG_ID_MAIN), int>::type android_log($/;"	f	class:spdlog::sinks::android_sink	typeref:typename:std::enable_if<ID!=static_cast<int> (log_id::LOG_ID_MAIN),int>::type
android_log	include/spdlog/sinks/android_sink.h	/^    typename std::enable_if<ID == static_cast<int>(log_id::LOG_ID_MAIN), int>::type android_log($/;"	f	class:spdlog::sinks::android_sink	typeref:typename:std::enable_if<ID==static_cast<int> (log_id::LOG_ID_MAIN),int>::type
android_logger_mt	include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
android_logger_st	include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
android_sink	include/spdlog/sinks/android_sink.h	/^    explicit android_sink(std::string tag = "spdlog", bool use_raw_msg = false)$/;"	f	class:spdlog::sinks::android_sink
android_sink	include/spdlog/sinks/android_sink.h	/^class android_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
android_sink_buf_mt	include/spdlog/sinks/android_sink.h	/^using android_sink_buf_mt = android_sink<std::mutex, BufferId>;$/;"	t	namespace:spdlog::sinks	typeref:typename:android_sink<std::mutex,BufferId>
android_sink_buf_st	include/spdlog/sinks/android_sink.h	/^using android_sink_buf_st = android_sink<details::null_mutex, BufferId>;$/;"	t	namespace:spdlog::sinks	typeref:typename:android_sink<details::null_mutex,BufferId>
android_sink_mt	include/spdlog/sinks/android_sink.h	/^using android_sink_mt = android_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:android_sink<std::mutex>
android_sink_st	include/spdlog/sinks/android_sink.h	/^using android_sink_st = android_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:android_sink<details::null_mutex>
ansi_color_escape	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR ansi_color_escape(detail::color_type text_color,$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR
ansi_color_escape	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR ansi_color_escape(emphasis em) noexcept {$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR
ansi_color_escape	include/spdlog/fmt/bundled/color.h	/^template <typename Char> struct ansi_color_escape {$/;"	s	namespace:detail
ansicolor_sink	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE ansicolor_sink<ConsoleMutex>::ansicolor_sink(FILE *target_file, color_mode mode)$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE
ansicolor_sink	include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink : public sink {$/;"	c	namespace:spdlog::sinks
ansicolor_stderr_sink	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE ansicolor_stderr_sink<ConsoleMutex>::ansicolor_stderr_sink(color_mode mode)$/;"	f	class:spdlog::sinks::ansicolor_stderr_sink	typeref:typename:SPDLOG_INLINE
ansicolor_stderr_sink	include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stderr_sink : public ansicolor_sink<ConsoleMutex> {$/;"	c	namespace:spdlog::sinks
ansicolor_stderr_sink_mt	include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stderr_sink_mt = ansicolor_stderr_sink<details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stderr_sink<details::console_mutex>
ansicolor_stderr_sink_st	include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stderr_sink_st = ansicolor_stderr_sink<details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stderr_sink<details::console_nullmutex>
ansicolor_stdout_sink	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE ansicolor_stdout_sink<ConsoleMutex>::ansicolor_stdout_sink(color_mode mode)$/;"	f	class:spdlog::sinks::ansicolor_stdout_sink	typeref:typename:SPDLOG_INLINE
ansicolor_stdout_sink	include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stdout_sink : public ansicolor_sink<ConsoleMutex> {$/;"	c	namespace:spdlog::sinks
ansicolor_stdout_sink_mt	include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stdout_sink_mt = ansicolor_stdout_sink<details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stdout_sink<details::console_mutex>
ansicolor_stdout_sink_st	include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stdout_sink_st = ansicolor_stdout_sink<details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stdout_sink<details::console_nullmutex>
antique_white	include/spdlog/fmt/bundled/color.h	/^  antique_white = 0xFAEBD7,            \/\/ rgb(250,235,215)$/;"	e	enum:color
append	include/spdlog/fmt/bundled/format.h	/^  void append(const ContiguousRange& range) {$/;"	f	class:basic_memory_buffer	typeref:typename:void
append	include/spdlog/fmt/bundled/format.h	/^void buffer<T>::append(const U* begin, const U* end) {$/;"	f	class:detail::buffer	typeref:typename:void
append_int	include/spdlog/details/fmt_helper.h	/^inline void append_int(T n, memory_buf_t &dest) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
append_string_view	include/spdlog/details/fmt_helper.h	/^inline void append_string_view(spdlog::string_view_t view, memory_buf_t &dest) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
appender	include/spdlog/fmt/bundled/core.h	/^  appender(base it) noexcept : base(it) {}$/;"	f	class:appender
appender	include/spdlog/fmt/bundled/core.h	/^class appender : public std::back_insert_iterator<detail::buffer<char>> {$/;"	c
apply	include/spdlog/fmt/bundled/format.h	/^  auto apply(Out out, basic_string_view<C> digits) const -> Out {$/;"	f	class:detail::digit_grouping	typeref:typename:Out
apply	include/spdlog/fmt/bundled/format.h	/^  constexpr auto apply(Out out, basic_string_view<C>) const -> Out {$/;"	f	class:detail::fallback_digit_grouping	typeref:typename:Out
apply_all	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::apply_all($/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
apply_all	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void apply_all(const std::function<void(std::shared_ptr<logger>)> &fun) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
apply_logger_env_levels	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::apply_logger_env_levels(std::shared_ptr<logger> new_logger) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
apply_logger_env_levels	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void apply_logger_env_levels(std::shared_ptr<logger> logger) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
aqua	include/spdlog/fmt/bundled/color.h	/^  aqua = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	e	enum:color
aquamarine	include/spdlog/fmt/bundled/color.h	/^  aquamarine = 0x7FFFD4,               \/\/ rgb(127,255,212)$/;"	e	enum:color
arg	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto arg(basic_string_view<Char> name) -> format_arg {$/;"	f	class:basic_format_context	typeref:typename:format_arg
arg	include/spdlog/fmt/bundled/core.h	/^  constexpr auto arg(int id) const -> format_arg { return args_.get(id); }$/;"	f	class:basic_format_context	typeref:typename:format_arg
arg	include/spdlog/fmt/bundled/core.h	/^inline auto arg(const Char* name, const T& arg) -> detail::named_arg<Char, T> {$/;"	f	typeref:typename:detail::named_arg<Char,T>
arg	include/spdlog/fmt/bundled/printf.h	/^  auto arg(int id) const -> basic_format_arg<basic_printf_context> {$/;"	f	class:basic_printf_context	typeref:typename:basic_format_arg<basic_printf_context>
arg_	include/spdlog/fmt/bundled/printf.h	/^  basic_format_arg<Context>& arg_;$/;"	m	class:detail::arg_converter	typeref:typename:basic_format_arg<Context> &
arg_	include/spdlog/fmt/bundled/printf.h	/^  basic_format_arg<Context>& arg_;$/;"	m	class:detail::char_converter	typeref:typename:basic_format_arg<Context> &
arg_converter	include/spdlog/fmt/bundled/printf.h	/^  arg_converter(basic_format_arg<Context>& arg, char_type type)$/;"	f	class:detail::arg_converter
arg_converter	include/spdlog/fmt/bundled/printf.h	/^template <typename T, typename Context> class arg_converter {$/;"	c	namespace:detail
arg_data	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE arg_data(const U&... init) : args_{init...} {}$/;"	f	struct:detail::arg_data	typeref:typename:FMT_CONSTEXPR FMT_INLINE
arg_data	include/spdlog/fmt/bundled/core.h	/^  arg_data(const U&... init) : args_{T(named_args_, NUM_NAMED_ARGS), init...} {}$/;"	f	struct:detail::arg_data
arg_data	include/spdlog/fmt/bundled/core.h	/^struct arg_data {$/;"	s	namespace:detail
arg_data	include/spdlog/fmt/bundled/core.h	/^struct arg_data<T, Char, NUM_ARGS, 0> {$/;"	s	namespace:detail
arg_formatter	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct arg_formatter {$/;"	s	namespace:detail
arg_id	include/spdlog/fmt/bundled/compile.h	/^  arg_ref<Char> arg_id;$/;"	m	struct:detail::arg_id_handler	typeref:typename:arg_ref<Char>
arg_id	include/spdlog/fmt/bundled/compile.h	/^  arg_ref<Char> arg_id;$/;"	m	struct:detail::parse_arg_id_result	typeref:typename:arg_ref<Char>
arg_id	include/spdlog/fmt/bundled/core.h	/^    int arg_id;$/;"	m	struct:detail::parse_replacement_field::id_adapter	typeref:typename:int
arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto arg_id(basic_string_view<Char> name) -> int {$/;"	f	class:basic_format_context	typeref:typename:int
arg_id_end	include/spdlog/fmt/bundled/compile.h	/^  const Char* arg_id_end;$/;"	m	struct:detail::parse_arg_id_result	typeref:typename:const Char *
arg_id_handler	include/spdlog/fmt/bundled/compile.h	/^template <typename Char> struct arg_id_handler {$/;"	s	namespace:detail
arg_id_kind	include/spdlog/fmt/bundled/core.h	/^enum class arg_id_kind { none, index, name };$/;"	g	namespace:detail
arg_mapper	include/spdlog/fmt/bundled/core.h	/^template <typename Context> struct arg_mapper {$/;"	s	namespace:detail
arg_ref	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}$/;"	f	struct:detail::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR explicit arg_ref(basic_string_view<Char> name)$/;"	f	struct:detail::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR explicit arg_ref(int index)$/;"	f	struct:detail::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	include/spdlog/fmt/bundled/core.h	/^template <typename Char> struct arg_ref {$/;"	s	namespace:detail
arg_type	include/spdlog/fmt/bundled/core.h	/^    type arg_type;$/;"	m	struct:detail::parse_format_specs::__anon0accc0920f08	typeref:typename:type
arg_type	include/spdlog/fmt/bundled/core.h	/^  constexpr auto arg_type(int id) const -> type { return types_[id]; }$/;"	f	class:detail::compile_parse_context	typeref:typename:type
arg_type	include/spdlog/fmt/bundled/core.h	/^  using arg_type = remove_cvref_t<decltype(arg_mapper<Context>().map(val))>;$/;"	t	function:detail::make_arg
args	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto args() const -> const T* { return args_; }$/;"	f	struct:detail::arg_data	typeref:typename:const T *
args	include/spdlog/fmt/bundled/core.h	/^  auto args() const -> const T* { return args_ + 1; }$/;"	f	struct:detail::arg_data	typeref:typename:const T *
args	include/spdlog/fmt/bundled/core.h	/^  auto args() const -> const format_args& { return args_; }$/;"	f	class:basic_format_context	typeref:typename:const format_args &
args	include/spdlog/fmt/bundled/format.h	/^  basic_format_args<context> args;$/;"	m	struct:detail::default_arg_formatter	typeref:typename:basic_format_args<context>
args_	include/spdlog/fmt/bundled/core.h	/^    const format_arg* args_;$/;"	m	union:basic_format_args::__anon0accc0920c0a	typeref:typename:const format_arg *
args_	include/spdlog/fmt/bundled/core.h	/^  T args_[1 + (NUM_ARGS != 0 ? NUM_ARGS : +1)];$/;"	m	struct:detail::arg_data	typeref:typename:T[]
args_	include/spdlog/fmt/bundled/core.h	/^  T args_[NUM_ARGS != 0 ? NUM_ARGS : +1];$/;"	m	struct:detail::arg_data	typeref:typename:T[]
args_	include/spdlog/fmt/bundled/core.h	/^  basic_format_args<basic_format_context> args_;$/;"	m	class:basic_format_context	typeref:typename:basic_format_args<basic_format_context>
args_	include/spdlog/fmt/bundled/printf.h	/^  basic_format_args<basic_printf_context> args_;$/;"	m	class:basic_printf_context	typeref:typename:basic_format_args<basic_printf_context>
art_url	include/mpris_media_player.h	/^  std::string art_url;$/;"	m	struct:DBusMetadata	typeref:typename:std::string
artist	include/mpris_media_player.h	/^  std::vector<std::string> artist;$/;"	m	struct:DBusMetadata	typeref:typename:std::vector<std::string>
as_sid	include/spdlog/sinks/win_eventlog_sink.h	/^    SID *as_sid() const { return buffer_.empty() ? nullptr : (SID *)buffer_.data(); }$/;"	f	struct:spdlog::sinks::win_eventlog::internal::sid_t	typeref:typename:SID *
assert_fail	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void assert_fail(const char* file, int line, const char* message) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
assign	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto assign(Float n) -> bool {$/;"	f	struct:detail::basic_fp	typeref:typename:bool
assign	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void assign(UInt n) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
assign	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void assign(const bigint& other) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
assign_pow10	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void assign_pow10(int exp) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
assume	include/spdlog/fmt/bundled/format.h	/^FMT_INLINE void assume(bool condition) {$/;"	f	namespace:detail	typeref:typename:FMT_INLINE void
async_factory	include/spdlog/async.h	/^using async_factory = async_factory_impl<async_overflow_policy::block>;$/;"	t	namespace:spdlog	typeref:typename:async_factory_impl<async_overflow_policy::block>
async_factory_impl	include/spdlog/async.h	/^struct async_factory_impl {$/;"	s	namespace:spdlog
async_factory_nonblock	include/spdlog/async.h	/^using async_factory_nonblock = async_factory_impl<async_overflow_policy::overrun_oldest>;$/;"	t	namespace:spdlog	typeref:typename:async_factory_impl<async_overflow_policy::overrun_oldest>
async_logger	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE spdlog::async_logger::async_logger(std::string logger_name,$/;"	f	class:spdlog::async_logger	typeref:typename:SPDLOG_INLINE
async_logger	include/spdlog/async_logger.h	/^    async_logger(std::string logger_name,$/;"	f	class:spdlog::async_logger
async_logger	include/spdlog/async_logger.h	/^class SPDLOG_API async_logger final : public std::enable_shared_from_this<async_logger>,$/;"	c	namespace:spdlog
async_logger_ptr	include/spdlog/details/thread_pool.h	/^using async_logger_ptr = std::shared_ptr<spdlog::async_logger>;$/;"	t	namespace:spdlog::details	typeref:typename:std::shared_ptr<spdlog::async_logger>
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type, const details::log_msg &m)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type, std::promise<void> &&promise)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_msg &&other)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    explicit async_msg(async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^struct async_msg : log_msg_buffer {$/;"	s	namespace:spdlog::details
async_msg_type	include/spdlog/details/thread_pool.h	/^enum class async_msg_type { log, flush, terminate };$/;"	g	namespace:spdlog::details
async_overflow_policy	include/spdlog/async_logger.h	/^enum class async_overflow_policy {$/;"	g	namespace:spdlog
at	include/spdlog/details/circular_q.h	/^    const T &at(size_t i) const {$/;"	f	class:spdlog::details::circular_q	typeref:typename:const T &
automatic	include/spdlog/common.h	/^enum class color_mode { always, automatic, never };$/;"	e	enum:spdlog::color_mode
automatic_registration_	include/spdlog/details/registry.h	/^    bool automatic_registration_ = true;$/;"	m	class:spdlog::details::registry	typeref:typename:bool
azure	include/spdlog/fmt/bundled/color.h	/^  azure = 0xF0FFFF,                    \/\/ rgb(240,255,255)$/;"	e	enum:color
b	include/spdlog/fmt/bundled/color.h	/^  uint8_t b;$/;"	m	struct:rgb	typeref:typename:uint8_t
b_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit b_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::b_formatter
b_formatter	include/spdlog/pattern_formatter-inl.h	/^class b_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
backend_flush_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::backend_flush_() {$/;"	f	class:spdlog::async_logger	typeref:typename:SPDLOG_INLINE void
backend_sink_it_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::backend_sink_it_(const details::log_msg &msg) {$/;"	f	class:spdlog::async_logger	typeref:typename:SPDLOG_INLINE void
background_color	include/spdlog/fmt/bundled/color.h	/^  detail::color_type background_color;$/;"	m	class:text_style	typeref:typename:detail::color_type
backtrace_n_messages_	include/spdlog/details/registry.h	/^    size_t backtrace_n_messages_ = 0;$/;"	m	class:spdlog::details::registry	typeref:typename:size_t
backtracer	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE backtracer::backtracer(backtracer &&other) SPDLOG_NOEXCEPT {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE
backtracer	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE backtracer::backtracer(const backtracer &other) {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE
backtracer	include/spdlog/details/backtracer.h	/^class SPDLOG_API backtracer {$/;"	c	namespace:spdlog::details
base	include/spdlog/fmt/bundled/core.h	/^  using base = basic_format_parse_context<Char>;$/;"	t	class:detail::compile_parse_context	typeref:typename:basic_format_parse_context<Char>
base	include/spdlog/fmt/bundled/core.h	/^  using base = std::back_insert_iterator<Container>;$/;"	t	function:detail::get_container	typeref:typename:std::back_insert_iterator<Container>
base	include/spdlog/fmt/bundled/core.h	/^  using base = std::back_insert_iterator<detail::buffer<char>>;$/;"	t	class:appender	typeref:typename:std::back_insert_iterator<detail::buffer<char>>
base	include/spdlog/fmt/bundled/format.h	/^    using base = formatter<detail::format_as_t<T>, Char>;$/;"	t	function:formatter::format	typeref:typename:formatter<detail::format_as_t<T>,Char>
base	include/spdlog/fmt/bundled/printf.h	/^  using base = arg_formatter<Char>;$/;"	t	class:detail::printf_arg_formatter	typeref:typename:arg_formatter<Char>
base_filename_	include/spdlog/sinks/daily_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:filename_t
base_filename_	include/spdlog/sinks/hourly_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::hourly_file_sink	typeref:typename:filename_t
base_filename_	include/spdlog/sinks/rotating_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:filename_t
base_iterator	include/spdlog/fmt/bundled/format.h	/^constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {$/;"	f	namespace:detail	typeref:typename:Iterator
base_iterator	include/spdlog/fmt/bundled/format.h	/^inline auto base_iterator(std::back_insert_iterator<Container> it,$/;"	f	namespace:detail	typeref:typename:std::back_insert_iterator<Container>
base_sink	include/spdlog/sinks/base_sink-inl.h	/^SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::base_sink($/;"	f	class:spdlog::sinks::base_sink	typeref:typename:SPDLOG_INLINE
base_sink	include/spdlog/sinks/base_sink-inl.h	/^SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::base_sink()$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:SPDLOG_INLINE
base_sink	include/spdlog/sinks/base_sink.h	/^class SPDLOG_API base_sink : public sink {$/;"	c	namespace:spdlog::sinks
basename	include/spdlog/pattern_formatter-inl.h	/^    static const char *basename(const char *filename) {$/;"	f	class:spdlog::details::short_filename_formatter	typeref:typename:const char *
basic_cstring_view	include/spdlog/fmt/bundled/os.h	/^  basic_cstring_view(const Char* s) : data_(s) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	include/spdlog/fmt/bundled/os.h	/^  basic_cstring_view(const std::basic_string<Char>& s) : data_(s.c_str()) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	include/spdlog/fmt/bundled/os.h	/^template <typename Char> class basic_cstring_view {$/;"	c
basic_file_sink	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE basic_file_sink<Mutex>::basic_file_sink(const filename_t &filename,$/;"	f	class:spdlog::sinks::basic_file_sink	typeref:typename:SPDLOG_INLINE
basic_file_sink	include/spdlog/sinks/basic_file_sink.h	/^class basic_file_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
basic_file_sink_mt	include/spdlog/sinks/basic_file_sink.h	/^using basic_file_sink_mt = basic_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:basic_file_sink<std::mutex>
basic_file_sink_st	include/spdlog/sinks/basic_file_sink.h	/^using basic_file_sink_st = basic_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:basic_file_sink<details::null_mutex>
basic_format_arg	include/spdlog/fmt/bundled/core.h	/^  basic_format_arg(const detail::named_arg_info<char_type>* args, size_t size)$/;"	f	class:basic_format_arg
basic_format_arg	include/spdlog/fmt/bundled/core.h	/^  constexpr basic_format_arg() : type_(detail::type::none_type) {}$/;"	f	class:basic_format_arg
basic_format_arg	include/spdlog/fmt/bundled/core.h	/^template <typename Context> class basic_format_arg {$/;"	c
basic_format_args	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE basic_format_args($/;"	f	class:basic_format_args	typeref:typename:FMT_INLINE
basic_format_args	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE basic_format_args(unsigned long long desc,$/;"	f	class:basic_format_args	typeref:typename:FMT_INLINE
basic_format_args	include/spdlog/fmt/bundled/core.h	/^  constexpr basic_format_args() : desc_(0), args_(nullptr) {}$/;"	f	class:basic_format_args
basic_format_args	include/spdlog/fmt/bundled/core.h	/^  constexpr basic_format_args(const format_arg* args, int count)$/;"	f	class:basic_format_args
basic_format_args	include/spdlog/fmt/bundled/core.h	/^  constexpr basic_format_args(unsigned long long desc, const format_arg* args)$/;"	f	class:basic_format_args
basic_format_args	include/spdlog/fmt/bundled/core.h	/^template <typename Context> class basic_format_args {$/;"	c
basic_format_context	include/spdlog/fmt/bundled/core.h	/^  constexpr basic_format_context(OutputIt out, format_args ctx_args,$/;"	f	class:basic_format_context
basic_format_context	include/spdlog/fmt/bundled/core.h	/^template <typename OutputIt, typename Char> class basic_format_context {$/;"	c
basic_format_parse_context	include/spdlog/fmt/bundled/core.h	/^  explicit constexpr basic_format_parse_context($/;"	f	class:basic_format_parse_context
basic_format_parse_context	include/spdlog/fmt/bundled/core.h	/^template <typename Char> class basic_format_parse_context {$/;"	c
basic_format_string	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEVAL FMT_INLINE basic_format_string(const S& s) : str_(s) {$/;"	f	class:basic_format_string	typeref:typename:FMT_CONSTEVAL FMT_INLINE
basic_format_string	include/spdlog/fmt/bundled/core.h	/^  basic_format_string(runtime_format_string<Char> fmt) : str_(fmt.str) {}$/;"	f	class:basic_format_string
basic_format_string	include/spdlog/fmt/bundled/core.h	/^template <typename Char, typename... Args> class basic_format_string {$/;"	c
basic_fp	include/spdlog/fmt/bundled/format.h	/^  constexpr basic_fp() : f(0), e(0) {}$/;"	f	struct:detail::basic_fp
basic_fp	include/spdlog/fmt/bundled/format.h	/^  constexpr basic_fp(uint64_t f_val, int e_val) : f(f_val), e(e_val) {}$/;"	f	struct:detail::basic_fp
basic_fp	include/spdlog/fmt/bundled/format.h	/^  template <typename Float> FMT_CONSTEXPR basic_fp(Float n) { assign(n); }$/;"	f	struct:detail::basic_fp	typeref:typename:FMT_CONSTEXPR
basic_fp	include/spdlog/fmt/bundled/format.h	/^template <typename F> struct basic_fp {$/;"	s	namespace:detail
basic_logger_mt	include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_logger_st	include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 basic_memory_buffer(basic_memory_buffer&& other) noexcept {$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 explicit basic_memory_buffer($/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^class basic_memory_buffer final : public detail::buffer<T> {$/;"	c
basic_ostream_formatter	include/spdlog/fmt/bundled/ostream.h	/^struct basic_ostream_formatter : formatter<basic_string_view<Char>, Char> {$/;"	s
basic_printf_context	include/spdlog/fmt/bundled/printf.h	/^  basic_printf_context(detail::buffer_appender<Char> out,$/;"	f	class:basic_printf_context
basic_printf_context	include/spdlog/fmt/bundled/printf.h	/^template <typename Char> class basic_printf_context {$/;"	c
basic_string_view	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view($/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view(S s) noexcept$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	include/spdlog/fmt/bundled/core.h	/^  basic_string_view(const Char* s)$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE
basic_string_view	include/spdlog/fmt/bundled/core.h	/^  constexpr basic_string_view() noexcept : data_(nullptr), size_(0) {}$/;"	f	class:basic_string_view
basic_string_view	include/spdlog/fmt/bundled/core.h	/^  constexpr basic_string_view(const Char* s, size_t count) noexcept$/;"	f	class:basic_string_view
basic_string_view	include/spdlog/fmt/bundled/core.h	/^template <typename Char> class basic_string_view {$/;"	c
before_close	include/spdlog/common.h	/^    std::function<void(const filename_t &filename, std::FILE *file_stream)> before_close;$/;"	m	struct:spdlog::file_event_handlers	typeref:typename:std::function<void (const filename_t & filename,std::FILE * file_stream)>
before_open	include/spdlog/common.h	/^    std::function<void(const filename_t &filename)> before_open;$/;"	m	struct:spdlog::file_event_handlers	typeref:typename:std::function<void (const filename_t & filename)>
begin	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto begin() const noexcept -> const Char* { return buffer; }$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR auto
begin	include/spdlog/fmt/bundled/core.h	/^    const Char*& begin;$/;"	m	struct:detail::parse_format_specs::__anon0accc0920f08	typeref:typename:const Char * &
begin	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE auto begin() const noexcept -> const T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_INLINE auto
begin	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE auto begin() noexcept -> T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_INLINE auto
begin	include/spdlog/fmt/bundled/core.h	/^  constexpr auto begin() const noexcept -> iterator { return data_; }$/;"	f	class:basic_string_view	typeref:typename:auto
begin	include/spdlog/fmt/bundled/core.h	/^  constexpr auto begin() const noexcept -> iterator {$/;"	f	class:basic_format_parse_context	typeref:typename:auto
begin	include/spdlog/fmt/bundled/format.h	/^  It begin;$/;"	m	struct:join_view	typeref:typename:It
begin	include/spdlog/fmt/bundled/format.h	/^  Iterator begin;$/;"	m	struct:detail::format_decimal_result	typeref:typename:Iterator
begin	include/spdlog/fmt/bundled/format.h	/^  const Char* begin;$/;"	m	struct:detail::find_escape_result	typeref:typename:const Char *
begin	include/spdlog/fmt/bundled/ranges.h	/^  auto begin() const -> typename Container::const_iterator { return c.begin(); }$/;"	f	struct:detail::all	typeref:typename:Container::const_iterator
begin_	include/spdlog/fmt/bin_to_hex.h	/^    It begin_, end_;$/;"	m	class:spdlog::details::dump_info	typeref:typename:It
beige	include/spdlog/fmt/bundled/color.h	/^  beige = 0xF5F5DC,                    \/\/ rgb(245,245,220)$/;"	e	enum:color
bg	include/spdlog/fmt/bundled/color.h	/^FMT_CONSTEXPR inline auto bg(detail::color_type background) noexcept$/;"	f	typeref:typename:FMT_CONSTEXPR auto
big_decimal_fp	include/spdlog/fmt/bundled/format.h	/^struct big_decimal_fp {$/;"	s	namespace:detail
big_divisor	include/spdlog/fmt/bundled/format.h	/^  static const int big_divisor = 1000;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
big_divisor	include/spdlog/fmt/bundled/format.h	/^  static const int big_divisor = 100;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
bigint	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 bigint() : exp_(0) {}$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20
bigint	include/spdlog/fmt/bundled/format.h	/^  explicit bigint(uint64_t n) { assign(n); }$/;"	f	class:detail::bigint
bigint	include/spdlog/fmt/bundled/format.h	/^class bigint {$/;"	c	namespace:detail
bigit	include/spdlog/fmt/bundled/format.h	/^  using bigit = uint32_t;$/;"	t	class:detail::bigint	typeref:typename:uint32_t
bigit_bits	include/spdlog/fmt/bundled/format.h	/^  static constexpr const int bigit_bits = num_bits<bigit>();$/;"	m	class:detail::bigint	typeref:typename:const int
bigits_	include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer<bigit, bigits_capacity> bigits_;$/;"	m	class:detail::bigint	typeref:typename:basic_memory_buffer<bigit,bigits_capacity>
bigits_capacity	include/spdlog/fmt/bundled/format.h	/^  enum { bigits_capacity = 32 };$/;"	e	enum:detail::bigint::__anonb671a0721603
bin_lower	include/spdlog/fmt/bundled/core.h	/^  bin_lower,       \/\/ 'b'$/;"	e	enum:presentation_type
bin_upper	include/spdlog/fmt/bundled/core.h	/^  bin_upper,       \/\/ 'B'$/;"	e	enum:presentation_type
binary32	include/spdlog/fmt/bundled/format.h	/^  bool binary32 : 1;$/;"	m	struct:detail::float_specs	typeref:typename:bool:1
bisque	include/spdlog/fmt/bundled/color.h	/^  bisque = 0xFFE4C4,                   \/\/ rgb(255,228,196)$/;"	e	enum:color
bit_cast	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto bit_cast(const From& from) -> To {$/;"	f	namespace:detail	typeref:typename:To
bit_cast	include/spdlog/fmt/bundled/format.h	/^inline auto bit_cast(const From& from) -> To {$/;"	f	namespace:detail	typeref:typename:To
black	include/spdlog/fmt/bundled/color.h	/^  black = 0x000000,                    \/\/ rgb(0,0,0)$/;"	e	enum:color
black	include/spdlog/fmt/bundled/color.h	/^  black = 30,$/;"	e	enum:terminal_color
black	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t black = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
blanched_almond	include/spdlog/fmt/bundled/color.h	/^  blanched_almond = 0xFFEBCD,          \/\/ rgb(255,235,205)$/;"	e	enum:color
blink	include/spdlog/fmt/bundled/color.h	/^  blink = 1 << 4,$/;"	e	enum:emphasis
blink	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t blink = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
block	include/spdlog/async_logger.h	/^    block,           \/\/ Block until message can be enqueued$/;"	e	enum:spdlog::async_overflow_policy
blue	include/spdlog/fmt/bundled/color.h	/^  blue = 0x0000FF,                     \/\/ rgb(0,0,255)$/;"	e	enum:color
blue	include/spdlog/fmt/bundled/color.h	/^  blue,$/;"	e	enum:terminal_color
blue	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t blue = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
blue_violet	include/spdlog/fmt/bundled/color.h	/^  blue_violet = 0x8A2BE2,              \/\/ rgb(138,43,226)$/;"	e	enum:color
bold	include/spdlog/fmt/bundled/color.h	/^  bold = 1,$/;"	e	enum:emphasis
bold	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t bold = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
bold_on_red	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t bold_on_red = "\\033[1m\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
bool_constant	include/spdlog/fmt/bundled/core.h	/^template <bool B> using bool_constant = std::integral_constant<bool, B>;$/;"	t	typeref:typename:std::integral_constant<bool,B>
bool_set	include/spdlog/fmt/bundled/core.h	/^  bool_set = set(type::bool_type),$/;"	e	enum:detail::__anon0accc0920103
bool_type	include/spdlog/fmt/bundled/core.h	/^  bool_type,$/;"	e	enum:detail::type
bool_value	include/spdlog/fmt/bundled/core.h	/^    bool bool_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:bool
bright_black	include/spdlog/fmt/bundled/color.h	/^  bright_black = 90,$/;"	e	enum:terminal_color
bright_blue	include/spdlog/fmt/bundled/color.h	/^  bright_blue,$/;"	e	enum:terminal_color
bright_cyan	include/spdlog/fmt/bundled/color.h	/^  bright_cyan,$/;"	e	enum:terminal_color
bright_green	include/spdlog/fmt/bundled/color.h	/^  bright_green,$/;"	e	enum:terminal_color
bright_magenta	include/spdlog/fmt/bundled/color.h	/^  bright_magenta,$/;"	e	enum:terminal_color
bright_red	include/spdlog/fmt/bundled/color.h	/^  bright_red,$/;"	e	enum:terminal_color
bright_white	include/spdlog/fmt/bundled/color.h	/^  bright_white$/;"	e	enum:terminal_color
bright_yellow	include/spdlog/fmt/bundled/color.h	/^  bright_yellow,$/;"	e	enum:terminal_color
brown	include/spdlog/fmt/bundled/color.h	/^  brown = 0xA52A2A,                    \/\/ rgb(165,42,42)$/;"	e	enum:color
bs	include/spdlog/fmt/bundled/std.h	/^    const std::bitset<N>& bs;$/;"	m	struct:formatter::writer	typeref:typename:const std::bitset<N> &
buf	include/spdlog/fmt/bundled/chrono.h	/^  CodeUnit buf[max_size];$/;"	m	struct:detail::codecvt_result	typeref:typename:CodeUnit[]
buffer	include/spdlog/details/log_msg_buffer.h	/^    memory_buf_t buffer;$/;"	m	class:spdlog::details::log_msg_buffer	typeref:typename:memory_buf_t
buffer	include/spdlog/fmt/bundled/color.h	/^  Char buffer[7u + 3u * num_emphases + 1u];$/;"	m	struct:detail::ansi_color_escape	typeref:typename:Char[]
buffer	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR buffer(size_t sz) noexcept : size_(sz), capacity_(sz) {}$/;"	f	class:detail::buffer
buffer	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 buffer(T* p = nullptr, size_t sz = 0, size_t cap = 0) noexcept$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR20
buffer	include/spdlog/fmt/bundled/core.h	/^template <typename T> class buffer {$/;"	c	namespace:detail
buffer_	include/spdlog/fmt/bundled/format.h	/^  Buffer buffer_;$/;"	m	class:detail::to_utf8	typeref:typename:Buffer
buffer_	include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer<wchar_t> buffer_;$/;"	m	class:detail::utf8_to_utf16	typeref:typename:basic_memory_buffer<wchar_t>
buffer_	include/spdlog/fmt/bundled/format.h	/^  mutable char buffer_[buffer_size];$/;"	m	class:format_int	typeref:typename:char[]
buffer_	include/spdlog/fmt/bundled/ostream.h	/^  buffer<char_type>& buffer_;$/;"	m	class:detail::formatbuf	typeref:typename:buffer<char_type> &
buffer_	include/spdlog/sinks/win_eventlog_sink.h	/^    std::vector<char> buffer_;$/;"	m	struct:spdlog::sinks::win_eventlog::internal::sid_t	typeref:typename:std::vector<char>
buffer_appender	include/spdlog/fmt/bundled/core.h	/^using buffer_appender = conditional_t<std::is_same<T, char>::value, appender,$/;"	t	namespace:detail	typeref:typename:conditional_t<std::is_same<T,char>::value,appender,std::back_insert_iterator<buffer<T>>>
buffer_context	include/spdlog/fmt/bundled/core.h	/^using buffer_context =$/;"	t	typeref:typename:basic_format_context<detail::buffer_appender<Char>,Char>
buffer_size	include/spdlog/fmt/bundled/core.h	/^  enum { buffer_size = 256 };$/;"	e	enum:detail::counting_buffer::__anon0accc0920403
buffer_size	include/spdlog/fmt/bundled/core.h	/^  enum { buffer_size = 256 };$/;"	e	enum:detail::iterator_buffer::__anon0accc0920203
buffer_size	include/spdlog/fmt/bundled/core.h	/^  enum { buffer_size = 256 };$/;"	e	enum:detail::iterator_buffer::__anon0accc0920303
buffer_size	include/spdlog/fmt/bundled/format.h	/^  enum { buffer_size = std::numeric_limits<unsigned long long>::digits10 + 3 };$/;"	e	enum:format_int::__anonb671a0721b03
buffer_size	include/spdlog/fmt/bundled/os.h	/^  size_t buffer_size = BUFSIZ > 32768 ? BUFSIZ : 32768;$/;"	m	struct:detail::ostream_params	typeref:typename:size_t
buffer_size	include/spdlog/fmt/bundled/os.h	/^constexpr detail::buffer_size buffer_size{};$/;"	v	typeref:typename:detail::buffer_size
buffer_size	include/spdlog/fmt/bundled/os.h	/^struct buffer_size {$/;"	s	namespace:detail
buffer_traits	include/spdlog/fmt/bundled/core.h	/^  explicit buffer_traits(size_t) {}$/;"	f	struct:detail::buffer_traits
buffer_traits	include/spdlog/fmt/bundled/core.h	/^struct buffer_traits {$/;"	s	namespace:detail
buffered_file	include/spdlog/fmt/bundled/os.h	/^  buffered_file() noexcept : file_(nullptr) {}$/;"	f	class:buffered_file
buffered_file	include/spdlog/fmt/bundled/os.h	/^  buffered_file(buffered_file&& other) noexcept : file_(other.file_) {$/;"	f	class:buffered_file
buffered_file	include/spdlog/fmt/bundled/os.h	/^  explicit buffered_file(FILE* f) : file_(f) {}$/;"	f	class:buffered_file
buffered_file	include/spdlog/fmt/bundled/os.h	/^class buffered_file {$/;"	c
burly_wood	include/spdlog/fmt/bundled/color.h	/^  burly_wood = 0xDEB887,               \/\/ rgb(222,184,135)$/;"	e	enum:color
bytes	include/spdlog/fmt/bundled/format.h	/^  explicit bytes(string_view data) : data_(data) {}$/;"	f	class:bytes
bytes	include/spdlog/fmt/bundled/format.h	/^class bytes {$/;"	c
c	include/spdlog/fmt/bundled/ranges.h	/^  const Container& c;$/;"	m	struct:detail::all	typeref:typename:const Container &
c_encoding	include/spdlog/fmt/bundled/chrono.h	/^  constexpr auto c_encoding() const noexcept -> unsigned { return value; }$/;"	f	class:weekday	typeref:typename:auto
c_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit c_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::c_formatter
c_formatter	include/spdlog/pattern_formatter-inl.h	/^class c_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
c_str	include/spdlog/fmt/bundled/format.h	/^  auto c_str() const -> const char* { return &buffer_[0]; }$/;"	f	class:detail::to_utf8	typeref:typename:const char *
c_str	include/spdlog/fmt/bundled/format.h	/^  auto c_str() const -> const char* {$/;"	f	class:format_int	typeref:typename:const char *
c_str	include/spdlog/fmt/bundled/format.h	/^  auto c_str() const -> const wchar_t* { return &buffer_[0]; }$/;"	f	class:detail::utf8_to_utf16	typeref:typename:const wchar_t *
c_str	include/spdlog/fmt/bundled/os.h	/^  auto c_str() const -> const Char* { return data_; }$/;"	f	class:basic_cstring_view	typeref:typename:const Char *
cache_accessor	include/spdlog/fmt/bundled/format-inl.h	/^template <> struct cache_accessor<double> {$/;"	s	namespace:detail::dragonbox
cache_accessor	include/spdlog/fmt/bundled/format-inl.h	/^template <> struct cache_accessor<float> {$/;"	s	namespace:detail::dragonbox
cache_entry_type	include/spdlog/fmt/bundled/format-inl.h	/^  using cache_entry_type = typename cache_accessor<T>::cache_entry_type;$/;"	t	function:detail::dragonbox::shorter_interval_case	typeref:typename:cache_accessor<T>::cache_entry_type
cache_entry_type	include/spdlog/fmt/bundled/format-inl.h	/^  using cache_entry_type = typename cache_accessor<T>::cache_entry_type;$/;"	t	function:detail::dragonbox::to_decimal	typeref:typename:cache_accessor<T>::cache_entry_type
cache_entry_type	include/spdlog/fmt/bundled/format-inl.h	/^  using cache_entry_type = uint128_fallback;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:uint128_fallback
cache_entry_type	include/spdlog/fmt/bundled/format-inl.h	/^  using cache_entry_type = uint64_t;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:uint64_t
cache_timestamp_	include/spdlog/pattern_formatter-inl.h	/^    std::chrono::seconds cache_timestamp_{0};$/;"	m	class:spdlog::details::full_formatter	typeref:typename:std::chrono::seconds
cached_datetime_	include/spdlog/pattern_formatter-inl.h	/^    memory_buf_t cached_datetime_;$/;"	m	class:spdlog::details::full_formatter	typeref:typename:memory_buf_t
cached_tm_	include/spdlog/pattern_formatter.h	/^    std::tm cached_tm_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::tm
cadet_blue	include/spdlog/fmt/bundled/color.h	/^  cadet_blue = 0x5F9EA0,               \/\/ rgb(95,158,160)$/;"	e	enum:color
calc_filename	include/spdlog/sinks/daily_file_sink.h	/^    static filename_t calc_filename(const filename_t &file_path, const tm &now_tm) {$/;"	f	struct:spdlog::sinks::daily_filename_format_calculator	typeref:typename:filename_t
calc_filename	include/spdlog/sinks/daily_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, const tm &now_tm) {$/;"	f	struct:spdlog::sinks::daily_filename_calculator	typeref:typename:filename_t
calc_filename	include/spdlog/sinks/hourly_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, const tm &now_tm) {$/;"	f	struct:spdlog::sinks::hourly_filename_calculator	typeref:typename:filename_t
calc_filename	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE filename_t rotating_file_sink<Mutex>::calc_filename(const filename_t &filename,$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:SPDLOG_INLINE filename_t
callback_	include/spdlog/sinks/callback_sink.h	/^    custom_log_callback callback_;$/;"	m	class:spdlog::sinks::callback_sink	typeref:typename:custom_log_callback
callback_logger_mt	include/spdlog/sinks/callback_sink.h	/^inline std::shared_ptr<logger> callback_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
callback_logger_st	include/spdlog/sinks/callback_sink.h	/^inline std::shared_ptr<logger> callback_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
callback_sink	include/spdlog/sinks/callback_sink.h	/^    explicit callback_sink(const custom_log_callback &callback)$/;"	f	class:spdlog::sinks::callback_sink
callback_sink	include/spdlog/sinks/callback_sink.h	/^class callback_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
callback_sink_mt	include/spdlog/sinks/callback_sink.h	/^using callback_sink_mt = callback_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:callback_sink<std::mutex>
callback_sink_st	include/spdlog/sinks/callback_sink.h	/^using callback_sink_st = callback_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:callback_sink<details::null_mutex>
can_control	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::can_control() {$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
can_go_next	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::can_go_next() {$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
can_go_previous	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::can_go_previous() {$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
can_pause	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::can_pause() {$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
can_play	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::can_play() { return property_func_return_bool(CanPlay); }$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
can_seek	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::can_seek() { return property_func_return_bool(CanSeek); }$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
capacity	include/spdlog/fmt/bundled/core.h	/^  constexpr auto capacity() const noexcept -> size_t { return capacity_; }$/;"	f	class:detail::buffer	typeref:typename:auto
capacity_	include/spdlog/fmt/bundled/core.h	/^  size_t capacity_;$/;"	m	class:detail::buffer	typeref:typename:size_t
carrier_uint	include/spdlog/fmt/bundled/format-inl.h	/^  using carrier_uint = float_info<double>::carrier_uint;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:float_info<double>::carrier_uint
carrier_uint	include/spdlog/fmt/bundled/format-inl.h	/^  using carrier_uint = float_info<float>::carrier_uint;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:float_info<float>::carrier_uint
carrier_uint	include/spdlog/fmt/bundled/format-inl.h	/^  using carrier_uint = typename float_info<T>::carrier_uint;$/;"	t	function:detail::dragonbox::to_decimal	typeref:typename:float_info<T>::carrier_uint
carrier_uint	include/spdlog/fmt/bundled/format.h	/^    using carrier_uint = typename dragonbox::float_info<Float>::carrier_uint;$/;"	t	function:detail::basic_fp::assign	typeref:typename:dragonbox::float_info<Float>::carrier_uint
carrier_uint	include/spdlog/fmt/bundled/format.h	/^  using carrier_uint = detail::uint128_t;$/;"	t	struct:detail::dragonbox::float_info	typeref:typename:detail::uint128_t
carrier_uint	include/spdlog/fmt/bundled/format.h	/^  using carrier_uint = typename info::carrier_uint;$/;"	t	function:detail::format_hexfloat	typeref:typename:info::carrier_uint
carrier_uint	include/spdlog/fmt/bundled/format.h	/^  using carrier_uint = uint32_t;$/;"	t	struct:detail::dragonbox::float_info	typeref:typename:uint32_t
carrier_uint	include/spdlog/fmt/bundled/format.h	/^  using carrier_uint = uint64_t;$/;"	t	struct:detail::dragonbox::float_info	typeref:typename:uint64_t
center	include/spdlog/pattern_formatter.h	/^    enum class pad_side { left, right, center };$/;"	e	enum:spdlog::details::padding_info::pad_side
cfg	include/spdlog/cfg/argv.h	/^namespace cfg {$/;"	n	namespace:spdlog
cfg	include/spdlog/cfg/env.h	/^namespace cfg {$/;"	n	namespace:spdlog
cfg	include/spdlog/cfg/helpers-inl.h	/^namespace cfg {$/;"	n	namespace:spdlog
cfg	include/spdlog/cfg/helpers.h	/^namespace cfg {$/;"	n	namespace:spdlog
ch_	include/spdlog/pattern_formatter-inl.h	/^    char ch_;$/;"	m	class:spdlog::details::ch_formatter	typeref:typename:char
ch_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit ch_formatter(char ch)$/;"	f	class:spdlog::details::ch_formatter
ch_formatter	include/spdlog/pattern_formatter-inl.h	/^class ch_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
char8_type	include/spdlog/fmt/bundled/format.h	/^enum char8_type : unsigned char {};$/;"	g	namespace:detail	typeref:typename:unsigned char
char8_type	include/spdlog/fmt/bundled/format.h	/^using char8_type = char8_t;$/;"	t	namespace:detail	typeref:typename:char8_t
char_converter	include/spdlog/fmt/bundled/printf.h	/^  explicit char_converter(basic_format_arg<Context>& arg) : arg_(arg) {}$/;"	f	class:detail::char_converter
char_converter	include/spdlog/fmt/bundled/printf.h	/^template <typename Context> class char_converter {$/;"	c	namespace:detail
char_set	include/spdlog/fmt/bundled/core.h	/^  char_set = set(type::char_type),$/;"	e	enum:detail::__anon0accc0920103
char_t	include/spdlog/fmt/bundled/compile.h	/^  using char_t = remove_cvref_t<decltype(Str.data[0])>;$/;"	t	function:literals::operator ""_cf
char_t	include/spdlog/fmt/bundled/core.h	/^  using char_t = typename S::char_type;$/;"	t	function:detail::check_format_string	typeref:typename:S::char_type
char_t	include/spdlog/fmt/bundled/core.h	/^template <typename S> using char_t = typename detail::char_t_impl<S>::type;$/;"	t	typeref:typename:detail::char_t_impl<S>::type
char_t	include/spdlog/fmt/bundled/format.h	/^  using char_t = remove_cvref_t<decltype(Str.data[0])>;$/;"	t	function:literals::operator ""_a
char_t_impl	include/spdlog/fmt/bundled/core.h	/^template <typename S, typename = void> struct char_t_impl {};$/;"	s	namespace:detail
char_t_impl	include/spdlog/fmt/bundled/core.h	/^template <typename S> struct char_t_impl<S, enable_if_t<is_string<S>::value>> {$/;"	s	namespace:detail
char_type	include/spdlog/fmt/bundled/args.h	/^  using char_type = typename Context::char_type;$/;"	t	class:dynamic_format_arg_store	typeref:typename:Context::char_type
char_type	include/spdlog/fmt/bundled/chrono.h	/^  using char_type = typename FormatContext::char_type;$/;"	t	struct:detail::chrono_formatter	typeref:typename:FormatContext::char_type
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::code_unit	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::field	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::runtime_named_field	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::spec_field	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::text	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::udl_compiled_string	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = typename L::char_type;$/;"	t	struct:detail::concat	typeref:typename:L::char_type
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = typename S::char_type;$/;"	t	function:detail::compile_format_string	typeref:typename:S::char_type
char_type	include/spdlog/fmt/bundled/compile.h	/^  using char_type = typename S::char_type;$/;"	t	function:detail::parse_replacement_field_then_tail	typeref:typename:S::char_type
char_type	include/spdlog/fmt/bundled/core.h	/^  char_type,$/;"	e	enum:detail::type
char_type	include/spdlog/fmt/bundled/core.h	/^  using char_type = Char;$/;"	t	class:basic_format_context	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/core.h	/^  using char_type = Char;$/;"	t	class:basic_format_parse_context	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/core.h	/^  using char_type = typename Context::char_type;$/;"	t	class:basic_format_arg	typeref:typename:Context::char_type
char_type	include/spdlog/fmt/bundled/core.h	/^  using char_type = typename Context::char_type;$/;"	t	class:detail::value	typeref:typename:Context::char_type
char_type	include/spdlog/fmt/bundled/core.h	/^  using char_type = typename Context::char_type;$/;"	t	struct:detail::arg_mapper	typeref:typename:Context::char_type
char_type	include/spdlog/fmt/bundled/core.h	/^  using char_type = typename ParseContext::char_type;$/;"	t	function:detail::parse_format_specs	typeref:typename:ParseContext::char_type
char_type	include/spdlog/fmt/bundled/ostream.h	/^  using char_type = typename Streambuf::char_type;$/;"	t	class:detail::formatbuf	typeref:typename:Streambuf::char_type
char_type	include/spdlog/fmt/bundled/printf.h	/^  using char_type = Char;$/;"	t	class:basic_printf_context	typeref:typename:Char
char_type	include/spdlog/fmt/bundled/printf.h	/^  using char_type = typename Context::char_type;$/;"	t	class:detail::arg_converter	typeref:typename:Context::char_type
char_type	include/spdlog/fmt/bundled/ranges.h	/^  using char_type = typename FormatContext::char_type;$/;"	t	struct:detail::format_tuple_element	typeref:typename:FormatContext::char_type
char_value	include/spdlog/fmt/bundled/core.h	/^    char_type char_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:char_type
chartreuse	include/spdlog/fmt/bundled/color.h	/^  chartreuse = 0x7FFF00,               \/\/ rgb(127,255,0)$/;"	e	enum:color
check_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void check_arg_id(basic_string_view<Char>) {}$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
check_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void check_arg_id(int id) {$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
check_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void check_arg_id(int id) {$/;"	f	class:detail::compile_parse_context	typeref:typename:FMT_CONSTEXPR void
check_char_specs	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto check_char_specs(const format_specs<Char>& specs) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
check_debugger_present_	include/spdlog/sinks/msvc_sink.h	/^    bool check_debugger_present_ = true;$/;"	m	class:spdlog::sinks::msvc_sink	typeref:typename:bool
check_divisibility_and_divide_by_pow10	include/spdlog/fmt/bundled/format-inl.h	/^auto check_divisibility_and_divide_by_pow10(uint32_t& n) noexcept -> bool {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
check_dynamic_spec	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void check_dynamic_spec(int arg_id) {$/;"	f	class:detail::compile_parse_context	typeref:typename:FMT_CONSTEXPR void
check_dynamic_spec	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR void basic_format_parse_context<Char>::check_dynamic_spec($/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
check_format_string	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE void check_format_string(const S&) {$/;"	f	namespace:detail	typeref:typename:FMT_INLINE void
check_format_string	include/spdlog/fmt/bundled/core.h	/^void check_format_string(S format_str) {$/;"	f	namespace:detail	typeref:typename:void
checker	include/spdlog/fmt/bundled/core.h	/^      using checker =$/;"	t	function:basic_format_string::basic_format_string	typeref:typename:detail::format_string_checker<Char,remove_cvref_t<Args>...>
checker	include/spdlog/fmt/bundled/core.h	/^  using checker = format_string_checker<char_t, remove_cvref_t<Args>...>;$/;"	t	function:detail::check_format_string	typeref:typename:format_string_checker<char_t,remove_cvref_t<Args>...>
chocolate	include/spdlog/fmt/bundled/color.h	/^  chocolate = 0xD2691E,                \/\/ rgb(210,105,30)$/;"	e	enum:color
chr	include/spdlog/fmt/bundled/core.h	/^  chr,             \/\/ 'c'$/;"	e	enum:presentation_type
chrono_format_checker	include/spdlog/fmt/bundled/chrono.h	/^struct chrono_format_checker : null_chrono_spec_handler<chrono_format_checker> {$/;"	s	namespace:detail
chrono_formatter	include/spdlog/fmt/bundled/chrono.h	/^      using chrono_formatter =$/;"	t	function:formatter::format
chrono_formatter	include/spdlog/fmt/bundled/chrono.h	/^  chrono_formatter(FormatContext& ctx, OutputIt o,$/;"	f	struct:detail::chrono_formatter
chrono_formatter	include/spdlog/fmt/bundled/chrono.h	/^struct chrono_formatter {$/;"	s	namespace:detail
circular_q	include/spdlog/details/circular_q.h	/^    circular_q(circular_q &&other) SPDLOG_NOEXCEPT { copy_moveable(std::move(other)); }$/;"	f	class:spdlog::details::circular_q
circular_q	include/spdlog/details/circular_q.h	/^    explicit circular_q(size_t max_items)$/;"	f	class:spdlog::details::circular_q
circular_q	include/spdlog/details/circular_q.h	/^class circular_q {$/;"	c	namespace:spdlog::details
clean	build/Makefile	/^clean:$/;"	t
clean/fast	build/Makefile	/^clean\/fast: clean$/;"	t
cleanup_	include/spdlog/details/udp_client-windows.h	/^    void cleanup_() {$/;"	f	class:spdlog::details::udp_client	typeref:typename:void
cleanup_	include/spdlog/details/udp_client.h	/^    void cleanup_() {$/;"	f	class:spdlog::details::udp_client	typeref:typename:void
clear	include/spdlog/fmt/bundled/args.h	/^  void clear() {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
clear	include/spdlog/fmt/bundled/core.h	/^  void clear() { size_ = 0; }$/;"	f	class:detail::buffer	typeref:typename:void
clear	include/spdlog/mdc.h	/^    static void clear() { get_context().clear(); }$/;"	f	class:spdlog::mdc	typeref:typename:void
clear_line	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t clear_line = "\\033[K";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
client_	include/spdlog/sinks/mongo_sink.h	/^    std::unique_ptr<mongocxx::client> client_ = nullptr;$/;"	m	class:spdlog::sinks::mongo_sink	typeref:typename:std::unique_ptr<mongocxx::client>
client_	include/spdlog/sinks/tcp_sink.h	/^    details::tcp_client client_;$/;"	m	class:spdlog::sinks::tcp_sink	typeref:typename:details::tcp_client
client_	include/spdlog/sinks/udp_sink.h	/^    details::udp_client client_;$/;"	m	class:spdlog::sinks::udp_sink	typeref:typename:details::udp_client
clock	include/spdlog/stopwatch.h	/^    using clock = std::chrono::steady_clock;$/;"	t	class:spdlog::stopwatch	typeref:typename:std::chrono::steady_clock
clone	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE std::shared_ptr<spdlog::logger> spdlog::async_logger::clone(std::string new_name) /;"	f	class:spdlog::async_logger	typeref:typename:SPDLOG_INLINE std::shared_ptr<spdlog::logger>
clone	include/spdlog/logger-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> logger::clone(std::string logger_name) {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
clone	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE std::unique_ptr<formatter> pattern_formatter::clone() const {$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE std::unique_ptr<formatter>
close	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::close() {$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE void
close	include/spdlog/details/tcp_client-windows.h	/^    void close() {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
close	include/spdlog/details/tcp_client.h	/^    void close() {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
close	include/spdlog/fmt/bundled/os.h	/^  void close() { buffer_.close(); }$/;"	f	class:ostream	typeref:typename:void
close	include/spdlog/fmt/bundled/os.h	/^  void close() {$/;"	f	class:detail::file_buffer	typeref:typename:void
clz	include/spdlog/fmt/bundled/format.h	/^inline auto clz(uint32_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
clzll	include/spdlog/fmt/bundled/format.h	/^inline auto clzll(uint64_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
cmake_check_build_system	build/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	build/Makefile	/^cmake_force:$/;"	t
code_point_index	include/spdlog/fmt/bundled/format.h	/^inline auto code_point_index(basic_string_view<Char> s, size_t n) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
code_point_index	include/spdlog/fmt/bundled/format.h	/^inline auto code_point_index(basic_string_view<char8_type> s, size_t n)$/;"	f	namespace:detail	typeref:typename:size_t
code_point_index	include/spdlog/fmt/bundled/format.h	/^inline auto code_point_index(string_view s, size_t n) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
code_point_length	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto code_point_length(const Char* begin) -> int {$/;"	f	namespace:detail	typeref:typename:int
code_unit	include/spdlog/fmt/bundled/chrono.h	/^    using code_unit = wchar_t;$/;"	t	function:detail::write_encoded_tm_str	typeref:typename:wchar_t
code_unit	include/spdlog/fmt/bundled/compile.h	/^template <typename Char> struct code_unit {$/;"	s	namespace:detail
codecvt_result	include/spdlog/fmt/bundled/chrono.h	/^template <typename CodeUnit> struct codecvt_result {$/;"	s	namespace:detail
coll_name_	include/spdlog/sinks/mongo_sink.h	/^    std::string coll_name_;$/;"	m	class:spdlog::sinks::mongo_sink	typeref:typename:std::string
color	include/spdlog/fmt/bundled/color.h	/^enum class color : uint32_t {$/;"	g	typeref:typename:uint32_t
color_mode	include/spdlog/common.h	/^enum class color_mode { always, automatic, never };$/;"	g	namespace:spdlog
color_range_end	include/spdlog/details/log_msg.h	/^    mutable size_t color_range_end{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
color_range_end	include/spdlog/sinks/qt_sinks.h	/^        int color_range_end;$/;"	m	struct:spdlog::sinks::qt_color_sink::invoke_params	typeref:typename:int
color_range_start	include/spdlog/details/log_msg.h	/^    mutable size_t color_range_start{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
color_range_start	include/spdlog/sinks/qt_sinks.h	/^        int color_range_start;$/;"	m	struct:spdlog::sinks::qt_color_sink::invoke_params	typeref:typename:int
color_start_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit color_start_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::color_start_formatter
color_start_formatter	include/spdlog/pattern_formatter-inl.h	/^class color_start_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
color_stop_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit color_stop_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::color_stop_formatter
color_stop_formatter	include/spdlog/pattern_formatter-inl.h	/^class color_stop_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
color_type	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type() noexcept : is_rgb(), value{} {}$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type(color rgb_color) noexcept : is_rgb(true), value{} {$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type(rgb rgb_color) noexcept : is_rgb(true), value{} {$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR color_type(terminal_color term_color) noexcept$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	include/spdlog/fmt/bundled/color.h	/^struct color_type {$/;"	s	namespace:detail
color_union	include/spdlog/fmt/bundled/color.h	/^  union color_union {$/;"	u	struct:detail::color_type
colors_	include/spdlog/sinks/ansicolor_sink.h	/^    std::array<std::string, level::n_levels> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:std::array<std::string,level::n_levels>
colors_	include/spdlog/sinks/qt_sinks.h	/^    std::array<QTextCharFormat, level::n_levels> colors_;$/;"	m	class:spdlog::sinks::qt_color_sink	typeref:typename:std::array<QTextCharFormat,level::n_levels>
colors_	include/spdlog/sinks/wincolor_sink.h	/^    std::array<std::uint16_t, level::n_levels> colors_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:std::array<std::uint16_t,level::n_levels>
common_t	include/spdlog/fmt/bundled/chrono.h	/^    using common_t = typename std::common_type<IntermediateRep, intmax_t>::type;$/;"	t	function:safe_duration_cast::safe_duration_cast	typeref:typename:std::common_type<IntermediateRep,intmax_t>::type
compare	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR_CHAR_TRAITS auto compare(basic_string_view other) const -> int {$/;"	f	class:basic_string_view	typeref:typename:int
compare	include/spdlog/fmt/bundled/format.h	/^  friend FMT_CONSTEXPR20 auto compare(const bigint& lhs, const bigint& rhs)$/;"	f	namespace:detail	typeref:typename:int
compile	include/spdlog/fmt/bundled/compile.h	/^constexpr auto compile(S format_str) {$/;"	f	namespace:detail	typeref:typename:auto
compile_format_string	include/spdlog/fmt/bundled/compile.h	/^constexpr auto compile_format_string(S format_str) {$/;"	f	namespace:detail	typeref:typename:auto
compile_parse_context	include/spdlog/fmt/bundled/core.h	/^  explicit FMT_CONSTEXPR compile_parse_context($/;"	f	class:detail::compile_parse_context	typeref:typename:FMT_CONSTEXPR
compile_parse_context	include/spdlog/fmt/bundled/core.h	/^class compile_parse_context : public basic_format_parse_context<Char> {$/;"	c	namespace:detail
compile_pattern_	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::compile_pattern_(const std::string &pattern) {$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE void
compile_string	include/spdlog/fmt/bundled/core.h	/^struct compile_string {};$/;"	s	namespace:detail
compile_string_to_view	include/spdlog/fmt/bundled/format.h	/^constexpr auto compile_string_to_view(const Char (&s)[N])$/;"	f	namespace:detail_exported	typeref:typename:basic_string_view<Char>
compile_string_to_view	include/spdlog/fmt/bundled/format.h	/^constexpr auto compile_string_to_view(detail::std_string_view<Char> s)$/;"	f	namespace:detail_exported	typeref:typename:basic_string_view<Char>
compiled_string	include/spdlog/fmt/bundled/compile.h	/^class compiled_string {};$/;"	c	namespace:detail
compute_delta	include/spdlog/fmt/bundled/format-inl.h	/^  static auto compute_delta(cache_entry_type const& cache, int beta) noexcept$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_delta	include/spdlog/fmt/bundled/format-inl.h	/^  static auto compute_delta(const cache_entry_type& cache, int beta) noexcept$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_left_endpoint_for_shorter_interval_case	include/spdlog/fmt/bundled/format-inl.h	/^  static auto compute_left_endpoint_for_shorter_interval_case($/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_mul	include/spdlog/fmt/bundled/format-inl.h	/^  static auto compute_mul(carrier_uint u,$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_mul_parity	include/spdlog/fmt/bundled/format-inl.h	/^  static auto compute_mul_parity(carrier_uint two_f,$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_mul_parity_result	include/spdlog/fmt/bundled/format-inl.h	/^  struct compute_mul_parity_result {$/;"	s	struct:detail::dragonbox::cache_accessor
compute_mul_result	include/spdlog/fmt/bundled/format-inl.h	/^  struct compute_mul_result {$/;"	s	struct:detail::dragonbox::cache_accessor
compute_right_endpoint_for_shorter_interval_case	include/spdlog/fmt/bundled/format-inl.h	/^  static auto compute_right_endpoint_for_shorter_interval_case($/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_round_up_for_shorter_interval_case	include/spdlog/fmt/bundled/format-inl.h	/^  static auto compute_round_up_for_shorter_interval_case($/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_width	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline auto compute_width(string_view s) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
compute_width	include/spdlog/fmt/bundled/format.h	/^inline auto compute_width(basic_string_view<Char> s) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
compute_width	include/spdlog/fmt/bundled/format.h	/^inline auto compute_width(basic_string_view<char8_type> s) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
concat	include/spdlog/fmt/bundled/compile.h	/^template <typename L, typename R> struct concat {$/;"	s	namespace:detail
conceal	include/spdlog/fmt/bundled/color.h	/^  conceal = 1 << 6,$/;"	e	enum:emphasis
concealed	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t concealed = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
conditional_helper	include/spdlog/fmt/bundled/ranges.h	/^template <typename... Ts> struct conditional_helper {};$/;"	s	namespace:detail
conditional_static_cast	include/spdlog/common.h	/^constexpr T conditional_static_cast(U value) {$/;"	f	namespace:spdlog::details	typeref:typename:T
conditional_t	include/spdlog/fmt/bundled/core.h	/^using conditional_t = typename std::conditional<B, T, F>::type;$/;"	t	typeref:typename:std::conditional<B,T,F>::type
conf_	include/spdlog/sinks/kafka_sink.h	/^    std::unique_ptr<RdKafka::Conf> conf_ = nullptr;$/;"	m	class:spdlog::sinks::kafka_sink	typeref:typename:std::unique_ptr<RdKafka::Conf>
config_	include/spdlog/sinks/kafka_sink.h	/^    kafka_sink_config config_;$/;"	m	class:spdlog::sinks::kafka_sink	typeref:typename:kafka_sink_config
config_	include/spdlog/sinks/tcp_sink.h	/^    tcp_sink_config config_;$/;"	m	class:spdlog::sinks::tcp_sink	typeref:typename:tcp_sink_config
conjunction	include/spdlog/fmt/bundled/ranges.h	/^struct conjunction<P1, Pn...>$/;"	s
conjunction	include/spdlog/fmt/bundled/ranges.h	/^template <typename P> struct conjunction<P> : P {};$/;"	s
conjunction	include/spdlog/fmt/bundled/ranges.h	/^template <typename...> struct conjunction : std::true_type {};$/;"	s
conn	include/mpris_media_player.h	/^  DBusConnection *conn;$/;"	m	class:MprisMediaPlayer	typeref:typename:DBusConnection *
connect	include/spdlog/details/tcp_client-windows.h	/^    void connect(const std::string &host, int port) {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
connect	include/spdlog/details/tcp_client.h	/^    void connect(const std::string &host, int port) {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
connect	src/mpris_media_player.cpp	/^int MprisMediaPlayer::connect() {$/;"	f	class:MprisMediaPlayer	typeref:typename:int
console_mutex	include/spdlog/details/console_globals.h	/^struct console_mutex {$/;"	s	namespace:spdlog::details
console_nullmutex	include/spdlog/details/console_globals.h	/^struct console_nullmutex {$/;"	s	namespace:spdlog::details
const	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const_check	include/spdlog/fmt/bundled/core.h	/^template <typename T> constexpr FMT_INLINE auto const_check(T value) -> T {$/;"	f	namespace:detail	typeref:typename:T
const_reference	include/spdlog/fmt/bundled/core.h	/^  using const_reference = const T&;$/;"	t	class:detail::buffer	typeref:typename:const T &
const_reference	include/spdlog/fmt/bundled/format.h	/^  using const_reference = const T&;$/;"	t	class:basic_memory_buffer	typeref:typename:const T &
construct_new_dbus_msg	src/mpris_media_player.cpp	/^int MprisMediaPlayer::construct_new_dbus_msg(DBusGetSetType getset_type,$/;"	f	class:MprisMediaPlayer	typeref:typename:int
construct_new_dbus_msg	src/mpris_media_player.cpp	/^int MprisMediaPlayer::construct_new_dbus_msg(DBusMessage *&msg,$/;"	f	class:MprisMediaPlayer	typeref:typename:int
container_	include/spdlog/fmt/bundled/core.h	/^  Container& container_;$/;"	m	class:detail::iterator_buffer	typeref:typename:Container &
context	include/spdlog/fmt/bundled/chrono.h	/^  FormatContext& context;$/;"	m	struct:detail::chrono_formatter	typeref:typename:FormatContext &
context	include/spdlog/fmt/bundled/core.h	/^    using context = detail::compile_parse_context<Char>;$/;"	t	function:basic_format_parse_context::check_dynamic_spec	typeref:typename:detail::compile_parse_context<Char>
context	include/spdlog/fmt/bundled/core.h	/^    using context = detail::compile_parse_context<Char>;$/;"	t	function:basic_format_parse_context::do_check_arg_id	typeref:typename:detail::compile_parse_context<Char>
context	include/spdlog/fmt/bundled/core.h	/^  using context = buffer_context<char_type>;$/;"	t	function:detail::parse_format_specs	typeref:typename:buffer_context<char_type>
context	include/spdlog/fmt/bundled/format.h	/^    buffer_context<Char> context;$/;"	m	struct:detail::vformat_to::format_handler	typeref:typename:buffer_context<Char>
context	include/spdlog/fmt/bundled/format.h	/^  using context = buffer_context<Char>;$/;"	t	struct:detail::arg_formatter	typeref:typename:buffer_context<Char>
context	include/spdlog/fmt/bundled/format.h	/^  using context = buffer_context<Char>;$/;"	t	struct:detail::default_arg_formatter	typeref:typename:buffer_context<Char>
context_	include/spdlog/fmt/bundled/core.h	/^  parse_context_type context_;$/;"	m	class:detail::format_string_checker	typeref:typename:parse_context_type
context_	include/spdlog/fmt/bundled/printf.h	/^  context_type& context_;$/;"	m	class:detail::printf_arg_formatter	typeref:typename:context_type &
context_type	include/spdlog/fmt/bundled/printf.h	/^  using context_type = basic_printf_context<Char>;$/;"	t	class:detail::printf_arg_formatter	typeref:typename:basic_printf_context<Char>
convert	include/spdlog/fmt/bundled/format.h	/^  auto convert(basic_string_view<WChar> s,$/;"	f	class:detail::to_utf8	typeref:typename:bool
convert	include/spdlog/fmt/bundled/format.h	/^  static auto convert(Buffer& buf, basic_string_view<WChar> s,$/;"	f	class:detail::to_utf8	typeref:typename:bool
convert_arg	include/spdlog/fmt/bundled/printf.h	/^void convert_arg(basic_format_arg<Context>& arg, Char type) {$/;"	f	namespace:detail	typeref:typename:void
convert_dbus_loop_status	src/mpris_media_player.cpp	/^MprisMediaPlayer::convert_dbus_loop_status(DBusLoopStatusType loopStatus) {$/;"	f	class:MprisMediaPlayer	typeref:typename:std::string
convert_dbus_method_type_to_string	src/mpris_media_player.cpp	/^MprisMediaPlayer::convert_dbus_method_type_to_string(DBusMethodType type) {$/;"	f	class:MprisMediaPlayer	typeref:typename:std::string
convert_dbus_property_type_to_string	src/mpris_media_player.cpp	/^MprisMediaPlayer::convert_dbus_property_type_to_string(DBusPropertyType type) {$/;"	f	class:MprisMediaPlayer	typeref:typename:std::string
convert_float	include/spdlog/fmt/bundled/format.h	/^constexpr auto convert_float(T value) -> convert_float_result<T> {$/;"	f	namespace:detail	typeref:typename:convert_float_result<T>
convert_float_result	include/spdlog/fmt/bundled/format.h	/^using convert_float_result =$/;"	t	namespace:detail	typeref:typename:conditional_t<std::is_same<T,float>::value||doublish,double,T>
convert_for_visit	include/spdlog/fmt/bundled/core.h	/^template <typename T> auto convert_for_visit(T) -> monostate { return {}; }$/;"	f	namespace:detail	typeref:typename:monostate
convert_for_visit	include/spdlog/fmt/bundled/core.h	/^template <typename T> inline auto convert_for_visit(T value) -> T {$/;"	f	namespace:detail	typeref:typename:T
convert_to_android_	include/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android_(spdlog::level::level_enum level) {$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:android_LogPriority
copy	include/spdlog/fmt/bundled/ranges.h	/^auto copy(const Range& range, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy	include/spdlog/fmt/bundled/ranges.h	/^auto copy(const char* str, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy	include/spdlog/fmt/bundled/ranges.h	/^template <typename OutputIt> auto copy(char ch, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy	include/spdlog/fmt/bundled/ranges.h	/^template <typename OutputIt> auto copy(wchar_t ch, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy2	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 FMT_INLINE void
copy_moveable	include/spdlog/details/circular_q.h	/^    void copy_moveable(circular_q &&other) SPDLOG_NOEXCEPT {$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
copy_str	include/spdlog/fmt/bundled/compile.h	/^FMT_CONSTEXPR inline auto copy_str(InputIt begin, InputIt end,$/;"	f	namespace:detail	typeref:typename:counting_iterator
copy_str	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto copy_str(InputIt begin, InputIt end, OutputIt out)$/;"	f	namespace:detail	typeref:typename:OutputIt
copy_str	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto copy_str(R&& rng, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy_str	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto copy_str(T* begin, T* end, U* out) -> U* {$/;"	f	namespace:detail	typeref:typename:U *
copy_str	include/spdlog/fmt/bundled/core.h	/^auto copy_str(InputIt begin, InputIt end, appender out) -> appender {$/;"	f	namespace:detail	typeref:typename:appender
copy_str	include/spdlog/fmt/bundled/core.h	/^auto copy_str(InputIt begin, InputIt end,$/;"	f	namespace:detail	typeref:typename:std::back_insert_iterator<std::string>
copy_str_noinline	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR FMT_NOINLINE auto copy_str_noinline(InputIt begin, InputIt end,$/;"	f	namespace:detail	typeref:typename:OutputIt
copy_unit	include/spdlog/fmt/bundled/chrono.h	/^auto copy_unit(string_view unit, OutputIt out, Char) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy_unit	include/spdlog/fmt/bundled/chrono.h	/^auto copy_unit(string_view unit, OutputIt out, wchar_t) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
coral	include/spdlog/fmt/bundled/color.h	/^  coral = 0xFF7F50,                    \/\/ rgb(255,127,80)$/;"	e	enum:color
cornflower_blue	include/spdlog/fmt/bundled/color.h	/^  cornflower_blue = 0x6495ED,          \/\/ rgb(100,149,237)$/;"	e	enum:color
cornsilk	include/spdlog/fmt/bundled/color.h	/^  cornsilk = 0xFFF8DC,                 \/\/ rgb(255,248,220)$/;"	e	enum:color
count	include/spdlog/fmt/bundled/core.h	/^  auto count() -> size_t { return count_ + this->size(); }$/;"	f	class:detail::counting_buffer	typeref:typename:size_t
count	include/spdlog/fmt/bundled/core.h	/^  auto count() const -> size_t { return 0; }$/;"	f	struct:detail::buffer_traits	typeref:typename:size_t
count	include/spdlog/fmt/bundled/core.h	/^  auto count() const -> size_t { return Traits::count() + this->size(); }$/;"	f	class:detail::iterator_buffer	typeref:typename:size_t
count	include/spdlog/fmt/bundled/core.h	/^  auto count() const -> size_t { return count_; }$/;"	f	class:detail::fixed_buffer_traits	typeref:typename:size_t
count	include/spdlog/fmt/bundled/core.h	/^  auto count() const -> size_t {$/;"	f	class:detail::iterator_buffer	typeref:typename:size_t
count	include/spdlog/fmt/bundled/core.h	/^template <bool B = false> constexpr auto count() -> size_t { return B ? 1 : 0; }$/;"	f	namespace:detail	typeref:typename:size_t
count	include/spdlog/fmt/bundled/core.h	/^template <bool B1, bool B2, bool... Tail> constexpr auto count() -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
count	include/spdlog/fmt/bundled/format.h	/^    size_t* count;$/;"	m	struct:detail::compute_width::count_code_points	typeref:typename:size_t *
count	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto count() const -> size_t { return count_; }$/;"	f	class:detail::counting_iterator	typeref:typename:size_t
count_	include/spdlog/fmt/bundled/core.h	/^  size_t count_ = 0;$/;"	m	class:detail::counting_buffer	typeref:typename:size_t
count_	include/spdlog/fmt/bundled/core.h	/^  size_t count_ = 0;$/;"	m	class:detail::fixed_buffer_traits	typeref:typename:size_t
count_	include/spdlog/fmt/bundled/format.h	/^  size_t count_;$/;"	m	class:detail::counting_iterator	typeref:typename:size_t
count_code_points	include/spdlog/fmt/bundled/format.h	/^  struct count_code_points {$/;"	s	function:detail::compute_width
count_digits	include/spdlog/details/fmt_helper.h	/^inline unsigned int count_digits(T n) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:unsigned int
count_digits	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto count_digits(UInt n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline auto count_digits(uint128_opt n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 inline auto count_digits(uint32_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits	include/spdlog/pattern_formatter-inl.h	/^    static unsigned int count_digits(T \/* number *\/) {$/;"	f	struct:spdlog::details::null_scoped_padder	typeref:typename:unsigned int
count_digits	include/spdlog/pattern_formatter-inl.h	/^    static unsigned int count_digits(T n) {$/;"	f	class:spdlog::details::scoped_padder	typeref:typename:unsigned int
count_digits_fallback	include/spdlog/details/fmt_helper.h	/^SPDLOG_CONSTEXPR_FUNC unsigned int count_digits_fallback(T n) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:SPDLOG_CONSTEXPR_FUNC unsigned int
count_digits_fallback	include/spdlog/fmt/bundled/format.h	/^template <typename T> FMT_CONSTEXPR auto count_digits_fallback(T n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_fractional_digits	include/spdlog/fmt/bundled/chrono.h	/^struct count_fractional_digits {$/;"	s	namespace:detail
count_fractional_digits	include/spdlog/fmt/bundled/chrono.h	/^struct count_fractional_digits<Num, Den, N, false> {$/;"	s	namespace:detail
count_named_args	include/spdlog/fmt/bundled/core.h	/^template <typename... Args> constexpr auto count_named_args() -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
count_separators	include/spdlog/fmt/bundled/format.h	/^  auto count_separators(int num_digits) const -> int {$/;"	f	class:detail::digit_grouping	typeref:typename:int
count_separators	include/spdlog/fmt/bundled/format.h	/^  constexpr auto count_separators(int) const -> int { return 0; }$/;"	f	class:detail::fallback_digit_grouping	typeref:typename:int
count_statically_named_args	include/spdlog/fmt/bundled/core.h	/^constexpr auto count_statically_named_args() -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
count_type	include/spdlog/details/fmt_helper.h	/^    using count_type =$/;"	t	function:spdlog::details::fmt_helper::count_digits
counting_buffer	include/spdlog/fmt/bundled/core.h	/^  counting_buffer() : buffer<T>(data_, 0, buffer_size) {}$/;"	f	class:detail::counting_buffer
counting_buffer	include/spdlog/fmt/bundled/core.h	/^template <typename T = char> class counting_buffer final : public buffer<T> {$/;"	c	namespace:detail
counting_iterator	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR counting_iterator() : count_(0) {}$/;"	f	class:detail::counting_iterator	typeref:typename:FMT_CONSTEXPR
counting_iterator	include/spdlog/fmt/bundled/format.h	/^class counting_iterator {$/;"	c	namespace:detail
countl_zero	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 inline auto countl_zero(uint32_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
countl_zero	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 inline auto countl_zero(uint64_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
countl_zero_fallback	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 inline auto countl_zero_fallback(UInt n) -> int {$/;"	f	namespace:detail	typeref:typename:int
cp	include/spdlog/fmt/bundled/format.h	/^  uint32_t cp;$/;"	m	struct:detail::find_escape_result	typeref:typename:uint32_t
create	include/spdlog/async.h	/^    static std::shared_ptr<async_logger> create(std::string logger_name, SinkArgs &&...args) {$/;"	f	struct:spdlog::async_factory_impl	typeref:typename:std::shared_ptr<async_logger>
create	include/spdlog/details/synchronous_factory.h	/^    static std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&...args) {$/;"	f	struct:spdlog::synchronous_factory	typeref:typename:std::shared_ptr<spdlog::logger>
create	include/spdlog/spdlog.h	/^inline std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&...sink_args) /;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create_async	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async(std::string logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create_async_nb	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async_nb(std::string logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create_dir	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE bool create_dir(const filename_t &path) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE bool
crimson	include/spdlog/fmt/bundled/color.h	/^  crimson = 0xDC143C,                  \/\/ rgb(220,20,60)$/;"	e	enum:color
critical	include/spdlog/common.h	/^    critical = SPDLOG_LEVEL_CRITICAL,$/;"	e	enum:spdlog::level::level_enum
critical	include/spdlog/logger.h	/^    void critical(const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
critical	include/spdlog/logger.h	/^    void critical(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
critical	include/spdlog/logger.h	/^    void critical(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
critical	include/spdlog/spdlog.h	/^inline void critical(const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
critical	include/spdlog/spdlog.h	/^inline void critical(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
critical	include/spdlog/spdlog.h	/^inline void critical(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
cstring_set	include/spdlog/fmt/bundled/core.h	/^  cstring_set = set(type::cstring_type),$/;"	e	enum:detail::__anon0accc0920103
cstring_type	include/spdlog/fmt/bundled/core.h	/^  cstring_type,$/;"	e	enum:detail::type
cstring_view	include/spdlog/fmt/bundled/os.h	/^using cstring_view = basic_cstring_view<char>;$/;"	t	typeref:typename:basic_cstring_view<char>
ctx	include/spdlog/fmt/bundled/core.h	/^  basic_format_parse_context<Char>& ctx;$/;"	m	struct:detail::dynamic_spec_id_handler	typeref:typename:basic_format_parse_context<Char> &
ctx	include/spdlog/fmt/bundled/ranges.h	/^  FormatContext& ctx;$/;"	m	struct:detail::format_tuple_element	typeref:typename:FormatContext &
ctx	include/spdlog/fmt/bundled/ranges.h	/^  ParseContext& ctx;$/;"	m	struct:detail::parse_empty_specs	typeref:typename:ParseContext &
ctz	include/spdlog/fmt/bundled/format.h	/^inline auto ctz(uint32_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
ctzll	include/spdlog/fmt/bundled/format.h	/^inline auto ctzll(uint64_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
current_size_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t current_size_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:std::size_t
current_state	include/spdlog/fmt/bundled/core.h	/^    state current_state = state::start;$/;"	m	struct:detail::parse_format_specs::__anon0accc0920e08	typeref:typename:state
current_user_sid_	include/spdlog/sinks/win_eventlog_sink.h	/^    internal::sid_t current_user_sid_;$/;"	m	class:spdlog::sinks::win_eventlog::win_eventlog_sink	typeref:typename:internal::sid_t
custom	include/spdlog/fmt/bundled/core.h	/^    custom_value<Context> custom;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:custom_value<Context>
custom_	include/spdlog/fmt/bundled/core.h	/^    detail::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle	typeref:typename:detail::custom_value<Context>
custom_err_handler_	include/spdlog/logger.h	/^    err_handler custom_err_handler_{nullptr};$/;"	m	class:spdlog::logger	typeref:typename:err_handler
custom_flag_formatter	include/spdlog/pattern_formatter.h	/^class SPDLOG_API custom_flag_formatter : public details::flag_formatter {$/;"	c	namespace:spdlog
custom_flags	include/spdlog/pattern_formatter.h	/^    using custom_flags = std::unordered_map<char, std::unique_ptr<custom_flag_formatter>>;$/;"	t	class:spdlog::pattern_formatter	typeref:typename:std::unordered_map<char,std::unique_ptr<custom_flag_formatter>>
custom_handlers_	include/spdlog/pattern_formatter.h	/^    custom_flags custom_handlers_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:custom_flags
custom_log_callback	include/spdlog/sinks/callback_sink.h	/^typedef std::function<void(const details::log_msg &msg)> custom_log_callback;$/;"	t	namespace:spdlog
custom_type	include/spdlog/fmt/bundled/core.h	/^  custom_type$/;"	e	enum:detail::type
custom_value	include/spdlog/fmt/bundled/core.h	/^template <typename Context> struct custom_value {$/;"	s	namespace:detail
cv_	include/spdlog/details/periodic_worker.h	/^    std::condition_variable cv_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:std::condition_variable
cyan	include/spdlog/fmt/bundled/color.h	/^  cyan = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	e	enum:color
cyan	include/spdlog/fmt/bundled/color.h	/^  cyan,$/;"	e	enum:terminal_color
cyan	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t cyan = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
d_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit d_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::d_formatter
d_formatter	include/spdlog/pattern_formatter-inl.h	/^class d_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
daily_file_format_sink_mt	include/spdlog/sinks/daily_file_sink.h	/^using daily_file_format_sink_mt = daily_file_sink<std::mutex, daily_filename_format_calculator>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<std::mutex,daily_filename_format_calculator>
daily_file_format_sink_st	include/spdlog/sinks/daily_file_sink.h	/^using daily_file_format_sink_st =$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<details::null_mutex,daily_filename_format_calculator>
daily_file_sink	include/spdlog/sinks/daily_file_sink.h	/^    daily_file_sink(filename_t base_filename,$/;"	f	class:spdlog::sinks::daily_file_sink
daily_file_sink	include/spdlog/sinks/daily_file_sink.h	/^class daily_file_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
daily_file_sink_mt	include/spdlog/sinks/daily_file_sink.h	/^using daily_file_sink_mt = daily_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<std::mutex>
daily_file_sink_st	include/spdlog/sinks/daily_file_sink.h	/^using daily_file_sink_st = daily_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<details::null_mutex>
daily_filename_calculator	include/spdlog/sinks/daily_file_sink.h	/^struct daily_filename_calculator {$/;"	s	namespace:spdlog::sinks
daily_filename_format_calculator	include/spdlog/sinks/daily_file_sink.h	/^struct daily_filename_format_calculator {$/;"	s	namespace:spdlog::sinks
daily_logger_format_mt	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_format_mt($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
daily_logger_format_st	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_format_st($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
daily_logger_mt	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
daily_logger_st	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
dark	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t dark = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
dark_blue	include/spdlog/fmt/bundled/color.h	/^  dark_blue = 0x00008B,                \/\/ rgb(0,0,139)$/;"	e	enum:color
dark_cyan	include/spdlog/fmt/bundled/color.h	/^  dark_cyan = 0x008B8B,                \/\/ rgb(0,139,139)$/;"	e	enum:color
dark_golden_rod	include/spdlog/fmt/bundled/color.h	/^  dark_golden_rod = 0xB8860B,          \/\/ rgb(184,134,11)$/;"	e	enum:color
dark_gray	include/spdlog/fmt/bundled/color.h	/^  dark_gray = 0xA9A9A9,                \/\/ rgb(169,169,169)$/;"	e	enum:color
dark_green	include/spdlog/fmt/bundled/color.h	/^  dark_green = 0x006400,               \/\/ rgb(0,100,0)$/;"	e	enum:color
dark_khaki	include/spdlog/fmt/bundled/color.h	/^  dark_khaki = 0xBDB76B,               \/\/ rgb(189,183,107)$/;"	e	enum:color
dark_magenta	include/spdlog/fmt/bundled/color.h	/^  dark_magenta = 0x8B008B,             \/\/ rgb(139,0,139)$/;"	e	enum:color
dark_olive_green	include/spdlog/fmt/bundled/color.h	/^  dark_olive_green = 0x556B2F,         \/\/ rgb(85,107,47)$/;"	e	enum:color
dark_orange	include/spdlog/fmt/bundled/color.h	/^  dark_orange = 0xFF8C00,              \/\/ rgb(255,140,0)$/;"	e	enum:color
dark_orchid	include/spdlog/fmt/bundled/color.h	/^  dark_orchid = 0x9932CC,              \/\/ rgb(153,50,204)$/;"	e	enum:color
dark_red	include/spdlog/fmt/bundled/color.h	/^  dark_red = 0x8B0000,                 \/\/ rgb(139,0,0)$/;"	e	enum:color
dark_salmon	include/spdlog/fmt/bundled/color.h	/^  dark_salmon = 0xE9967A,              \/\/ rgb(233,150,122)$/;"	e	enum:color
dark_sea_green	include/spdlog/fmt/bundled/color.h	/^  dark_sea_green = 0x8FBC8F,           \/\/ rgb(143,188,143)$/;"	e	enum:color
dark_slate_blue	include/spdlog/fmt/bundled/color.h	/^  dark_slate_blue = 0x483D8B,          \/\/ rgb(72,61,139)$/;"	e	enum:color
dark_slate_gray	include/spdlog/fmt/bundled/color.h	/^  dark_slate_gray = 0x2F4F4F,          \/\/ rgb(47,79,79)$/;"	e	enum:color
dark_turquoise	include/spdlog/fmt/bundled/color.h	/^  dark_turquoise = 0x00CED1,           \/\/ rgb(0,206,209)$/;"	e	enum:color
dark_violet	include/spdlog/fmt/bundled/color.h	/^  dark_violet = 0x9400D3,              \/\/ rgb(148,0,211)$/;"	e	enum:color
data	include/spdlog/fmt/bundled/args.h	/^  auto data() const -> const basic_format_arg<Context>* {$/;"	f	class:dynamic_format_arg_store	typeref:typename:const basic_format_arg<Context> *
data	include/spdlog/fmt/bundled/compile.h	/^  basic_string_view<Char> data;$/;"	m	struct:detail::text	typeref:typename:basic_string_view<Char>
data	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR auto
data	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR auto
data	include/spdlog/fmt/bundled/core.h	/^  const Char* data;$/;"	m	struct:detail::string_value	typeref:typename:const Char *
data	include/spdlog/fmt/bundled/core.h	/^  const named_arg_info<Char>* data;$/;"	m	struct:detail::named_arg_value	typeref:typename:const named_arg_info<Char> *
data	include/spdlog/fmt/bundled/core.h	/^  constexpr auto data() const -> const Char* { return data_; }$/;"	f	struct:detail::fill_t	typeref:typename:const Char *
data	include/spdlog/fmt/bundled/core.h	/^  constexpr auto data() const noexcept -> const Char* { return data_; }$/;"	f	class:basic_string_view	typeref:typename:auto
data	include/spdlog/fmt/bundled/format.h	/^  Char data[N] = {};$/;"	m	struct:detail_exported::fixed_string	typeref:typename:Char[]
data	include/spdlog/fmt/bundled/format.h	/^  auto data() const -> const char* { return str_; }$/;"	f	class:format_int	typeref:typename:const char *
data_	include/spdlog/fmt/bundled/args.h	/^  std::vector<basic_format_arg<Context>> data_;$/;"	m	class:dynamic_format_arg_store	typeref:typename:std::vector<basic_format_arg<Context>>
data_	include/spdlog/fmt/bundled/core.h	/^      data_;$/;"	m	class:format_arg_store	typeref:typename:detail::arg_data<value_type,typename Context::char_type,num_args,num_named_args>
data_	include/spdlog/fmt/bundled/core.h	/^  Char data_[max_size] = {Char(' '), Char(0), Char(0), Char(0)};$/;"	m	struct:detail::fill_t	typeref:typename:Char[]
data_	include/spdlog/fmt/bundled/core.h	/^  T data_[buffer_size];$/;"	m	class:detail::counting_buffer	typeref:typename:T[]
data_	include/spdlog/fmt/bundled/core.h	/^  T data_[buffer_size];$/;"	m	class:detail::iterator_buffer	typeref:typename:T[]
data_	include/spdlog/fmt/bundled/core.h	/^  const Char* data_;$/;"	m	class:basic_string_view	typeref:typename:const Char *
data_	include/spdlog/fmt/bundled/format.h	/^  string_view data_;$/;"	m	class:bytes	typeref:typename:string_view
data_	include/spdlog/fmt/bundled/os.h	/^  const Char* data_;$/;"	m	class:basic_cstring_view	typeref:typename:const Char *
data_t	include/spdlog/fmt/bundled/format.h	/^  struct data_t {$/;"	s	function:detail::bit_cast
days	include/spdlog/fmt/bundled/chrono.h	/^  auto days() const -> Rep { return static_cast<Rep>(s.count() \/ 86400); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
days	include/spdlog/pattern_formatter-inl.h	/^static std::array<const char *, 7> days{{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}};$/;"	v	namespace:spdlog::details	typeref:typename:std::array<const char *,7>
days_per_week	include/spdlog/fmt/bundled/chrono.h	/^  static constexpr int days_per_week = 7;$/;"	m	class:detail::tm_writer	typeref:typename:int
db_name_	include/spdlog/sinks/mongo_sink.h	/^    std::string db_name_;$/;"	m	class:spdlog::sinks::mongo_sink	typeref:typename:std::string
dbus-music	CMakeLists.txt	/^project(dbus-music VERSION 1.0)$/;"	p
dbus-music	build/Makefile	/^dbus-music: cmake_check_build_system$/;"	t
dbus-music/fast	build/Makefile	/^dbus-music\/fast:$/;"	t
deallocate	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void deallocate() {$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
debug	include/log.h	/^  void debug(const std::string &msg) {$/;"	f	class:Log	typeref:typename:void
debug	include/spdlog/common.h	/^    debug = SPDLOG_LEVEL_DEBUG,$/;"	e	enum:spdlog::level::level_enum
debug	include/spdlog/fmt/bundled/core.h	/^  debug            \/\/ '?'$/;"	e	enum:presentation_type
debug	include/spdlog/logger.h	/^    void debug(const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
debug	include/spdlog/logger.h	/^    void debug(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
debug	include/spdlog/logger.h	/^    void debug(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
debug	include/spdlog/spdlog.h	/^inline void debug(const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
debug	include/spdlog/spdlog.h	/^inline void debug(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
debug	include/spdlog/spdlog.h	/^inline void debug(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
debug_	include/spdlog/fmt/bundled/std.h	/^  bool debug_ = false;$/;"	m	struct:formatter	typeref:typename:bool
debug_string	include/spdlog/fmt/bundled/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
dec	include/spdlog/fmt/bundled/core.h	/^  dec,             \/\/ 'd'$/;"	e	enum:presentation_type
decimal_fp	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct decimal_fp {$/;"	s	namespace:detail::dragonbox
decimal_point	include/spdlog/fmt/bundled/format.h	/^  std::basic_string<Char> decimal_point;$/;"	m	struct:detail::loc_writer	typeref:typename:std::basic_string<Char>
decimal_point	include/spdlog/fmt/bundled/format.h	/^template <> inline auto decimal_point(locale_ref loc) -> wchar_t {$/;"	f	namespace:detail	typeref:typename:wchar_t
decimal_point	include/spdlog/fmt/bundled/format.h	/^template <typename Char> inline auto decimal_point(locale_ref loc) -> Char {$/;"	f	namespace:detail	typeref:typename:Char
decimal_point_	include/spdlog/fmt/bundled/format.h	/^  std::string decimal_point_;$/;"	m	class:format_facet	typeref:typename:std::string
decimal_point_impl	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto decimal_point_impl(locale_ref loc) -> Char {$/;"	f	namespace:detail	typeref:typename:Char
decimal_point_impl	include/spdlog/fmt/bundled/format-inl.h	/^template <typename Char> FMT_FUNC Char decimal_point_impl(locale_ref) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC Char
deep_pink	include/spdlog/fmt/bundled/color.h	/^  deep_pink = 0xFF1493,                \/\/ rgb(255,20,147)$/;"	e	enum:color
deep_sky_blue	include/spdlog/fmt/bundled/color.h	/^  deep_sky_blue = 0x00BFFF,            \/\/ rgb(0,191,255)$/;"	e	enum:color
default_arg_formatter	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct default_arg_formatter {$/;"	s	namespace:detail
default_async_q_size	include/spdlog/async.h	/^static const size_t default_async_q_size = 8192;$/;"	v	namespace:spdlog::details	typeref:typename:const size_t
default_color	include/spdlog/sinks/qt_sinks.h	/^        QTextCharFormat default_color;$/;"	m	struct:spdlog::sinks::qt_color_sink::invoke_params	typeref:typename:QTextCharFormat
default_color_	include/spdlog/sinks/qt_sinks.h	/^    QTextCharFormat default_color_;$/;"	m	class:spdlog::sinks::qt_color_sink	typeref:typename:QTextCharFormat
default_eol	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char *default_eol = SPDLOG_EOL;$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char *
default_factory	include/spdlog/spdlog.h	/^using default_factory = synchronous_factory;$/;"	t	namespace:spdlog	typeref:typename:synchronous_factory
default_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> registry::default_logger() {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
default_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE std::shared_ptr<spdlog::logger> default_logger() {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<spdlog::logger>
default_logger_	include/spdlog/details/registry.h	/^    std::shared_ptr<logger> default_logger_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::shared_ptr<logger>
default_logger_raw	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE spdlog::logger *default_logger_raw() {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE spdlog::logger *
default_target	build/Makefile	/^default_target: all$/;"	t
delete_old_	include/spdlog/sinks/daily_file_sink.h	/^    void delete_old_() {$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:void
delete_old_	include/spdlog/sinks/hourly_file_sink.h	/^    void delete_old_() {$/;"	f	class:spdlog::sinks::hourly_file_sink	typeref:typename:void
delimiter	include/spdlog/fmt/bin_to_hex.h	/^    const char delimiter = ' ';$/;"	m	struct:std::formatter	typeref:typename:const char
depend	build/Makefile	/^depend:$/;"	t
dequeue	include/spdlog/details/mpmc_blocking_q.h	/^    void dequeue(T &popped_item) {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
dequeue_for	include/spdlog/details/mpmc_blocking_q.h	/^    bool dequeue_for(T &popped_item, std::chrono::milliseconds wait_duration) {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:bool
desc	include/spdlog/fmt/bundled/core.h	/^  static constexpr unsigned long long desc =$/;"	m	class:format_arg_store	typeref:typename:unsigned long long
desc_	include/spdlog/fmt/bundled/core.h	/^  unsigned long long desc_;$/;"	m	class:basic_format_args	typeref:typename:unsigned long long
descriptor	include/spdlog/fmt/bundled/os.h	/^  auto descriptor() const noexcept -> int { return fd_; }$/;"	f	class:file	typeref:typename:auto
dest_	include/spdlog/pattern_formatter-inl.h	/^    memory_buf_t &dest_;$/;"	m	class:spdlog::details::scoped_padder	typeref:typename:memory_buf_t &
detail	include/spdlog/fmt/bundled/args.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/chrono.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/color.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/compile.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/core.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/format-inl.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/format.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/os.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/ostream.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/printf.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/ranges.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/std.h	/^namespace detail {$/;"	n
detail	include/spdlog/fmt/bundled/xchar.h	/^namespace detail {$/;"	n
detail_exported	include/spdlog/fmt/bundled/format.h	/^namespace detail_exported {$/;"	n
details	include/spdlog/async.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/async_logger.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/common.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/backtracer-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/backtracer.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/circular_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/console_globals.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/file_helper-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/file_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/fmt_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg_buffer-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg_buffer.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/mpmc_blocking_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/null_mutex.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/os-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/os.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/periodic_worker-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/periodic_worker.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/registry-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/registry.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/tcp_client-windows.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/tcp_client.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/thread_pool-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/thread_pool.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/udp_client-windows.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/udp_client.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/fmt/bin_to_hex.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/pattern_formatter-inl.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/pattern_formatter.h	/^namespace details {$/;"	n	namespace:spdlog
difference_type	include/spdlog/fmt/bundled/format.h	/^  using difference_type = std::ptrdiff_t;$/;"	t	class:detail::counting_iterator	typeref:typename:std::ptrdiff_t
digit_grouping	include/spdlog/fmt/bundled/format.h	/^  digit_grouping(std::string grouping, std::basic_string<Char> sep)$/;"	f	class:detail::digit_grouping
digit_grouping	include/spdlog/fmt/bundled/format.h	/^  explicit digit_grouping(locale_ref loc, bool localized = true) {$/;"	f	class:detail::digit_grouping
digit_grouping	include/spdlog/fmt/bundled/format.h	/^template <typename Char> class digit_grouping {$/;"	c	namespace:detail
digits10	include/spdlog/fmt/bundled/format.h	/^template <> constexpr auto digits10<int128_opt>() noexcept -> int { return 38; }$/;"	f	namespace:detail	typeref:typename:auto
digits10	include/spdlog/fmt/bundled/format.h	/^template <> constexpr auto digits10<uint128_t>() noexcept -> int { return 38; }$/;"	f	namespace:detail	typeref:typename:auto
digits10	include/spdlog/fmt/bundled/format.h	/^template <typename Int> constexpr auto digits10() noexcept -> int {$/;"	f	namespace:detail	typeref:typename:auto
digits2	include/spdlog/fmt/bundled/format.h	/^constexpr auto digits2(size_t value) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
dim_gray	include/spdlog/fmt/bundled/color.h	/^  dim_gray = 0x696969,                 \/\/ rgb(105,105,105)$/;"	e	enum:color
dir_name	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE filename_t dir_name(const filename_t &path) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE filename_t
disable	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::disable() {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE void
disable_backtrace	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::disable_backtrace() {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
disable_backtrace	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::disable_backtrace() { tracer_.disable(); }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
disable_backtrace	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void disable_backtrace() { details::registry::instance().disable_backtrace(); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
disabled	include/spdlog/fmt/bundled/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
discard_counter	include/spdlog/details/mpmc_blocking_q.h	/^    size_t discard_counter() { return discard_counter_.load(std::memory_order_relaxed); }$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:size_t
discard_counter	include/spdlog/details/thread_pool-inl.h	/^size_t SPDLOG_INLINE thread_pool::discard_counter() { return q_.discard_counter(); }$/;"	f	class:spdlog::details::thread_pool	typeref:typename:size_t SPDLOG_INLINE
discard_counter_	include/spdlog/details/mpmc_blocking_q.h	/^    std::atomic<size_t> discard_counter_{0};$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:std::atomic<size_t>
discard_new	include/spdlog/async_logger.h	/^    discard_new      \/\/ Discard new message if the queue is full when trying to add new item.$/;"	e	enum:spdlog::async_overflow_policy
disconnect	src/mpris_media_player.cpp	/^void MprisMediaPlayer::disconnect() {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
disk_number	include/mpris_media_player.h	/^  int32_t disk_number;$/;"	m	struct:DBusMetadata	typeref:typename:int32_t
dispatcher	include/spdlog/fmt/bundled/chrono.h	/^    dispatcher(std::time_t t) : time_(t) {}$/;"	f	struct:gmtime::dispatcher
dispatcher	include/spdlog/fmt/bundled/chrono.h	/^    dispatcher(std::time_t t) : time_(t) {}$/;"	f	struct:localtime::dispatcher
dispatcher	include/spdlog/fmt/bundled/chrono.h	/^  struct dispatcher {$/;"	s	function:gmtime
dispatcher	include/spdlog/fmt/bundled/chrono.h	/^  struct dispatcher {$/;"	s	function:localtime
dist_sink	include/spdlog/sinks/dist_sink.h	/^    explicit dist_sink(std::vector<std::shared_ptr<sink>> sinks)$/;"	f	class:spdlog::sinks::dist_sink
dist_sink	include/spdlog/sinks/dist_sink.h	/^class dist_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
dist_sink_mt	include/spdlog/sinks/dist_sink.h	/^using dist_sink_mt = dist_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dist_sink<std::mutex>
dist_sink_st	include/spdlog/sinks/dist_sink.h	/^using dist_sink_st = dist_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dist_sink<details::null_mutex>
div_small_pow10_infos	include/spdlog/fmt/bundled/format-inl.h	/^} div_small_pow10_infos[] = {{10, 16}, {100, 16}};$/;"	v	namespace:detail::dragonbox	typeref:struct:detail::dragonbox::__anondc4b9cc20108[]
divide_by_10_to_kappa_plus_1	include/spdlog/fmt/bundled/format-inl.h	/^inline auto divide_by_10_to_kappa_plus_1(uint32_t n) noexcept -> uint32_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
divide_by_10_to_kappa_plus_1	include/spdlog/fmt/bundled/format-inl.h	/^inline auto divide_by_10_to_kappa_plus_1(uint64_t n) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
divisor	include/spdlog/fmt/bundled/format-inl.h	/^  uint32_t divisor;$/;"	m	struct:detail::dragonbox::__anondc4b9cc20108	typeref:typename:uint32_t
divmod_assign	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 auto divmod_assign(const bigint& divisor) -> int {$/;"	f	class:detail::bigint	typeref:typename:int
do_check_arg_id	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
do_count_digits	include/spdlog/fmt/bundled/format.h	/^FMT_INLINE auto do_count_digits(uint32_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
do_count_digits	include/spdlog/fmt/bundled/format.h	/^inline auto do_count_digits(uint64_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
do_format	include/spdlog/fmt/bundled/chrono.h	/^  auto do_format(const std::tm& tm, FormatContext& ctx,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
do_format	include/spdlog/fmt/bundled/ranges.h	/^  auto do_format(const tuple_join_view<Char, T...>& value, FormatContext& ctx,$/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
do_format	include/spdlog/fmt/bundled/ranges.h	/^  auto do_format(const tuple_join_view<Char, T...>&, FormatContext& ctx,$/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
do_map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto do_map(T& val) -> T& {$/;"	f	struct:detail::arg_mapper	typeref:typename:T &
do_map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto do_map(T&) -> unformattable {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable
do_parse	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto do_parse(ParseContext& ctx,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
do_parse_arg_id	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto do_parse_arg_id(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
do_put	include/spdlog/fmt/bundled/format-inl.h	/^FMT_API FMT_FUNC auto format_facet<std::locale>::do_put($/;"	f	class:format_facet::locale	typeref:typename:bool
do_throw	include/spdlog/fmt/bundled/format.h	/^template <typename Exception> inline void do_throw(const Exception& x) {$/;"	f	namespace:detail	typeref:typename:void
do_write	include/spdlog/fmt/bundled/chrono.h	/^inline void do_write(buffer<Char>& buf, const std::tm& time,$/;"	f	namespace:detail	typeref:typename:void
do_write_float	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto do_write_float(OutputIt out, const DecimalFP& f,$/;"	f	namespace:detail	typeref:typename:OutputIt
dodger_blue	include/spdlog/fmt/bundled/color.h	/^  dodger_blue = 0x1E90FF,              \/\/ rgb(30,144,255)$/;"	e	enum:color
double_bigit	include/spdlog/fmt/bundled/format.h	/^  using double_bigit = uint64_t;$/;"	t	class:detail::bigint	typeref:typename:uint64_t
double_type	include/spdlog/fmt/bundled/core.h	/^  double_type,$/;"	e	enum:detail::type
double_value	include/spdlog/fmt/bundled/core.h	/^    double double_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:double
dragon	include/spdlog/fmt/bundled/format.h	/^enum dragon {$/;"	g	namespace:detail
dragonbox	include/spdlog/fmt/bundled/format-inl.h	/^namespace dragonbox {$/;"	n	namespace:detail
dragonbox	include/spdlog/fmt/bundled/format.h	/^namespace dragonbox {$/;"	n	namespace:detail
drop	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::drop(const std::string &logger_name) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
drop	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void drop(const std::string &name) { details::registry::instance().drop(name); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
drop_all	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::drop_all() {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
drop_all	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void drop_all() { details::registry::instance().drop_all(); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
dump_backtrace	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::dump_backtrace() { dump_backtrace_(); }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
dump_backtrace	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void dump_backtrace() { default_logger_raw()->dump_backtrace(); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
dump_backtrace_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::dump_backtrace_() {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
dump_info	include/spdlog/fmt/bin_to_hex.h	/^    dump_info(It range_begin, It range_end, size_t size_per_line)$/;"	f	class:spdlog::details::dump_info
dump_info	include/spdlog/fmt/bin_to_hex.h	/^class dump_info {$/;"	c	namespace:spdlog::details
dup_filter_sink	include/spdlog/sinks/dup_filter_sink.h	/^    explicit dup_filter_sink(std::chrono::duration<Rep, Period> max_skip_duration,$/;"	f	class:spdlog::sinks::dup_filter_sink
dup_filter_sink	include/spdlog/sinks/dup_filter_sink.h	/^class dup_filter_sink : public dist_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
dup_filter_sink_mt	include/spdlog/sinks/dup_filter_sink.h	/^using dup_filter_sink_mt = dup_filter_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dup_filter_sink<std::mutex>
dup_filter_sink_st	include/spdlog/sinks/dup_filter_sink.h	/^using dup_filter_sink_st = dup_filter_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dup_filter_sink<details::null_mutex>
duplicate_sid	include/spdlog/sinks/win_eventlog_sink.h	/^    static sid_t duplicate_sid(PSID psid) {$/;"	f	struct:spdlog::sinks::win_eventlog::internal::sid_t	typeref:typename:sid_t
dynamic_arg_list	include/spdlog/fmt/bundled/args.h	/^class dynamic_arg_list {$/;"	c	namespace:detail
dynamic_args_	include/spdlog/fmt/bundled/args.h	/^  detail::dynamic_arg_list dynamic_args_;$/;"	m	class:dynamic_format_arg_store	typeref:typename:detail::dynamic_arg_list
dynamic_format_arg_store	include/spdlog/fmt/bundled/args.h	/^class dynamic_format_arg_store$/;"	c
dynamic_format_specs	include/spdlog/fmt/bundled/core.h	/^struct dynamic_format_specs : format_specs<Char> {$/;"	s	namespace:detail
dynamic_spec_id_handler	include/spdlog/fmt/bundled/core.h	/^template <typename Char> struct dynamic_spec_id_handler {$/;"	s	namespace:detail
e	include/spdlog/fmt/bundled/format.h	/^  int e;$/;"	m	struct:detail::basic_fp	typeref:typename:int
e_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit e_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::e_formatter
e_formatter	include/spdlog/pattern_formatter-inl.h	/^class e_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
edit_cache	build/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
elapsed	include/spdlog/stopwatch.h	/^    std::chrono::duration<double> elapsed() const {$/;"	f	class:spdlog::stopwatch	typeref:typename:std::chrono::duration<double>
elapsed_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit elapsed_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::elapsed_formatter
elapsed_formatter	include/spdlog/pattern_formatter-inl.h	/^class elapsed_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
elapsed_ms	include/spdlog/stopwatch.h	/^    std::chrono::milliseconds elapsed_ms() const {$/;"	f	class:spdlog::stopwatch	typeref:typename:std::chrono::milliseconds
emphasis	include/spdlog/fmt/bundled/color.h	/^enum class emphasis : uint8_t {$/;"	g	typeref:typename:uint8_t
emplace_arg	include/spdlog/fmt/bundled/args.h	/^  template <typename T> void emplace_arg(const T& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
emplace_arg	include/spdlog/fmt/bundled/args.h	/^  void emplace_arg(const detail::named_arg<char_type, T>& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
empty	include/spdlog/common.h	/^    SPDLOG_CONSTEXPR bool empty() const SPDLOG_NOEXCEPT { return line <= 0; }$/;"	f	struct:spdlog::source_loc	typeref:typename:SPDLOG_CONSTEXPR bool
empty	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE bool backtracer::empty() const {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE bool
empty	include/spdlog/details/circular_q.h	/^    bool empty() const { return tail_ == head_; }$/;"	f	class:spdlog::details::circular_q	typeref:typename:bool
ems	include/spdlog/fmt/bundled/color.h	/^  emphasis ems;$/;"	m	class:text_style	typeref:typename:emphasis
enable	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::enable(size_t size) {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE void
enable_backtrace	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::enable_backtrace(size_t n_messages) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
enable_backtrace	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::enable_backtrace(size_t n_messages) { tracer_.enable(n_messages); }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
enable_backtrace	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void enable_backtrace(size_t n_messages) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
enable_formatting_	include/spdlog/sinks/syslog_sink.h	/^    bool enable_formatting_ = false;$/;"	m	class:spdlog::sinks::syslog_sink	typeref:typename:bool
enable_formatting_	include/spdlog/sinks/systemd_sink.h	/^    bool enable_formatting_ = false;$/;"	m	class:spdlog::sinks::systemd_sink	typeref:typename:bool
enable_if_t	include/spdlog/common.h	/^using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	namespace:spdlog::details	typeref:typename:std::enable_if<B,T>::type
enable_if_t	include/spdlog/fmt/bundled/core.h	/^using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	typeref:typename:std::enable_if<B,T>::type
enabled	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE bool backtracer::enabled() const { return enabled_.load(std::memory_order_relaxed)/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE bool
enabled	include/spdlog/pattern_formatter.h	/^    bool enabled() const { return enabled_; }$/;"	f	struct:spdlog::details::padding_info	typeref:typename:bool
enabled_	include/spdlog/details/backtracer.h	/^    std::atomic<bool> enabled_{false};$/;"	m	class:spdlog::details::backtracer	typeref:typename:std::atomic<bool>
enabled_	include/spdlog/pattern_formatter.h	/^    bool enabled_ = false;$/;"	m	struct:spdlog::details::padding_info	typeref:typename:bool
encode_types	include/spdlog/fmt/bundled/core.h	/^constexpr auto encode_types() -> unsigned long long {$/;"	f	namespace:detail	typeref:typename:unsigned long long
encode_types	include/spdlog/fmt/bundled/core.h	/^template <typename> constexpr auto encode_types() -> unsigned long long {$/;"	f	namespace:detail	typeref:typename:unsigned long long
end	include/spdlog/fmt/bundled/chrono.h	/^  CodeUnit* end;$/;"	m	struct:detail::codecvt_result	typeref:typename:CodeUnit *
end	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR_CHAR_TRAITS auto end() const noexcept -> const Char* {$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR_CHAR_TRAITS auto
end	include/spdlog/fmt/bundled/compile.h	/^  size_t end;$/;"	m	struct:detail::parse_specs_result	typeref:typename:size_t
end	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE auto end() const noexcept -> const T* { return ptr_ + size_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_INLINE auto
end	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE auto end() noexcept -> T* { return ptr_ + size_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_INLINE auto
end	include/spdlog/fmt/bundled/core.h	/^  constexpr auto end() const noexcept -> iterator { return data_ + size_; }$/;"	f	class:basic_string_view	typeref:typename:auto
end	include/spdlog/fmt/bundled/core.h	/^  constexpr auto end() const noexcept -> iterator { return format_str_.end(); }$/;"	f	class:basic_format_parse_context	typeref:typename:auto
end	include/spdlog/fmt/bundled/format.h	/^  Iterator end;$/;"	m	struct:detail::format_decimal_result	typeref:typename:Iterator
end	include/spdlog/fmt/bundled/format.h	/^  Sentinel end;$/;"	m	struct:join_view	typeref:typename:Sentinel
end	include/spdlog/fmt/bundled/format.h	/^  const Char* end;$/;"	m	struct:detail::find_escape_result	typeref:typename:const Char *
end	include/spdlog/fmt/bundled/ranges.h	/^  auto end() const -> typename Container::const_iterator { return c.end(); }$/;"	f	struct:detail::all	typeref:typename:Container::const_iterator
end_	include/spdlog/fmt/bin_to_hex.h	/^    It begin_, end_;$/;"	m	class:spdlog::details::dump_info	typeref:typename:It
enqueue	include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue(T &&item) {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
enqueue_if_have_room	include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue_if_have_room(T &&item) {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
enqueue_nowait	include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue_nowait(T &&item) {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
enums	include/spdlog/fmt/bundled/format.h	/^namespace enums {$/;"	n
eol_	include/spdlog/pattern_formatter.h	/^    std::string eol_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::string
equal2	include/spdlog/fmt/bundled/format.h	/^inline auto equal2(const char* lhs, const char* rhs) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
equal2	include/spdlog/fmt/bundled/format.h	/^template <typename Char> auto equal2(const Char* lhs, const char* rhs) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
err	include/spdlog/common.h	/^    err = SPDLOG_LEVEL_ERROR,$/;"	e	enum:spdlog::level::level_enum
err_handler	include/spdlog/common.h	/^using err_handler = std::function<void(const std::string &err_msg)>;$/;"	t	namespace:spdlog
err_handler_	include/spdlog/details/registry.h	/^    err_handler err_handler_;$/;"	m	class:spdlog::details::registry	typeref:typename:err_handler
err_handler_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::err_handler_(const std::string &msg) {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
error	include/log.h	/^  void error(const std::string &msg) {$/;"	f	class:Log	typeref:typename:void
error	include/spdlog/logger.h	/^    void error(const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
error	include/spdlog/logger.h	/^    void error(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
error	include/spdlog/logger.h	/^    void error(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
error	include/spdlog/spdlog.h	/^inline void error(const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
error	include/spdlog/spdlog.h	/^inline void error(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
error	include/spdlog/spdlog.h	/^inline void error(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
error_handler	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto error_handler() -> detail::error_handler { return {}; }$/;"	f	class:basic_format_context	typeref:typename:detail::error_handler
error_handler	include/spdlog/fmt/bundled/core.h	/^struct error_handler {$/;"	s	namespace:detail
event_handlers_	include/spdlog/details/file_helper.h	/^    file_event_handlers event_handlers_;$/;"	m	class:spdlog::details::file_helper	typeref:typename:file_event_handlers
event_id_	include/spdlog/sinks/win_eventlog_sink.h	/^    DWORD event_id_;$/;"	m	class:spdlog::sinks::win_eventlog::win_eventlog_sink	typeref:typename:DWORD
event_log_handle	include/spdlog/sinks/win_eventlog_sink.h	/^    HANDLE event_log_handle() {$/;"	f	class:spdlog::sinks::win_eventlog::win_eventlog_sink	typeref:typename:HANDLE
eventlog	include/spdlog/sinks/win_eventlog_sink.h	/^struct eventlog {$/;"	s	namespace:spdlog::sinks::win_eventlog::internal
exchange	include/spdlog/details/null_mutex.h	/^    int exchange(int new_value, std::memory_order = std::memory_order_relaxed) {$/;"	f	struct:spdlog::details::null_atomic_int	typeref:typename:int
execute_base_method_func	src/mpris_media_player.cpp	/^void MprisMediaPlayer::execute_base_method_func(DBusMethodType type) {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
execute_base_property_func	src/mpris_media_player.cpp	/^int MprisMediaPlayer::execute_base_property_func(DBusGetSetType getset,$/;"	f	class:MprisMediaPlayer	typeref:typename:int
exp	include/spdlog/fmt/bundled/format.h	/^  exp,      \/\/ Exponent notation with the default precision of 6, e.g. 1.2e-3.$/;"	e	enum:detail::float_format
exp_	include/spdlog/fmt/bundled/format.h	/^  int exp_;$/;"	m	class:detail::bigint	typeref:typename:int
exp_lower	include/spdlog/fmt/bundled/core.h	/^  exp_lower,       \/\/ 'e'$/;"	e	enum:presentation_type
exp_upper	include/spdlog/fmt/bundled/core.h	/^  exp_upper,       \/\/ 'E'$/;"	e	enum:presentation_type
exponent	include/spdlog/fmt/bundled/format.h	/^  int exponent;$/;"	m	struct:detail::big_decimal_fp	typeref:typename:int
exponent	include/spdlog/fmt/bundled/format.h	/^  int exponent;$/;"	m	struct:detail::dragonbox::decimal_fp	typeref:typename:int
exponent_bias	include/spdlog/fmt/bundled/format.h	/^template <typename Float> constexpr auto exponent_bias() -> int {$/;"	f	namespace:detail	typeref:typename:int
exponent_bits	include/spdlog/fmt/bundled/format.h	/^  static const int exponent_bits = 11;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
exponent_bits	include/spdlog/fmt/bundled/format.h	/^  static const int exponent_bits = 15;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
exponent_bits	include/spdlog/fmt/bundled/format.h	/^  static const int exponent_bits = 8;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
exponent_mask	include/spdlog/fmt/bundled/format.h	/^constexpr auto exponent_mask() ->$/;"	f	namespace:detail	typeref:typename:dragonbox::float_info<Float>::carrier_uint
extract_key_vals_	include/spdlog/cfg/helpers-inl.h	/^inline std::unordered_map<std::string, std::string> extract_key_vals_(const std::string &str) {$/;"	f	namespace:spdlog::cfg::helpers	typeref:typename:std::unordered_map<std::string,std::string>
extract_kv_	include/spdlog/cfg/helpers-inl.h	/^inline std::pair<std::string, std::string> extract_kv_(char sep, const std::string &str) {$/;"	f	namespace:spdlog::cfg::helpers	typeref:typename:std::pair<std::string,std::string>
f	include/spdlog/fmt/bundled/format.h	/^  F f;$/;"	m	struct:detail::basic_fp	typeref:typename:F
f_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit f_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::f_formatter
f_formatter	include/spdlog/pattern_formatter-inl.h	/^class f_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
facet	include/spdlog/fmt/bundled/format-inl.h	/^  using facet = format_facet<std::locale>;$/;"	t	function:detail::write_loc	typeref:typename:format_facet<std::locale>
faint	include/spdlog/fmt/bundled/color.h	/^  faint = 1 << 1,$/;"	e	enum:emphasis
fallback	include/spdlog/fmt/bundled/chrono.h	/^    auto fallback(detail::null<>) -> bool {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
fallback	include/spdlog/fmt/bundled/chrono.h	/^    auto fallback(detail::null<>) -> bool {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
fallback	include/spdlog/fmt/bundled/chrono.h	/^    auto fallback(int res) -> bool { return res == 0; }$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
fallback	include/spdlog/fmt/bundled/chrono.h	/^    auto fallback(int res) -> bool { return res == 0; }$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
fallback_digit_grouping	include/spdlog/fmt/bundled/format.h	/^  constexpr fallback_digit_grouping(locale_ref, bool) {}$/;"	f	class:detail::fallback_digit_grouping
fallback_digit_grouping	include/spdlog/fmt/bundled/format.h	/^template <typename Char> class fallback_digit_grouping {$/;"	c	namespace:detail
fd	include/spdlog/details/tcp_client-windows.h	/^    SOCKET fd() const { return socket_; }$/;"	f	class:spdlog::details::tcp_client	typeref:typename:SOCKET
fd	include/spdlog/details/tcp_client.h	/^    int fd() const { return socket_; }$/;"	f	class:spdlog::details::tcp_client	typeref:typename:int
fd	include/spdlog/details/udp_client-windows.h	/^    SOCKET fd() const { return socket_; }$/;"	f	class:spdlog::details::udp_client	typeref:typename:SOCKET
fd	include/spdlog/details/udp_client.h	/^    int fd() const { return socket_; }$/;"	f	class:spdlog::details::udp_client	typeref:typename:int
fd_	include/spdlog/details/file_helper.h	/^    std::FILE *fd_{nullptr};$/;"	m	class:spdlog::details::file_helper	typeref:typename:std::FILE *
fd_	include/spdlog/fmt/bundled/os.h	/^  int fd_;  \/\/ File descriptor.$/;"	m	class:file	typeref:typename:int
fg	include/spdlog/fmt/bundled/color.h	/^FMT_CONSTEXPR inline auto fg(detail::color_type foreground) noexcept$/;"	f	typeref:typename:FMT_CONSTEXPR auto
field	include/spdlog/fmt/bundled/compile.h	/^template <typename Char, typename T, int N> struct field {$/;"	s	namespace:detail
field_type	include/spdlog/fmt/bundled/compile.h	/^struct field_type<T, enable_if_t<detail::is_named_arg<T>::value>> {$/;"	s	namespace:detail
field_type	include/spdlog/fmt/bundled/compile.h	/^template <typename T, typename Enable = void> struct field_type {$/;"	s	namespace:detail
file	include/spdlog/fmt/bundled/os.h	/^  explicit file(int fd) : fd_(fd) {}$/;"	f	class:file
file	include/spdlog/fmt/bundled/os.h	/^  file() noexcept : fd_(-1) {}$/;"	f	class:file
file	include/spdlog/fmt/bundled/os.h	/^  file(file&& other) noexcept : fd_(other.fd_) { other.fd_ = -1; }$/;"	f	class:file
file	include/spdlog/fmt/bundled/os.h	/^class FMT_API file {$/;"	c
file_	include/spdlog/fmt/bundled/os.h	/^  FILE* file_;$/;"	m	class:buffered_file	typeref:typename:FILE *
file_	include/spdlog/fmt/bundled/os.h	/^  file file_;$/;"	m	class:detail::file_buffer	typeref:typename:file
file_	include/spdlog/sinks/stdout_sinks.h	/^    FILE *file_;$/;"	m	class:spdlog::sinks::stdout_sink_base	typeref:typename:FILE *
file_access	include/spdlog/fmt/bundled/ostream.h	/^class file_access {$/;"	c	namespace:detail
file_access	include/spdlog/fmt/bundled/ostream.h	/^template class file_access<file_access_tag, std::filebuf,$/;"	v	namespace:detail	typeref:meta:class
file_access_tag	include/spdlog/fmt/bundled/ostream.h	/^struct file_access_tag {};$/;"	s	namespace:detail::__anonf3ea3ba40111
file_buffer	include/spdlog/fmt/bundled/os.h	/^class file_buffer final : public buffer<char> {$/;"	c	namespace:detail
file_event_handlers	include/spdlog/common.h	/^    file_event_handlers()$/;"	f	struct:spdlog::file_event_handlers
file_event_handlers	include/spdlog/common.h	/^struct file_event_handlers {$/;"	s	namespace:spdlog
file_helper	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE file_helper::file_helper(const file_event_handlers &event_handlers)$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE
file_helper	include/spdlog/details/file_helper.h	/^class SPDLOG_API file_helper {$/;"	c	namespace:spdlog::details
file_helper_	include/spdlog/sinks/basic_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::basic_file_sink	typeref:typename:details::file_helper
file_helper_	include/spdlog/sinks/daily_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:details::file_helper
file_helper_	include/spdlog/sinks/hourly_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::hourly_file_sink	typeref:typename:details::file_helper
file_helper_	include/spdlog/sinks/rotating_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:details::file_helper
filename	include/spdlog/common.h	/^    const char *filename{nullptr};$/;"	m	struct:spdlog::source_loc	typeref:typename:const char *
filename	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE const filename_t &file_helper::filename() const { return filename_; }$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE const filename_t &
filename	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE const filename_t &basic_file_sink<Mutex>::filename() const {$/;"	f	class:spdlog::sinks::basic_file_sink	typeref:typename:SPDLOG_INLINE const filename_t &
filename	include/spdlog/sinks/daily_file_sink.h	/^    filename_t filename() {$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:filename_t
filename	include/spdlog/sinks/hourly_file_sink.h	/^    filename_t filename() {$/;"	f	class:spdlog::sinks::hourly_file_sink	typeref:typename:filename_t
filename	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE filename_t rotating_file_sink<Mutex>::filename() {$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:SPDLOG_INLINE filename_t
filename_	include/spdlog/details/file_helper.h	/^    filename_t filename_;$/;"	m	class:spdlog::details::file_helper	typeref:typename:filename_t
filename_t	include/spdlog/common.h	/^using filename_t = std::string;$/;"	t	namespace:spdlog	typeref:typename:std::string
filename_t	include/spdlog/common.h	/^using filename_t = std::wstring;$/;"	t	namespace:spdlog	typeref:typename:std::wstring
filename_to_str	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE std::string filename_to_str(const filename_t &filename) { return filename; }$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE std::string
filename_to_str	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE std::string filename_to_str(const filename_t &filename) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE std::string
filenames_q_	include/spdlog/sinks/daily_file_sink.h	/^    details::circular_q<filename_t> filenames_q_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:details::circular_q<filename_t>
filenames_q_	include/spdlog/sinks/hourly_file_sink.h	/^    details::circular_q<filename_t> filenames_q_;$/;"	m	class:spdlog::sinks::hourly_file_sink	typeref:typename:details::circular_q<filename_t>
filesize	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE size_t filesize(FILE *f) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE size_t
fill	include/spdlog/fmt/bundled/core.h	/^  detail::fill_t<Char> fill;$/;"	m	struct:format_specs	typeref:typename:detail::fill_t<Char>
fill	include/spdlog/fmt/bundled/format.h	/^FMT_NOINLINE FMT_CONSTEXPR auto fill(OutputIt it, size_t n,$/;"	f	namespace:detail	typeref:typename:OutputIt
fill_	include/spdlog/fmt/bundled/format.h	/^  detail::fill_t<char> fill_;$/;"	m	struct:nested_formatter	typeref:typename:detail::fill_t<char>
fill_n	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto fill_n(OutputIt out, Size count, const T& value)$/;"	f	namespace:detail	typeref:typename:OutputIt
fill_n	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto fill_n(T* out, Size count, char value) -> T* {$/;"	f	namespace:detail	typeref:typename:T *
fill_t	include/spdlog/fmt/bundled/core.h	/^template <typename Char> struct fill_t {$/;"	s	namespace:detail
filter_	include/spdlog/sinks/dup_filter_sink.h	/^    bool filter_(const details::log_msg &msg) {$/;"	f	class:spdlog::sinks::dup_filter_sink	typeref:typename:bool
find	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto find(Ptr first, Ptr last, T value, Ptr& out) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
find	include/spdlog/fmt/bundled/core.h	/^inline auto find<false, char>(const char* first, const char* last, char value,$/;"	f	namespace:detail	typeref:typename:bool
find_escape	include/spdlog/fmt/bundled/format.h	/^auto find_escape(const Char* begin, const Char* end)$/;"	f	namespace:detail	typeref:typename:find_escape_result<Char>
find_escape	include/spdlog/fmt/bundled/format.h	/^inline auto find_escape(const char* begin, const char* end)$/;"	f	namespace:detail	typeref:typename:find_escape_result<char>
find_escape_result	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct find_escape_result {$/;"	s	namespace:detail
fire_brick	include/spdlog/fmt/bundled/color.h	/^  fire_brick = 0xB22222,               \/\/ rgb(178,34,34)$/;"	e	enum:color
first	include/spdlog/fmt/bundled/compile.h	/^auto first(const T& value, const Tail&...) -> const T& {$/;"	f	namespace:detail	typeref:typename:const T &
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  static auto fits_in_int(bool) -> bool { return true; }$/;"	f	struct:detail::int_checker	typeref:typename:bool
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  static auto fits_in_int(int) -> bool { return true; }$/;"	f	struct:detail::int_checker	typeref:typename:bool
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  template <typename T> static auto fits_in_int(T value) -> bool {$/;"	f	struct:detail::int_checker	typeref:typename:bool
fixed	include/spdlog/fmt/bundled/format.h	/^  fixed = 4,$/;"	e	enum:detail::dragon
fixed	include/spdlog/fmt/bundled/format.h	/^  fixed,    \/\/ Fixed point with the default precision of 6, e.g. 0.0012.$/;"	e	enum:detail::float_format
fixed_buffer_traits	include/spdlog/fmt/bundled/core.h	/^  explicit fixed_buffer_traits(size_t limit) : limit_(limit) {}$/;"	f	class:detail::fixed_buffer_traits
fixed_buffer_traits	include/spdlog/fmt/bundled/core.h	/^class fixed_buffer_traits {$/;"	c	namespace:detail
fixed_lower	include/spdlog/fmt/bundled/core.h	/^  fixed_lower,     \/\/ 'f'$/;"	e	enum:presentation_type
fixed_string	include/spdlog/fmt/bundled/format.h	/^  constexpr fixed_string(const Char (&str)[N]) {$/;"	f	struct:detail_exported::fixed_string
fixed_string	include/spdlog/fmt/bundled/format.h	/^template <typename Char, size_t N> struct fixed_string {$/;"	s	namespace:detail_exported
fixed_upper	include/spdlog/fmt/bundled/core.h	/^  fixed_upper,     \/\/ 'F'$/;"	e	enum:presentation_type
fixup	include/spdlog/fmt/bundled/format.h	/^  fixup = 2,  \/\/ Run fixup to correct exp10 which can be off by one.$/;"	e	enum:detail::dragon
flag_formatter	include/spdlog/pattern_formatter.h	/^    explicit flag_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::flag_formatter
flag_formatter	include/spdlog/pattern_formatter.h	/^class SPDLOG_API flag_formatter {$/;"	c	namespace:spdlog::details
float128	include/spdlog/fmt/bundled/format.h	/^using float128 = __float128;$/;"	t	namespace:detail	typeref:typename:__float128
float128	include/spdlog/fmt/bundled/format.h	/^using float128 = void;$/;"	t	namespace:detail	typeref:typename:void
float_format	include/spdlog/fmt/bundled/format.h	/^enum class float_format : unsigned char {$/;"	g	namespace:detail	typeref:typename:unsigned char
float_info	include/spdlog/fmt/bundled/format.h	/^struct float_info<T, enable_if_t<is_double_double<T>::value>> {$/;"	s	namespace:detail::dragonbox
float_info	include/spdlog/fmt/bundled/format.h	/^struct float_info<T, enable_if_t<std::numeric_limits<T>::digits == 64 ||$/;"	s	namespace:detail::dragonbox
float_info	include/spdlog/fmt/bundled/format.h	/^template <> struct float_info<double> {$/;"	s	namespace:detail::dragonbox
float_info	include/spdlog/fmt/bundled/format.h	/^template <> struct float_info<float> {$/;"	s	namespace:detail::dragonbox
float_set	include/spdlog/fmt/bundled/core.h	/^  float_set = set(type::float_type) | set(type::double_type) |$/;"	e	enum:detail::__anon0accc0920103
float_specs	include/spdlog/fmt/bundled/format.h	/^struct float_specs {$/;"	s	namespace:detail
float_type	include/spdlog/fmt/bundled/core.h	/^  float_type,$/;"	e	enum:detail::type
float_uint	include/spdlog/fmt/bundled/format.h	/^  using float_uint = typename dragonbox::float_info<Float>::carrier_uint;$/;"	t	function:detail::exponent_mask	typeref:typename:dragonbox::float_info<Float>::carrier_uint
float_value	include/spdlog/fmt/bundled/core.h	/^    float float_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:float
floaty	include/spdlog/fmt/bundled/format.h	/^  using floaty = conditional_t<std::is_same<T, long double>::value, double, T>;$/;"	t	function:detail::write	typeref:typename:conditional_t<std::is_same<T,long double>::value,double,T>
floaty_uint	include/spdlog/fmt/bundled/format.h	/^  using floaty_uint = typename dragonbox::float_info<floaty>::carrier_uint;$/;"	t	function:detail::write	typeref:typename:dragonbox::float_info<floaty>::carrier_uint
floor_log10_pow2	include/spdlog/fmt/bundled/format.h	/^inline auto floor_log10_pow2(int e) noexcept -> int {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
floor_log10_pow2_minus_log10_4_over_3	include/spdlog/fmt/bundled/format-inl.h	/^inline auto floor_log10_pow2_minus_log10_4_over_3(int e) noexcept -> int {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
floor_log2_pow10	include/spdlog/fmt/bundled/format.h	/^inline auto floor_log2_pow10(int e) noexcept -> int {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
floral_white	include/spdlog/fmt/bundled/color.h	/^  floral_white = 0xFFFAF0,             \/\/ rgb(255,250,240)$/;"	e	enum:color
flush	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::flush() {$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE void
flush	include/spdlog/details/thread_pool.h	/^enum class async_msg_type { log, flush, terminate };$/;"	e	enum:spdlog::details::async_msg_type
flush	include/spdlog/fmt/bundled/core.h	/^  void flush() {$/;"	f	class:detail::iterator_buffer	typeref:typename:void
flush	include/spdlog/fmt/bundled/os.h	/^  void flush() { buffer_.flush(); }$/;"	f	class:ostream	typeref:typename:void
flush	include/spdlog/fmt/bundled/os.h	/^  void flush() {$/;"	f	class:detail::file_buffer	typeref:typename:void
flush	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::flush() { flush_(); }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
flush	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::flush() {$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
flush	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::flush() {$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void SPDLOG_INLINE
flush	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::flush() {$/;"	f	class:spdlog::sinks::stdout_sink_base	typeref:typename:SPDLOG_INLINE void
flush	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::flush() {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
flush_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::flush_(){SPDLOG_TRY{auto pool_ptr = thread_pool_.lock()/;"	f	class:spdlog::async_logger	typeref:typename:SPDLOG_INLINE void
flush_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::flush_() {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
flush_	include/spdlog/sinks/android_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:void
flush_	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE void basic_file_sink<Mutex>::flush_() {$/;"	f	class:spdlog::sinks::basic_file_sink	typeref:typename:SPDLOG_INLINE void
flush_	include/spdlog/sinks/callback_sink.h	/^    void flush_() override{};$/;"	f	class:spdlog::sinks::callback_sink	typeref:typename:void
flush_	include/spdlog/sinks/daily_file_sink.h	/^    void flush_() override { file_helper_.flush(); }$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:void
flush_	include/spdlog/sinks/dist_sink.h	/^    void flush_() override {$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
flush_	include/spdlog/sinks/hourly_file_sink.h	/^    void flush_() override { file_helper_.flush(); }$/;"	f	class:spdlog::sinks::hourly_file_sink	typeref:typename:void
flush_	include/spdlog/sinks/kafka_sink.h	/^    void flush_() override { producer_->flush(config_.flush_timeout_ms); }$/;"	f	class:spdlog::sinks::kafka_sink	typeref:typename:void
flush_	include/spdlog/sinks/mongo_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::mongo_sink	typeref:typename:void
flush_	include/spdlog/sinks/msvc_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::msvc_sink	typeref:typename:void
flush_	include/spdlog/sinks/null_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::null_sink	typeref:typename:void
flush_	include/spdlog/sinks/ostream_sink.h	/^    void flush_() override { ostream_.flush(); }$/;"	f	class:spdlog::sinks::ostream_sink	typeref:typename:void
flush_	include/spdlog/sinks/qt_sinks.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::qt_color_sink	typeref:typename:void
flush_	include/spdlog/sinks/qt_sinks.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::qt_sink	typeref:typename:void
flush_	include/spdlog/sinks/ringbuffer_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::ringbuffer_sink	typeref:typename:void
flush_	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE void rotating_file_sink<Mutex>::flush_() {$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:SPDLOG_INLINE void
flush_	include/spdlog/sinks/syslog_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:void
flush_	include/spdlog/sinks/systemd_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::systemd_sink	typeref:typename:void
flush_	include/spdlog/sinks/tcp_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::tcp_sink	typeref:typename:void
flush_	include/spdlog/sinks/udp_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::udp_sink	typeref:typename:void
flush_	include/spdlog/sinks/win_eventlog_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::win_eventlog::win_eventlog_sink	typeref:typename:void
flush_all	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::flush_all() {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
flush_every	include/spdlog/details/registry.h	/^    void flush_every(std::chrono::duration<Rep, Period> interval) {$/;"	f	class:spdlog::details::registry	typeref:typename:void
flush_every	include/spdlog/spdlog.h	/^inline void flush_every(std::chrono::duration<Rep, Period> interval) {$/;"	f	namespace:spdlog	typeref:typename:void
flush_level	include/spdlog/logger-inl.h	/^SPDLOG_INLINE level::level_enum logger::flush_level() const {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE level::level_enum
flush_level_	include/spdlog/details/registry.h	/^    level::level_enum flush_level_ = level::off;$/;"	m	class:spdlog::details::registry	typeref:typename:level::level_enum
flush_level_	include/spdlog/logger.h	/^    spdlog::level_t flush_level_{level::off};$/;"	m	class:spdlog::logger	typeref:typename:spdlog::level_t
flush_on	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::flush_on(level::level_enum log_level) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
flush_on	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::flush_on(level::level_enum log_level) { flush_level_.store(log_level)/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
flush_on	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void flush_on(level::level_enum log_level) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
flush_promise	include/spdlog/details/thread_pool.h	/^    std::promise<void> flush_promise;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:std::promise<void>
flush_timeout_ms	include/spdlog/sinks/kafka_sink.h	/^    int32_t flush_timeout_ms = 1000;$/;"	m	struct:spdlog::sinks::kafka_sink_config	typeref:typename:int32_t
flusher_mutex_	include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::mutex
fmt	include/spdlog/fmt/bundled/compile.h	/^  formatter<T, Char> fmt;$/;"	m	struct:detail::parse_specs_result	typeref:typename:formatter<T,Char>
fmt	include/spdlog/fmt/bundled/compile.h	/^  formatter<T, Char> fmt;$/;"	m	struct:detail::spec_field	typeref:typename:formatter<T,Char>
fmt	include/spdlog/fmt/bundled/format.h	/^  const formatter<T>* fmt;$/;"	m	struct:nested_view	typeref:typename:const formatter<T> *
fmt_duration_cast	include/spdlog/fmt/bundled/chrono.h	/^auto fmt_duration_cast(std::chrono::duration<FromRep, FromPeriod> from) -> To {$/;"	f	namespace:detail	typeref:typename:To
fmt_helper	include/spdlog/details/fmt_helper.h	/^namespace fmt_helper {$/;"	n	namespace:spdlog::details
fmt_runtime_string	include/spdlog/common.h	/^using fmt_runtime_string = fmt::runtime_format_string<Char>;$/;"	t	namespace:spdlog	typeref:typename:fmt::runtime_format_string<Char>
folder_seps	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_seps[] = SPDLOG_FOLDER_SEPS;$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char[]
folder_seps_filename	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const filename_t::value_type folder_seps_filename[] =$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const filename_t::value_type[]
fopen_s	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE bool fopen_s(FILE **fp, const filename_t &filename, const filename_t &mode) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE bool
for_each	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR void for_each(Tuple&& t, F&& f) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
for_each	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR void for_each(index_sequence<Is...>, Tuple&& t, F&& f) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
for_each2	include/spdlog/fmt/bundled/ranges.h	/^void for_each2(Tuple1&& t1, Tuple2&& t2, F&& f) {$/;"	f	namespace:detail	typeref:typename:void
for_each2	include/spdlog/fmt/bundled/ranges.h	/^void for_each2(index_sequence<Is...>, Tuple1&& t1, Tuple2&& t2, F&& f) {$/;"	f	namespace:detail	typeref:typename:void
for_each_codepoint	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void for_each_codepoint(string_view s, F f) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
force_flush_	include/spdlog/sinks/ostream_sink.h	/^    bool force_flush_;$/;"	m	class:spdlog::sinks::ostream_sink	typeref:typename:bool
foreach_pop	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::foreach_pop(std::function<void(const details::log_msg &)> fun) {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE void
foreground_color	include/spdlog/fmt/bundled/color.h	/^  detail::color_type foreground_color;$/;"	m	class:text_style	typeref:typename:detail::color_type
forest_green	include/spdlog/fmt/bundled/color.h	/^  forest_green = 0x228B22,             \/\/ rgb(34,139,34)$/;"	e	enum:color
format	include/spdlog/fmt/bin_to_hex.h	/^    auto format(const spdlog::details::dump_info<Container> &the_range, FormatContext &ctx) cons/;"	f	struct:std::formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/chrono.h	/^  auto format(const std::tm& tm, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/chrono.h	/^  auto format(std::chrono::duration<Rep, Period> d, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/chrono.h	/^  auto format(std::chrono::local_time<Duration> val, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/chrono.h	/^  auto format(std::chrono::time_point<std::chrono::system_clock, Duration> val,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/chrono.h	/^  auto format(std::chrono::time_point<std::chrono::utc_clock, Duration> val,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/chrono.h	/^  auto format(weekday wd, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/color.h	/^  auto format(const detail::styled_arg<T>& arg, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/color.h	/^inline auto format(const text_style& ts, const S& format_str,$/;"	f	typeref:typename:std::basic_string<Char>
format	include/spdlog/fmt/bundled/compile.h	/^  constexpr FMT_INLINE OutputIt format(OutputIt out,$/;"	f	struct:detail::spec_field	typeref:typename:FMT_INLINE OutputIt
format	include/spdlog/fmt/bundled/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:detail::concat	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:detail::field	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:detail::runtime_named_field	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&...) const {$/;"	f	struct:detail::code_unit	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&...) const {$/;"	f	struct:detail::text	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/compile.h	/^FMT_INLINE std::basic_string<Char> format(const CompiledFormat& cf,$/;"	f	typeref:typename:FMT_BEGIN_EXPORT FMT_INLINE std::basic_string<Char>
format	include/spdlog/fmt/bundled/compile.h	/^FMT_INLINE std::basic_string<typename S::char_type> format(const S&,$/;"	f	typeref:typename:FMT_INLINE std::basic_string<typename S::char_type>
format	include/spdlog/fmt/bundled/core.h	/^    void format(typename Context::parse_context_type& parse_ctx,$/;"	f	class:basic_format_arg::handle	typeref:typename:void
format	include/spdlog/fmt/bundled/core.h	/^  void (*format)(void* arg, parse_context& parse_ctx, Context& ctx);$/;"	m	struct:detail::custom_value	typeref:typename:void (*)(void * arg,parse_context & parse_ctx,Context & ctx)
format	include/spdlog/fmt/bundled/core.h	/^FMT_NODISCARD FMT_INLINE auto format(format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::string
format	include/spdlog/fmt/bundled/format-inl.h	/^  auto format(const detail::bigint& n, format_context& ctx) const$/;"	f	struct:formatter	typeref:typename:format_context::iterator
format	include/spdlog/fmt/bundled/format.h	/^                      detail::type::custom_type>>::format(const T& val,$/;"	f	class:formatter::type_constant::value::type::custom_type	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/format.h	/^  auto format(bytes b, FormatContext& ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/format.h	/^  auto format(const T& value, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/format.h	/^  auto format(const join_view<It, Sentinel, Char>& value,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/format.h	/^  auto format(group_digits_view<T> t, FormatContext& ctx)$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/format.h	/^  auto format(nested_view<T> view, format_context& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/format.h	/^  float_format format : 8;$/;"	m	struct:detail::float_specs	typeref:typename:float_format:8
format	include/spdlog/fmt/bundled/format.h	/^inline auto format(const Locale& loc, format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::string
format	include/spdlog/fmt/bundled/ostream.h	/^  auto format(const T& value, basic_format_context<OutputIt, Char>& ctx) const$/;"	f	struct:basic_ostream_formatter	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/ostream.h	/^  auto format(detail::streamed_view<T> view,$/;"	f	struct:formatter	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/ranges.h	/^  auto format(R&& range, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:range_formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/ranges.h	/^  auto format(const T& t, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/ranges.h	/^  auto format(const Tuple& value, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/ranges.h	/^  auto format(const tuple_join_view<Char, T...>& value,$/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
format	include/spdlog/fmt/bundled/ranges.h	/^  auto format(range_type& range, FormatContext& ctx) const$/;"	f	struct:detail::range_default_formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  FMT_CONSTEXPR auto format(const BitRef& v, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  FMT_CONSTEXPR auto format(const std::error_code& ec, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const Variant& value, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::atomic<T>& v, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::atomic_flag& v, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::bitset<N>& bs, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::exception& ex,$/;"	f	struct:formatter	typeref:typename:OutputIt
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::filesystem::path& p, FormatContext& ctx) const {$/;"	f	struct:formatter	typeref:typename:auto
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::monostate&, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::optional<T>& opt, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/std.h	/^  auto format(const std::source_location& loc, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	include/spdlog/fmt/bundled/xchar.h	/^auto format(const S& format_str, T&&... args) -> std::basic_string<Char> {$/;"	f	typeref:typename:std::basic_string<Char>
format	include/spdlog/fmt/bundled/xchar.h	/^auto format(wformat_string<T...> fmt, T&&... args) -> std::wstring {$/;"	f	typeref:typename:std::wstring
format	include/spdlog/fmt/bundled/xchar.h	/^inline auto format(const Locale& loc, const S& format_str, T&&... args)$/;"	f	typeref:typename:std::basic_string<Char>
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::aggregate_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::ch_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::mdc_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::pid_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::A_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::B_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::C_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::D_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::H_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::I_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::M_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::R_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::S_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::T_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::Y_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::a_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::b_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::c_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::d_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::m_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::p_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &, const std::tm &tm_time, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::r_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::E_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::F_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::color_start_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::color_stop_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::e_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::elapsed_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::f_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::level_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::name_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::short_filename_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::short_level_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::source_filename_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::source_funcname_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::source_linenum_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::source_location_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::t_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &, memory_buf_t &dest) override {$/;"	f	class:spdlog::details::v_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &tm_time, memory_buf_t &dest) overrid/;"	f	class:spdlog::details::full_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^    void format(const details::log_msg &msg, const std::tm &tm_time, memory_buf_t &dest) overrid/;"	f	class:spdlog::details::z_formatter	typeref:typename:void
format	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::format(const details::log_msg &msg, memory_buf_t &dest) {$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE void
format	include/spdlog/sinks/win_eventlog_sink.h	/^    static std::string format(std::string const &user_message, DWORD error_code = GetLastError()/;"	f	struct:spdlog::sinks::win_eventlog::internal::win32_error	typeref:typename:std::string
format	include/spdlog/stopwatch.h	/^    auto format(const spdlog::stopwatch &sw, FormatContext &ctx) const -> decltype(ctx.out()) {$/;"	f	struct:std::formatter	typeref:typename:decltype(ctx.out ())
format_arg	include/spdlog/fmt/bundled/core.h	/^  using format_arg = basic_format_arg<Context>;$/;"	t	class:basic_format_args	typeref:typename:basic_format_arg<Context>
format_arg	include/spdlog/fmt/bundled/core.h	/^  using format_arg = basic_format_arg<basic_format_context>;$/;"	t	class:basic_format_context	typeref:typename:basic_format_arg<basic_format_context>
format_arg_store	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE format_arg_store(T&... args)$/;"	f	class:format_arg_store	typeref:typename:FMT_CONSTEXPR FMT_INLINE
format_arg_store	include/spdlog/fmt/bundled/core.h	/^class format_arg_store$/;"	c
format_args	include/spdlog/fmt/bundled/core.h	/^  using format_args = basic_format_args<basic_format_context>;$/;"	t	class:basic_format_context	typeref:typename:basic_format_args<basic_format_context>
format_args	include/spdlog/fmt/bundled/core.h	/^FMT_EXPORT using format_args = basic_format_args<format_context>;$/;"	t	typeref:typename:basic_format_args<format_context>
format_as	include/spdlog/fmt/bundled/core.h	/^inline auto format_as(T b) -> unsigned char {$/;"	f	typeref:typename:unsigned char
format_as	include/spdlog/fmt/bundled/format.h	/^constexpr auto format_as(Enum e) noexcept -> underlying_t<Enum> {$/;"	f	namespace:enums	typeref:typename:auto
format_as_result	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct format_as_result {$/;"	s	namespace:detail
format_as_t	include/spdlog/fmt/bundled/core.h	/^template <typename T> using format_as_t = typename format_as_result<T>::type;$/;"	t	namespace:detail	typeref:typename:format_as_result<T>::type
format_context	include/spdlog/fmt/bundled/core.h	/^using format_context = buffer_context<char>;$/;"	t	typeref:typename:buffer_context<char>
format_custom	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE auto format_custom(const char_type* parse_begin,$/;"	f	class:basic_format_arg	typeref:typename:bool
format_custom_arg	include/spdlog/fmt/bundled/core.h	/^  static void format_custom_arg(void* arg,$/;"	f	class:detail::value	typeref:typename:void
format_decimal	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline auto format_decimal(Iterator out, UInt value, int size)$/;"	f	namespace:detail	typeref:typename:format_decimal_result<Iterator>
format_decimal	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto format_decimal(Char* out, UInt value, int size)$/;"	f	namespace:detail	typeref:typename:format_decimal_result<Char * >
format_decimal_result	include/spdlog/fmt/bundled/format.h	/^template <typename Iterator> struct format_decimal_result {$/;"	s	namespace:detail
format_dragon	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 inline void format_dragon(basic_fp<uint128_t> value,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 void
format_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^auto format_duration_unit(OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
format_duration_value	include/spdlog/fmt/bundled/chrono.h	/^auto format_duration_value(OutputIt out, Rep val, int precision) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
format_duration_value	include/spdlog/fmt/bundled/chrono.h	/^auto format_duration_value(OutputIt out, Rep val, int) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
format_error	include/spdlog/fmt/bundled/format.h	/^class FMT_SO_VISIBILITY("default") format_error : public std::runtime_error {$/;"	c
format_error_code	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void format_error_code(detail::buffer<char>& out, int error_code,$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
format_facet	include/spdlog/fmt/bundled/format-inl.h	/^template <typename Locale> format_facet<Locale>::format_facet(Locale& loc) {$/;"	f	class:format_facet
format_facet	include/spdlog/fmt/bundled/format.h	/^  explicit format_facet(string_view sep = "",$/;"	f	class:format_facet
format_facet	include/spdlog/fmt/bundled/format.h	/^template <typename Locale> class format_facet : public Locale::facet {$/;"	c
format_float	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto format_float(Float value, int precision, float_specs specs,$/;"	f	namespace:detail	typeref:typename:int
format_func	include/spdlog/fmt/bundled/format.h	/^using format_func = void (*)(detail::buffer<char>&, int, const char*);$/;"	t	namespace:detail
format_handler	include/spdlog/fmt/bundled/format.h	/^    format_handler(buffer_appender<Char> p_out, basic_string_view<Char> str,$/;"	f	struct:detail::vformat_to::format_handler
format_handler	include/spdlog/fmt/bundled/format.h	/^  struct format_handler : error_handler {$/;"	s	function:detail::vformat_to
format_hexfloat	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 void format_hexfloat(Float value, int precision,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 void
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(int value) : str_(format_signed(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long long value) : str_(format_signed(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long value) : str_(format_signed(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long long value)$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long value) : str_(format_unsigned(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned value) : str_(format_unsigned(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^class format_int {$/;"	c
format_localized	include/spdlog/fmt/bundled/chrono.h	/^  void format_localized(char format, char modifier = 0) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_mdc	include/spdlog/pattern_formatter-inl.h	/^    void format_mdc(const mdc::mdc_map_t &mdc_map, memory_buf_t &dest) {$/;"	f	class:spdlog::details::mdc_formatter	typeref:typename:void
format_parse_context	include/spdlog/fmt/bundled/core.h	/^using format_parse_context = basic_format_parse_context<char>;$/;"	t	typeref:typename:basic_format_parse_context<char>
format_signed	include/spdlog/fmt/bundled/format.h	/^  template <typename Int> auto format_signed(Int value) -> char* {$/;"	f	class:format_int	typeref:typename:char *
format_specs	include/spdlog/fmt/bundled/core.h	/^  constexpr format_specs()$/;"	f	struct:format_specs
format_specs	include/spdlog/fmt/bundled/core.h	/^template <typename Char = char> struct format_specs {$/;"	s
format_str_	include/spdlog/fmt/bundled/chrono.h	/^  basic_string_view<Char> format_str_;$/;"	m	struct:formatter	typeref:typename:basic_string_view<Char>
format_str_	include/spdlog/fmt/bundled/core.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:basic_format_parse_context	typeref:typename:basic_string_view<Char>
format_string	include/spdlog/fmt/bundled/core.h	/^template <typename...> using format_string = string_view;$/;"	t	typeref:typename:string_view
format_string	include/spdlog/fmt/bundled/core.h	/^using format_string = basic_format_string<char, type_identity_t<Args>...>;$/;"	t	typeref:typename:basic_format_string<char,type_identity_t<Args>...>
format_string_checker	include/spdlog/fmt/bundled/core.h	/^  explicit FMT_CONSTEXPR format_string_checker(basic_string_view<Char> fmt)$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_CONSTEXPR
format_string_checker	include/spdlog/fmt/bundled/core.h	/^template <typename Char, typename... Args> class format_string_checker {$/;"	c	namespace:detail
format_string_t	include/spdlog/common.h	/^using format_string_t = fmt::format_string<Args...>;$/;"	t	namespace:spdlog	typeref:typename:fmt::format_string<Args...>
format_string_t	include/spdlog/common.h	/^using format_string_t = std::format_string<Args...>;$/;"	t	namespace:spdlog	typeref:typename:std::format_string<Args...>
format_system_error	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void format_system_error(detail::buffer<char>& out, int error_code,$/;"	f	typeref:typename:FMT_FUNC void
format_tm	include/spdlog/fmt/bundled/chrono.h	/^  void format_tm(const tm& time, Callback cb, Args... args) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
format_to	include/spdlog/fmt/bundled/color.h	/^inline auto format_to(OutputIt out, const text_style& ts, const S& format_str,$/;"	f	typeref:typename:std::enable_if<enable,OutputIt>::type
format_to	include/spdlog/fmt/bundled/compile.h	/^FMT_CONSTEXPR OutputIt format_to(OutputIt out, const S&, Args&&... args) {$/;"	f	typeref:typename:FMT_CONSTEXPR OutputIt
format_to	include/spdlog/fmt/bundled/compile.h	/^constexpr FMT_INLINE OutputIt format_to(OutputIt out, const CompiledFormat& cf,$/;"	f	typeref:typename:FMT_INLINE OutputIt
format_to	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE auto format_to(OutputIt out, format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:OutputIt
format_to	include/spdlog/fmt/bundled/format.h	/^FMT_INLINE auto format_to(OutputIt out, const Locale& loc,$/;"	f	typeref:typename:OutputIt
format_to	include/spdlog/fmt/bundled/xchar.h	/^inline auto format_to(OutputIt out, const Locale& loc, const S& format_str,$/;"	f	typeref:typename:std::enable_if<enable,OutputIt>::type
format_to	include/spdlog/fmt/bundled/xchar.h	/^inline auto format_to(OutputIt out, const S& fmt, T&&... args) -> OutputIt {$/;"	f	typeref:typename:OutputIt
format_to_n	include/spdlog/fmt/bundled/compile.h	/^auto format_to_n(OutputIt out, size_t n, const S& format_str, Args&&... args)$/;"	f	typeref:typename:format_to_n_result<OutputIt>
format_to_n	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE auto format_to_n(OutputIt out, size_t n, format_string<T...> fmt,$/;"	f	typeref:typename:format_to_n_result<OutputIt>
format_to_n	include/spdlog/fmt/bundled/xchar.h	/^inline auto format_to_n(OutputIt out, size_t n, const S& fmt, T&&... args)$/;"	f	typeref:typename:format_to_n_result<OutputIt>
format_to_n_result	include/spdlog/fmt/bundled/core.h	/^template <typename OutputIt> struct format_to_n_result {$/;"	s
format_tuple_element	include/spdlog/fmt/bundled/ranges.h	/^template <typename FormatContext> struct format_tuple_element {$/;"	s	namespace:detail
format_tz_name_impl	include/spdlog/fmt/bundled/chrono.h	/^  void format_tz_name_impl(const T& tm) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_tz_name_impl	include/spdlog/fmt/bundled/chrono.h	/^  void format_tz_name_impl(const T&) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_uint	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto format_uint(Char* buffer, UInt value, int num_digits,$/;"	f	namespace:detail	typeref:typename:Char *
format_uint	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline auto format_uint(It out, UInt value, int num_digits,$/;"	f	namespace:detail	typeref:typename:It
format_unsigned	include/spdlog/fmt/bundled/format.h	/^  template <typename UInt> auto format_unsigned(UInt value) -> char* {$/;"	f	class:format_int	typeref:typename:char *
format_utc_offset_impl	include/spdlog/fmt/bundled/chrono.h	/^  void format_utc_offset_impl(const T& tm, numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_value	include/spdlog/fmt/bundled/ostream.h	/^void format_value(buffer<Char>& buf, const T& value) {$/;"	f	namespace:detail	typeref:typename:void
formatbuf	include/spdlog/fmt/bundled/ostream.h	/^  explicit formatbuf(buffer<char_type>& buf) : buffer_(buf) {}$/;"	f	class:detail::formatbuf
formatbuf	include/spdlog/fmt/bundled/ostream.h	/^template <typename Streambuf> class formatbuf : public Streambuf {$/;"	c	namespace:detail
formattable	include/spdlog/fmt/bundled/core.h	/^  struct formattable : bool_constant<has_const_formatter<U, Context>() ||$/;"	s	struct:detail::arg_mapper
formatted_size	include/spdlog/fmt/bundled/compile.h	/^FMT_CONSTEXPR20 auto formatted_size(const S& format_str, const Args&... args)$/;"	f	typeref:typename:size_t
formatted_size	include/spdlog/fmt/bundled/core.h	/^FMT_NODISCARD FMT_INLINE auto formatted_size(format_string<T...> fmt,$/;"	f	typeref:typename:size_t
formatted_size	include/spdlog/fmt/bundled/format.h	/^FMT_NODISCARD FMT_INLINE auto formatted_size(const Locale& loc,$/;"	f	typeref:typename:size_t
formatted_size	include/spdlog/fmt/bundled/xchar.h	/^inline auto formatted_size(const S& fmt, T&&... args) -> size_t {$/;"	f	typeref:typename:size_t
formatter	include/spdlog/fmt/bin_to_hex.h	/^struct formatter<spdlog::details::dump_info<T>, char> {$/;"	s	namespace:std
formatter	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR formatter() {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR
formatter	include/spdlog/fmt/bundled/chrono.h	/^struct formatter<std::chrono::duration<Rep, Period>, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/chrono.h	/^struct formatter<std::chrono::local_time<Duration>, Char>$/;"	s
formatter	include/spdlog/fmt/bundled/chrono.h	/^struct formatter<std::chrono::time_point<std::chrono::system_clock, Duration>,$/;"	s
formatter	include/spdlog/fmt/bundled/chrono.h	/^struct formatter<std::chrono::time_point<std::chrono::utc_clock, Duration>,$/;"	s
formatter	include/spdlog/fmt/bundled/chrono.h	/^template <typename Char> struct formatter<std::tm, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/chrono.h	/^template <typename Char> struct formatter<weekday, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/color.h	/^struct formatter<detail::styled_arg<T>, Char> : formatter<T, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/core.h	/^struct formatter {$/;"	s
formatter	include/spdlog/fmt/bundled/core.h	/^struct formatter<T, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/format-inl.h	/^template <> struct formatter<detail::bigint> {$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<Char[N], Char> : formatter<basic_string_view<Char>, Char> {};$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<T, Char, enable_if_t<detail::has_format_as<T>::value>>$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<join_view<It, Sentinel, Char>, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^template <> struct formatter<bytes> {$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct formatter<group_digits_view<T>> : formatter<T> {$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct formatter<nested_view<T>> {$/;"	s
formatter	include/spdlog/fmt/bundled/ostream.h	/^struct formatter<detail::streamed_view<T>, Char>$/;"	s
formatter	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR formatter() {}$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR
formatter	include/spdlog/fmt/bundled/ranges.h	/^struct formatter<$/;"	s
formatter	include/spdlog/fmt/bundled/ranges.h	/^struct formatter<Tuple, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/ranges.h	/^struct formatter<tuple_join_view<Char, T...>, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^struct formatter<$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^struct formatter<BitRef, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^struct formatter<std::atomic<T>, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^struct formatter<std::atomic_flag, Char> : formatter<bool, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^struct formatter<std::bitset<N>, Char> : nested_formatter<string_view> {$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^struct formatter<std::optional<T>, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^struct formatter<std::thread::id, Char> : basic_ostream_formatter<Char> {};$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^template <> struct formatter<std::source_location> {$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^template <typename Char> struct formatter<std::error_code, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^template <typename Char> struct formatter<std::filesystem::path, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/std.h	/^template <typename Char> struct formatter<std::monostate, Char> {$/;"	s
formatter	include/spdlog/formatter.h	/^class formatter {$/;"	c	namespace:spdlog
formatter	include/spdlog/stopwatch.h	/^struct formatter<spdlog::stopwatch> : formatter<double> {$/;"	s	namespace:std
formatter_	include/spdlog/details/registry.h	/^    std::unique_ptr<formatter> formatter_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::unique_ptr<formatter>
formatter_	include/spdlog/fmt/bundled/format.h	/^  formatter<T> formatter_;$/;"	m	struct:nested_formatter	typeref:typename:formatter<T>
formatter_	include/spdlog/sinks/ansicolor_sink.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:std::unique_ptr<spdlog::formatter>
formatter_	include/spdlog/sinks/base_sink.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::base_sink	typeref:typename:std::unique_ptr<spdlog::formatter>
formatter_	include/spdlog/sinks/stdout_sinks.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::stdout_sink_base	typeref:typename:std::unique_ptr<spdlog::formatter>
formatter_	include/spdlog/sinks/wincolor_sink.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:std::unique_ptr<spdlog::formatter>
formatter_type	include/spdlog/fmt/bundled/core.h	/^  template <typename T> using formatter_type = formatter<T, Char>;$/;"	t	class:basic_format_context	typeref:typename:formatter<T,Char>
formatter_type	include/spdlog/fmt/bundled/printf.h	/^  template <typename T> using formatter_type = printf_formatter<T>;$/;"	t	class:basic_printf_context	typeref:typename:printf_formatter<T>
formatters_	include/spdlog/fmt/bundled/ranges.h	/^      detail::tuple_index_sequence<Tuple>())) formatters_;$/;"	m	struct:formatter	typeref:typename:decltype(detail::tuple::get_formatters<Tuple,Char> (detail::tuple_index_sequence<Tuple> ()))
formatters_	include/spdlog/fmt/bundled/ranges.h	/^  std::tuple<formatter<typename std::decay<T>::type, Char>...> formatters_;$/;"	m	struct:formatter	typeref:typename:std::tuple<formatter<typename std::decay<T>::type,Char>...>
formatters_	include/spdlog/pattern_formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> formatters_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::vector<std::unique_ptr<details::flag_formatter>>
fp	include/spdlog/fmt/bundled/format.h	/^using fp = basic_fp<unsigned long long>;$/;"	t	namespace:detail	typeref:typename:basic_fp<unsigned long long>
fprintf	include/spdlog/fmt/bundled/printf.h	/^inline auto fprintf(std::FILE* f, const S& fmt, const T&... args) -> int {$/;"	f	typeref:typename:int
fractional_part_rounding_thresholds	include/spdlog/fmt/bundled/format.h	/^constexpr auto fractional_part_rounding_thresholds(int index) -> uint32_t {$/;"	f	namespace:detail	typeref:typename:uint32_t
from_str	include/spdlog/common-inl.h	/^SPDLOG_INLINE spdlog::level::level_enum from_str(const std::string &name) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::level	typeref:typename:SPDLOG_INLINE spdlog::level::level_enum
front	include/spdlog/details/circular_q.h	/^    T &front() { return v_[head_]; }$/;"	f	class:spdlog::details::circular_q	typeref:typename:T &
front	include/spdlog/details/circular_q.h	/^    const T &front() const { return v_[head_]; }$/;"	f	class:spdlog::details::circular_q	typeref:typename:const T &
fsync	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE bool fsync(FILE *fp) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE bool
fuchsia	include/spdlog/fmt/bundled/color.h	/^  fuchsia = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	e	enum:color
full	include/spdlog/details/circular_q.h	/^    bool full() const {$/;"	f	class:spdlog::details::circular_q	typeref:typename:bool
full_days	include/spdlog/pattern_formatter-inl.h	/^static std::array<const char *, 7> full_days{$/;"	v	namespace:spdlog::details	typeref:typename:std::array<const char *,7>
full_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit full_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::full_formatter
full_formatter	include/spdlog/pattern_formatter-inl.h	/^class full_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
full_months	include/spdlog/pattern_formatter-inl.h	/^static const std::array<const char *, 12> full_months{{"January", "February", "March", "April",$/;"	v	namespace:spdlog::details	typeref:typename:const std::array<const char *,12>
funcname	include/spdlog/common.h	/^    const char *funcname{nullptr};$/;"	m	struct:spdlog::source_loc	typeref:typename:const char *
fwrite_fully	include/spdlog/fmt/bundled/format-inl.h	/^inline void fwrite_fully(const void* ptr, size_t count, FILE* stream) {$/;"	f	namespace:detail	typeref:typename:void
g	include/spdlog/fmt/bundled/color.h	/^  uint8_t g;$/;"	m	struct:rgb	typeref:typename:uint8_t
gainsboro	include/spdlog/fmt/bundled/color.h	/^  gainsboro = 0xDCDCDC,                \/\/ rgb(220,220,220)$/;"	e	enum:color
general	include/spdlog/fmt/bundled/format.h	/^  general,  \/\/ General: exponent notation or fixed point based on magnitude.$/;"	e	enum:detail::float_format
general_lower	include/spdlog/fmt/bundled/core.h	/^  general_lower,   \/\/ 'g'$/;"	e	enum:presentation_type
general_upper	include/spdlog/fmt/bundled/core.h	/^  general_upper,   \/\/ 'G'$/;"	e	enum:presentation_type
get	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> registry::get(const std::string &logger_name) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
get	include/spdlog/fmt/bundled/compile.h	/^constexpr const auto& get([[maybe_unused]] const T& first,$/;"	f	namespace:detail	typeref:typename:const auto &
get	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto get(int id) const -> format_arg {$/;"	f	class:basic_format_args	typeref:typename:format_arg
get	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE auto get() const -> basic_string_view<Char> { return str_; }$/;"	f	class:basic_format_string	typeref:typename:basic_string_view<Char>
get	include/spdlog/fmt/bundled/core.h	/^  auto get(basic_string_view<Char> name) const -> format_arg {$/;"	f	class:basic_format_args	typeref:typename:format_arg
get	include/spdlog/fmt/bundled/format-inl.h	/^template <typename Locale> auto locale_ref::get() const -> Locale {$/;"	f	class:detail::locale_ref	typeref:typename:Locale
get	include/spdlog/fmt/bundled/os.h	/^  auto get() const noexcept -> FILE* { return file_; }$/;"	f	class:buffered_file	typeref:typename:auto
get	include/spdlog/fmt/bundled/ranges.h	/^      static auto get(const T& t) -> all {$/;"	f	struct:formatter::format::getter	typeref:typename:all
get	include/spdlog/mdc.h	/^    static std::string get(const std::string &key) {$/;"	f	class:spdlog::mdc	typeref:typename:std::string
get	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> get(const std::string &name) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
get_allocator	include/spdlog/fmt/bundled/format.h	/^  auto get_allocator() const -> Allocator { return alloc_; }$/;"	f	class:basic_memory_buffer	typeref:typename:Allocator
get_arg	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {$/;"	f	namespace:detail	typeref:typename:decltype(ctx.arg (id))
get_arg_checked	include/spdlog/fmt/bundled/compile.h	/^constexpr const T& get_arg_checked(const Args&... args) {$/;"	f	namespace:detail	typeref:typename:const T &
get_arg_index_by_name	include/spdlog/fmt/bundled/compile.h	/^constexpr int get_arg_index_by_name(basic_string_view<Char> name,$/;"	f	namespace:detail	typeref:typename:int
get_arg_index_by_name	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto get_arg_index_by_name(basic_string_view<Char> name) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_arg_index_by_name	include/spdlog/fmt/bundled/core.h	/^constexpr auto get_arg_index_by_name(basic_string_view<Char> name) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_background	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto get_background() const noexcept -> detail::color_type {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
get_begin	include/spdlog/fmt/bin_to_hex.h	/^    It get_begin() const { return begin_; }$/;"	f	class:spdlog::details::dump_info	typeref:typename:It
get_buffer	include/spdlog/fmt/bundled/core.h	/^auto get_buffer(OutputIt out) -> iterator_buffer<OutputIt, T> {$/;"	f	namespace:detail	typeref:typename:iterator_buffer<OutputIt,T>
get_buffer	include/spdlog/fmt/bundled/core.h	/^auto get_buffer(std::back_insert_iterator<Buf> out) -> buffer<char>& {$/;"	f	namespace:detail	typeref:typename:buffer<char> &
get_cached_offset	include/spdlog/pattern_formatter-inl.h	/^    int get_cached_offset(const log_msg &msg, const std::tm &tm_time) {$/;"	f	class:spdlog::details::z_formatter	typeref:typename:int
get_cached_power	include/spdlog/fmt/bundled/format-inl.h	/^  static auto get_cached_power(int k) noexcept -> uint128_fallback {$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
get_cached_power	include/spdlog/fmt/bundled/format-inl.h	/^  static auto get_cached_power(int k) noexcept -> uint64_t {$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
get_cached_power	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto get_cached_power(int k) noexcept -> uint128_fallback {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_FUNC auto
get_classic_locale	include/spdlog/fmt/bundled/chrono.h	/^inline auto get_classic_locale() -> const std::locale& {$/;"	f	namespace:detail	typeref:typename:const std::locale &
get_container	include/spdlog/fmt/bundled/core.h	/^inline auto get_container(std::back_insert_iterator<Container> it)$/;"	f	namespace:detail	typeref:typename:Container &
get_context	include/spdlog/mdc.h	/^    static mdc_map_t &get_context() {$/;"	f	class:spdlog::mdc	typeref:typename:mdc_map_t &
get_cstring	include/spdlog/fmt/bundled/printf.h	/^template <typename Char> struct get_cstring {$/;"	s	namespace:detail
get_current_user_sid	include/spdlog/sinks/win_eventlog_sink.h	/^    static sid_t get_current_user_sid() {$/;"	f	struct:spdlog::sinks::win_eventlog::internal::sid_t	typeref:typename:sid_t
get_data	include/spdlog/fmt/bundled/format.h	/^inline auto get_data(Container& c) -> typename Container::value_type* {$/;"	f	namespace:detail	typeref:typename:Container::value_type *
get_data	include/spdlog/fmt/bundled/format.h	/^inline auto get_data(std::basic_string<Char>& s) -> Char* {$/;"	f	namespace:detail	typeref:typename:Char *
get_dbus_error	src/mpris_media_player.cpp	/^std::string MprisMediaPlayer::get_dbus_error(const std::string &msg,$/;"	f	class:MprisMediaPlayer	typeref:typename:std::string
get_default_color	include/spdlog/sinks/qt_sinks.h	/^    QTextCharFormat &get_default_color() {$/;"	f	class:spdlog::sinks::qt_color_sink	typeref:typename:QTextCharFormat &
get_default_raw	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE logger *registry::get_default_raw() { return default_logger_.get(); }$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE logger *
get_dynamic_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto get_dynamic_spec(FormatArg arg) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_emphasis	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto get_emphasis() const noexcept -> emphasis {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
get_end	include/spdlog/fmt/bin_to_hex.h	/^    It get_end() const { return end_; }$/;"	f	class:spdlog::details::dump_info	typeref:typename:It
get_event_category	include/spdlog/sinks/win_eventlog_sink.h	/^    static WORD get_event_category(details::log_msg const &msg) { return (WORD)msg.level; }$/;"	f	struct:spdlog::sinks::win_eventlog::internal::eventlog	typeref:typename:WORD
get_event_type	include/spdlog/sinks/win_eventlog_sink.h	/^    static WORD get_event_type(details::log_msg const &msg) {$/;"	f	struct:spdlog::sinks::win_eventlog::internal::eventlog	typeref:typename:WORD
get_file	include/spdlog/fmt/bundled/ostream.h	/^  friend auto get_file(BufType& obj) -> FILE* { return obj.*FileMemberPtr; }$/;"	f	namespace:detail	typeref:typename:FILE *
get_flusher	include/spdlog/details/registry.h	/^    std::unique_ptr<periodic_worker> &get_flusher() {$/;"	f	class:spdlog::details::registry	typeref:typename:std::unique_ptr<periodic_worker> &
get_foreground	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto get_foreground() const noexcept -> detail::color_type {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
get_id	include/spdlog/fmt/bundled/core.h	/^  auto get_id(basic_string_view<Char> name) const -> int {$/;"	f	class:basic_format_args	typeref:typename:int
get_iterator	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE auto get_iterator(Buf& buf, OutputIt) -> decltype(buf.out()) {$/;"	f	namespace:detail	typeref:typename:decltype(buf.out ())
get_iterator	include/spdlog/fmt/bundled/core.h	/^auto get_iterator(buffer<T>&, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
get_level	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE level::level_enum get_level() { return default_logger_raw()->level(); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE level::level_enum
get_level_color	include/spdlog/sinks/qt_sinks.h	/^    QTextCharFormat &get_level_color(level::level_enum color_level) {$/;"	f	class:spdlog::sinks::qt_color_sink	typeref:typename:QTextCharFormat &
get_locale	include/spdlog/fmt/bundled/chrono.h	/^  get_locale(bool localized, locale_ref loc) : has_locale_(localized) {$/;"	f	class:detail::get_locale
get_locale	include/spdlog/fmt/bundled/chrono.h	/^class get_locale {$/;"	c	namespace:detail
get_loop_status	src/mpris_media_player.cpp	/^std::string MprisMediaPlayer::get_loop_status() { return ""; }$/;"	f	class:MprisMediaPlayer	typeref:typename:std::string
get_maximum_rate	src/mpris_media_player.cpp	/^double MprisMediaPlayer::get_maximum_rate() {$/;"	f	class:MprisMediaPlayer	typeref:typename:double
get_metadata	src/mpris_media_player.cpp	/^void MprisMediaPlayer::get_metadata() {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
get_milliseconds	include/spdlog/fmt/bundled/chrono.h	/^inline auto get_milliseconds(std::chrono::duration<Rep, Period> d)$/;"	f	namespace:detail	typeref:typename:std::chrono::duration<Rep,std::milli>
get_minimum_rate	src/mpris_media_player.cpp	/^double MprisMediaPlayer::get_minimum_rate() {$/;"	f	class:MprisMediaPlayer	typeref:typename:double
get_path_string	include/spdlog/fmt/bundled/std.h	/^auto get_path_string(const std::filesystem::path& p,$/;"	f	namespace:detail	typeref:typename:auto
get_position	src/mpris_media_player.cpp	/^int64_t MprisMediaPlayer::get_position() {$/;"	f	class:MprisMediaPlayer	typeref:typename:int64_t
get_rate	src/mpris_media_player.cpp	/^double MprisMediaPlayer::get_rate() {$/;"	f	class:MprisMediaPlayer	typeref:typename:double
get_shuffle	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::get_shuffle() {$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
get_significand_size	include/spdlog/fmt/bundled/format.h	/^constexpr auto get_significand_size(const big_decimal_fp& f) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_significand_size	include/spdlog/fmt/bundled/format.h	/^inline auto get_significand_size(const dragonbox::decimal_fp<T>& f) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_thread	include/spdlog/details/periodic_worker.h	/^    std::thread &get_thread() { return worker_thread_; }$/;"	f	class:spdlog::details::periodic_worker	typeref:typename:std::thread &
get_time_	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE std::tm pattern_formatter::get_time_(const details::log_msg &msg) {$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE std::tm
get_tp	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::shared_ptr<thread_pool> registry::get_tp() {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE std::shared_ptr<thread_pool>
get_type	include/spdlog/fmt/bundled/compile.h	/^using get_type = typename get_type_impl<N, T>::type;$/;"	t	namespace:detail	typeref:typename:get_type_impl<N,T>::type
get_type_impl	include/spdlog/fmt/bundled/compile.h	/^template <int N, typename... Args> struct get_type_impl<N, type_list<Args...>> {$/;"	s	namespace:detail
get_types	include/spdlog/fmt/bundled/args.h	/^  auto get_types() const -> unsigned long long {$/;"	f	class:dynamic_format_arg_store	typeref:typename:unsigned long long
get_units	include/spdlog/fmt/bundled/chrono.h	/^FMT_CONSTEXPR inline auto get_units() -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
get_volume	src/mpris_media_player.cpp	/^double MprisMediaPlayer::get_volume() {$/;"	f	class:MprisMediaPlayer	typeref:typename:double
getenv	include/spdlog/details/os-inl.h	/^std::string SPDLOG_INLINE getenv(const char *field) {$/;"	f	namespace:spdlog::details::os	typeref:typename:std::string SPDLOG_INLINE
getter	include/spdlog/fmt/bundled/ranges.h	/^    struct getter : T {$/;"	s	function:formatter::format
ghost_white	include/spdlog/fmt/bundled/color.h	/^  ghost_white = 0xF8F8FF,              \/\/ rgb(248,248,255)$/;"	e	enum:color
global_log_level_	include/spdlog/details/registry.h	/^    spdlog::level::level_enum global_log_level_ = level::info;$/;"	m	class:spdlog::details::registry	typeref:typename:spdlog::level::level_enum
gmtime	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE std::tm gmtime() SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE std::tm
gmtime	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE std::tm gmtime(const std::time_t &time_tt) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE std::tm
gmtime	include/spdlog/fmt/bundled/chrono.h	/^inline auto gmtime($/;"	f	typeref:typename:std::tm
gmtime	include/spdlog/fmt/bundled/chrono.h	/^inline auto gmtime(std::time_t time) -> std::tm {$/;"	f	typeref:typename:std::tm
gmtime_r	include/spdlog/fmt/bundled/chrono.h	/^inline auto gmtime_r(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:null<>
gmtime_s	include/spdlog/fmt/bundled/chrono.h	/^inline auto gmtime_s(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:null<>
gold	include/spdlog/fmt/bundled/color.h	/^  gold = 0xFFD700,                     \/\/ rgb(255,215,0)$/;"	e	enum:color
golden_rod	include/spdlog/fmt/bundled/color.h	/^  golden_rod = 0xDAA520,               \/\/ rgb(218,165,32)$/;"	e	enum:color
gray	include/spdlog/fmt/bundled/color.h	/^  gray = 0x808080,                     \/\/ rgb(128,128,128)$/;"	e	enum:color
green	include/spdlog/fmt/bundled/color.h	/^  green = 0x008000,                    \/\/ rgb(0,128,0)$/;"	e	enum:color
green	include/spdlog/fmt/bundled/color.h	/^  green,$/;"	e	enum:terminal_color
green	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t green = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
green_yellow	include/spdlog/fmt/bundled/color.h	/^  green_yellow = 0xADFF2F,             \/\/ rgb(173,255,47)$/;"	e	enum:color
group	include/spdlog/fmt/bundled/format.h	/^    std::string::const_iterator group;$/;"	m	struct:detail::digit_grouping::next_state	typeref:typename:std::string::const_iterator
group_digits	include/spdlog/fmt/bundled/format.h	/^template <typename T> auto group_digits(T value) -> group_digits_view<T> {$/;"	f	typeref:typename:group_digits_view<T>
group_digits_view	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct group_digits_view {$/;"	s
grouping	include/spdlog/fmt/bundled/format.h	/^  std::string grouping;$/;"	m	struct:detail::loc_writer	typeref:typename:std::string
grouping	include/spdlog/fmt/bundled/format.h	/^  std::string grouping;$/;"	m	struct:detail::thousands_sep_result	typeref:typename:std::string
grouping_	include/spdlog/fmt/bundled/format.h	/^  std::string grouping_;$/;"	m	class:detail::digit_grouping	typeref:typename:std::string
grouping_	include/spdlog/fmt/bundled/format.h	/^  std::string grouping_;$/;"	m	class:format_facet	typeref:typename:std::string
grow	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 void grow(size_t capacity) override {$/;"	f	class:detail::iterator_buffer	typeref:typename:FMT_CONSTEXPR20 void
grow	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 void grow(size_t) override {$/;"	f	class:detail::counting_buffer	typeref:typename:FMT_CONSTEXPR20 void
grow	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 void grow(size_t) override {$/;"	f	class:detail::iterator_buffer	typeref:typename:FMT_CONSTEXPR20 void
grow	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 void grow(size_t) override {}$/;"	f	class:detail::iterator_buffer	typeref:typename:FMT_CONSTEXPR20 void
grow	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void grow(size_t size) override {$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
hEventLog_	include/spdlog/sinks/win_eventlog_sink.h	/^    HANDLE hEventLog_{NULL};$/;"	m	class:spdlog::sinks::win_eventlog::win_eventlog_sink	typeref:typename:HANDLE
half_uint	include/spdlog/fmt/bundled/format.h	/^    using half_uint =$/;"	t	function:detail::bigint::multiply	typeref:typename:conditional_t<std::is_same<UInt,uint128_t>::value,uint64_t,uint32_t>
handle	include/spdlog/fmt/bundled/chrono.h	/^    auto handle(detail::null<>) -> bool {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
handle	include/spdlog/fmt/bundled/chrono.h	/^    auto handle(detail::null<>) -> bool {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
handle	include/spdlog/fmt/bundled/chrono.h	/^    auto handle(std::tm* tm) -> bool { return tm != nullptr; }$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
handle	include/spdlog/fmt/bundled/chrono.h	/^    auto handle(std::tm* tm) -> bool { return tm != nullptr; }$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
handle	include/spdlog/fmt/bundled/core.h	/^    explicit handle(detail::custom_value<Context> custom) : custom_(custom) {}$/;"	f	class:basic_format_arg::handle
handle	include/spdlog/fmt/bundled/core.h	/^  class handle {$/;"	c	class:basic_format_arg
handle_	include/spdlog/sinks/stdout_sinks.h	/^    HANDLE handle_;$/;"	m	class:spdlog::sinks::stdout_sink_base	typeref:typename:HANDLE
handle_dynamic_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_dynamic_spec(int& value,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
handle_flag_	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::handle_flag_(char flag, details::padding_info padding) {$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE void
handle_nan_inf	include/spdlog/fmt/bundled/chrono.h	/^  auto handle_nan_inf() -> bool {$/;"	f	struct:detail::chrono_formatter	typeref:typename:bool
handle_padspec_	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE details::padding_info pattern_formatter::handle_padspec_($/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE details::padding_info
handler	include/spdlog/fmt/bundled/core.h	/^    Handler& handler;$/;"	m	struct:detail::parse_replacement_field::id_adapter	typeref:typename:Handler &
handler_	include/spdlog/fmt/bundled/core.h	/^    Handler& handler_;$/;"	m	struct:detail::parse_format_string::writer	typeref:typename:Handler &
has_background	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto has_background() const noexcept -> bool {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
has_const_begin_end	include/spdlog/fmt/bundled/ranges.h	/^struct has_const_begin_end : std::false_type {};$/;"	s	namespace:detail
has_const_begin_end	include/spdlog/fmt/bundled/ranges.h	/^struct has_const_begin_end<$/;"	s	namespace:detail
has_const_formatter	include/spdlog/fmt/bundled/core.h	/^constexpr auto has_const_formatter() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
has_const_formatter_impl	include/spdlog/fmt/bundled/core.h	/^constexpr auto has_const_formatter_impl(...) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
has_const_formatter_impl	include/spdlog/fmt/bundled/core.h	/^constexpr auto has_const_formatter_impl(T*)$/;"	f	namespace:detail	typeref:typename:decltype(typename Context::template formatter_type<T> ().format (std::declval<const T &> (),std::declval<Context &> ()),true)
has_emphasis	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto has_emphasis() const noexcept -> bool {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
has_emphasis	include/spdlog/fmt/bundled/color.h	/^  static FMT_CONSTEXPR auto has_emphasis(emphasis em, emphasis mask) noexcept$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR auto
has_flip	include/spdlog/fmt/bundled/std.h	/^struct has_flip : std::false_type {};$/;"	s	namespace:detail
has_flip	include/spdlog/fmt/bundled/std.h	/^struct has_flip<T, void_t<decltype(std::declval<T>().flip())>>$/;"	s	namespace:detail
has_foreground	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto has_foreground() const noexcept -> bool {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
has_format_as	include/spdlog/fmt/bundled/core.h	/^struct has_format_as$/;"	s	namespace:detail
has_formatter	include/spdlog/fmt/bundled/core.h	/^using has_formatter =$/;"	t	typeref:typename:std::is_constructible<typename Context::template formatter_type<T>>
has_implicit_bit	include/spdlog/fmt/bundled/format.h	/^template <typename Float> constexpr auto has_implicit_bit() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
has_isfinite	include/spdlog/fmt/bundled/format.h	/^struct has_isfinite : std::false_type {};$/;"	s	namespace:detail
has_isfinite	include/spdlog/fmt/bundled/format.h	/^struct has_isfinite<T, enable_if_t<sizeof(std::isfinite(T())) != 0>>$/;"	s	namespace:detail
has_locale_	include/spdlog/fmt/bundled/chrono.h	/^  bool has_locale_ = false;$/;"	m	class:detail::get_locale	typeref:typename:bool
has_member_data_tm_gmtoff	include/spdlog/fmt/bundled/chrono.h	/^struct has_member_data_tm_gmtoff : std::false_type {};$/;"	s	namespace:detail
has_member_data_tm_gmtoff	include/spdlog/fmt/bundled/chrono.h	/^struct has_member_data_tm_gmtoff<T, void_t<decltype(T::tm_gmtoff)>>$/;"	s	namespace:detail
has_member_data_tm_zone	include/spdlog/fmt/bundled/chrono.h	/^struct has_member_data_tm_zone : std::false_type {};$/;"	s	namespace:detail
has_member_data_tm_zone	include/spdlog/fmt/bundled/chrono.h	/^struct has_member_data_tm_zone<T, void_t<decltype(T::tm_zone)>>$/;"	s	namespace:detail
has_member_fn_begin_end_t	include/spdlog/fmt/bundled/ranges.h	/^struct has_member_fn_begin_end_t : std::false_type {};$/;"	s	namespace:detail
has_member_fn_begin_end_t	include/spdlog/fmt/bundled/ranges.h	/^struct has_member_fn_begin_end_t<T, void_t<decltype(std::declval<T>().begin()),$/;"	s	namespace:detail
has_mutable_begin_end	include/spdlog/fmt/bundled/ranges.h	/^struct has_mutable_begin_end : std::false_type {};$/;"	s	namespace:detail
has_mutable_begin_end	include/spdlog/fmt/bundled/ranges.h	/^struct has_mutable_begin_end<$/;"	s	namespace:detail
has_named_args	include/spdlog/fmt/bundled/core.h	/^  auto has_named_args() const -> bool {$/;"	f	class:basic_format_args	typeref:typename:bool
has_named_args_bit	include/spdlog/fmt/bundled/core.h	/^enum : unsigned long long { has_named_args_bit = 1ULL << 62 };$/;"	e	enum:detail::__anon0accc0920b03
has_precision_integral	include/spdlog/fmt/bundled/chrono.h	/^  bool has_precision_integral = false;$/;"	m	struct:detail::chrono_format_checker	typeref:typename:bool
has_separator	include/spdlog/fmt/bundled/format.h	/^  auto has_separator() const -> bool { return !thousands_sep_.empty(); }$/;"	f	class:detail::digit_grouping	typeref:typename:bool
has_separator	include/spdlog/fmt/bundled/format.h	/^  constexpr auto has_separator() const -> bool { return false; }$/;"	f	class:detail::fallback_digit_grouping	typeref:typename:bool
hash	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
head_	include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type head_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>::size_type
head_	include/spdlog/fmt/bundled/args.h	/^  std::unique_ptr<node<>> head_;$/;"	m	class:detail::dynamic_arg_list	typeref:typename:std::unique_ptr<node<>>
help	build/Makefile	/^help:$/;"	t
helpers	include/spdlog/cfg/helpers-inl.h	/^namespace helpers {$/;"	n	namespace:spdlog::cfg
helpers	include/spdlog/cfg/helpers.h	/^namespace helpers {$/;"	n	namespace:spdlog::cfg
hex	include/spdlog/fmt/bundled/format.h	/^  hex$/;"	e	enum:detail::float_format
hex_lower	include/spdlog/fmt/bundled/core.h	/^  hex_lower,       \/\/ 'x'$/;"	e	enum:presentation_type
hex_upper	include/spdlog/fmt/bundled/core.h	/^  hex_upper,       \/\/ 'X'$/;"	e	enum:presentation_type
hexfloat_lower	include/spdlog/fmt/bundled/core.h	/^  hexfloat_lower,  \/\/ 'a'$/;"	e	enum:presentation_type
hexfloat_upper	include/spdlog/fmt/bundled/core.h	/^  hexfloat_upper,  \/\/ 'A'$/;"	e	enum:presentation_type
hi_	include/spdlog/fmt/bundled/format.h	/^  uint64_t lo_, hi_;$/;"	m	class:detail::uint128_fallback	typeref:typename:uint64_t
high	include/spdlog/fmt/bundled/format.h	/^  constexpr auto high() const noexcept -> uint64_t { return hi_; }$/;"	f	class:detail::uint128_fallback	typeref:typename:auto
hints	include/spdlog/details/tcp_client-windows.h	/^        struct addrinfo hints {};$/;"	s	function:spdlog::details::tcp_client::connect
hints	include/spdlog/details/tcp_client.h	/^        struct addrinfo hints {};$/;"	s	function:spdlog::details::tcp_client::connect
hlocal_	include/spdlog/sinks/win_eventlog_sink.h	/^    HLOCAL hlocal_;$/;"	m	struct:spdlog::sinks::win_eventlog::internal::local_alloc_t	typeref:typename:HLOCAL
honey_dew	include/spdlog/fmt/bundled/color.h	/^  honey_dew = 0xF0FFF0,                \/\/ rgb(240,255,240)$/;"	e	enum:color
hot_pink	include/spdlog/fmt/bundled/color.h	/^  hot_pink = 0xFF69B4,                 \/\/ rgb(255,105,180)$/;"	e	enum:color
hour	include/spdlog/fmt/bundled/chrono.h	/^  auto hour() const -> Rep {$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
hour12	include/spdlog/fmt/bundled/chrono.h	/^  auto hour12() const -> Rep {$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
hourly_file_sink	include/spdlog/sinks/hourly_file_sink.h	/^    hourly_file_sink(filename_t base_filename,$/;"	f	class:spdlog::sinks::hourly_file_sink
hourly_file_sink	include/spdlog/sinks/hourly_file_sink.h	/^class hourly_file_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
hourly_file_sink_mt	include/spdlog/sinks/hourly_file_sink.h	/^using hourly_file_sink_mt = hourly_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:hourly_file_sink<std::mutex>
hourly_file_sink_st	include/spdlog/sinks/hourly_file_sink.h	/^using hourly_file_sink_st = hourly_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:hourly_file_sink<details::null_mutex>
hourly_filename_calculator	include/spdlog/sinks/hourly_file_sink.h	/^struct hourly_filename_calculator {$/;"	s	namespace:spdlog::sinks
hourly_logger_mt	include/spdlog/sinks/hourly_file_sink.h	/^inline std::shared_ptr<logger> hourly_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
hourly_logger_st	include/spdlog/sinks/hourly_file_sink.h	/^inline std::shared_ptr<logger> hourly_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
i	include/spdlog/fmt/bundled/ranges.h	/^  int i;$/;"	m	struct:detail::format_tuple_element	typeref:typename:int
id	include/spdlog/fmt/bundled/core.h	/^  int id;$/;"	m	struct:detail::named_arg_info	typeref:typename:int
id	include/spdlog/fmt/bundled/format-inl.h	/^template <typename Locale> typename Locale::id format_facet<Locale>::id;$/;"	m	class:format_facet<Locale>	typeref:typename:Locale::id
id	include/spdlog/fmt/bundled/format.h	/^  static FMT_API typename Locale::id id;$/;"	m	class:format_facet	typeref:typename:FMT_API typename Locale::id
id_adapter	include/spdlog/fmt/bundled/core.h	/^  struct id_adapter {$/;"	s	function:detail::parse_replacement_field
ident_	include/spdlog/sinks/syslog_sink.h	/^    const std::string ident_;$/;"	m	class:spdlog::sinks::syslog_sink	typeref:typename:const std::string
ident_	include/spdlog/sinks/systemd_sink.h	/^    const std::string ident_;$/;"	m	class:spdlog::sinks::systemd_sink	typeref:typename:const std::string
ignore_unused	include/spdlog/fmt/bundled/core.h	/^template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
in	include/spdlog/fmt/bundled/core.h	/^constexpr auto in(type t, int set) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
in_terminal	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE bool in_terminal(FILE *file) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE bool
index	include/spdlog/fmt/bundled/core.h	/^    int index;$/;"	m	union:detail::arg_ref::value	typeref:typename:int
index	include/spdlog/fmt/bundled/core.h	/^enum class arg_id_kind { none, index, name };$/;"	e	enum:detail::arg_id_kind
index_sequence	include/spdlog/fmt/bundled/ranges.h	/^template <size_t... N> using index_sequence = integer_sequence<size_t, N...>;$/;"	t	namespace:detail	typeref:typename:integer_sequence<size_t,N...>
index_sequence	include/spdlog/fmt/bundled/ranges.h	/^template <size_t... N> using index_sequence = std::index_sequence<N...>;$/;"	t	namespace:detail	typeref:typename:std::index_sequence<N...>
indian_red	include/spdlog/fmt/bundled/color.h	/^  indian_red = 0xCD5C5C,               \/\/ rgb(205,92,92)$/;"	e	enum:color
indigo	include/spdlog/fmt/bundled/color.h	/^  indigo = 0x4B0082,                   \/\/ rgb(75,0,130)$/;"	e	enum:color
info	include/spdlog/common.h	/^    info = SPDLOG_LEVEL_INFO,$/;"	e	enum:spdlog::level::level_enum
info	include/spdlog/fmt/bundled/format.h	/^    using info = dragonbox::float_info<decltype(converted_value)>;$/;"	t	function:detail::format_float
info	include/spdlog/fmt/bundled/format.h	/^    using info = dragonbox::float_info<double>;$/;"	t	function:detail::format_float	typeref:typename:dragonbox::float_info<double>
info	include/spdlog/fmt/bundled/format.h	/^  using info = dragonbox::float_info<Float>;$/;"	t	function:detail::format_hexfloat	typeref:typename:dragonbox::float_info<Float>
info	include/spdlog/logger.h	/^    void info(const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
info	include/spdlog/logger.h	/^    void info(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
info	include/spdlog/logger.h	/^    void info(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
info	include/spdlog/spdlog.h	/^inline void info(const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
info	include/spdlog/spdlog.h	/^inline void info(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
info	include/spdlog/spdlog.h	/^inline void info(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
info_arch	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_extensions_default	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_platform	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
init	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR void init(range_format_constant<range_format::map>) {$/;"	f	struct:detail::range_default_formatter	typeref:typename:FMT_CONSTEXPR void
init	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR void init(range_format_constant<range_format::sequence>) {}$/;"	f	struct:detail::range_default_formatter	typeref:typename:FMT_CONSTEXPR void
init	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR void init(range_format_constant<range_format::set>) {$/;"	f	struct:detail::range_default_formatter	typeref:typename:FMT_CONSTEXPR void
init_filenames_q_	include/spdlog/sinks/daily_file_sink.h	/^    void init_filenames_q_() {$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:void
init_filenames_q_	include/spdlog/sinks/hourly_file_sink.h	/^    void init_filenames_q_() {$/;"	f	class:spdlog::sinks::hourly_file_sink	typeref:typename:void
init_named_args	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR FMT_INLINE void init_named_args(std::nullptr_t, int, int,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR FMT_INLINE void
init_named_args	include/spdlog/fmt/bundled/core.h	/^inline void init_named_args(named_arg_info<Char>*, int, int) {}$/;"	f	namespace:detail	typeref:typename:void
init_named_args	include/spdlog/fmt/bundled/core.h	/^void init_named_args(named_arg_info<Char>* named_args, int arg_count,$/;"	f	namespace:detail	typeref:typename:void
init_thread_pool	include/spdlog/async.h	/^inline void init_thread_pool(size_t q_size, size_t thread_count) {$/;"	f	namespace:spdlog	typeref:typename:void
init_thread_pool	include/spdlog/async.h	/^inline void init_thread_pool(size_t q_size,$/;"	f	namespace:spdlog	typeref:typename:void
init_winsock_	include/spdlog/details/tcp_client-windows.h	/^    static void init_winsock_() {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
init_winsock_	include/spdlog/details/udp_client-windows.h	/^    static void init_winsock_() {$/;"	f	class:spdlog::details::udp_client	typeref:typename:void
initial_state	include/spdlog/fmt/bundled/format.h	/^  auto initial_state() const -> next_state { return {grouping_.begin(), 0}; }$/;"	f	class:detail::digit_grouping	typeref:typename:next_state
initialize_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::initialize_logger(std::shared_ptr<logger> new_logger) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
initialize_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void initialize_logger(std::shared_ptr<logger> logger) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
inline_buffer_size	include/spdlog/fmt/bundled/format.h	/^enum { inline_buffer_size = 500 };$/;"	e	enum:__anonb671a0720303
instance	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE registry &registry::instance() {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE registry &
instance_	include/spdlog/sinks/mongo_sink.h	/^    std::shared_ptr<mongocxx::instance> instance_;$/;"	m	class:spdlog::sinks::mongo_sink	typeref:typename:std::shared_ptr<mongocxx::instance>
int128_opt	include/spdlog/fmt/bundled/core.h	/^enum class int128_opt {};$/;"	g	namespace:detail
int128_opt	include/spdlog/fmt/bundled/core.h	/^using int128_opt = __int128_t;  \/\/ An optional native 128-bit integer.$/;"	t	namespace:detail	typeref:typename:__int128_t
int128_type	include/spdlog/fmt/bundled/core.h	/^  int128_type,$/;"	e	enum:detail::type
int128_value	include/spdlog/fmt/bundled/core.h	/^    int128_opt int128_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:int128_opt
int_checker	include/spdlog/fmt/bundled/printf.h	/^template <> struct int_checker<true> {$/;"	s	namespace:detail
int_checker	include/spdlog/fmt/bundled/printf.h	/^template <bool IsSigned> struct int_checker {$/;"	s	namespace:detail
int_type	include/spdlog/fmt/bundled/core.h	/^  int_type,$/;"	e	enum:detail::type
int_type	include/spdlog/fmt/bundled/ostream.h	/^  using int_type = typename Streambuf::int_type;$/;"	t	class:detail::formatbuf	typeref:typename:Streambuf::int_type
int_value	include/spdlog/fmt/bundled/core.h	/^    int int_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:int
integer_sequence	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, T... N> struct integer_sequence {$/;"	s	namespace:detail
integer_sequence	include/spdlog/fmt/bundled/ranges.h	/^using integer_sequence = std::integer_sequence<T, N...>;$/;"	t	namespace:detail	typeref:typename:std::integer_sequence<T,N...>
internal	include/spdlog/sinks/win_eventlog_sink.h	/^namespace internal {$/;"	n	namespace:spdlog::sinks::win_eventlog
invalid_code_point	include/spdlog/fmt/bundled/format.h	/^constexpr FMT_INLINE_VARIABLE uint32_t invalid_code_point = ~uint32_t();$/;"	v	namespace:detail	typeref:typename:FMT_INLINE_VARIABLE uint32_t
invoke_method_	include/spdlog/sinks/qt_sinks.h	/^    static void invoke_method_(invoke_params params) {$/;"	f	class:spdlog::sinks::qt_color_sink	typeref:typename:void
invoke_params	include/spdlog/sinks/qt_sinks.h	/^        invoke_params(int max_lines,$/;"	f	struct:spdlog::sinks::qt_color_sink::invoke_params
invoke_params	include/spdlog/sinks/qt_sinks.h	/^    struct invoke_params {$/;"	s	class:spdlog::sinks::qt_color_sink
is_arithmetic	include/spdlog/fmt/bundled/core.h	/^  auto is_arithmetic() const -> bool {$/;"	f	class:basic_format_arg	typeref:typename:bool
is_arithmetic_type	include/spdlog/fmt/bundled/core.h	/^constexpr auto is_arithmetic_type(type t) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_back_insert_iterator	include/spdlog/fmt/bundled/core.h	/^struct is_back_insert_iterator<std::back_insert_iterator<Container>>$/;"	s	namespace:detail
is_back_insert_iterator	include/spdlog/fmt/bundled/core.h	/^template <typename It> struct is_back_insert_iterator : std::false_type {};$/;"	s	namespace:detail
is_big_endian	include/spdlog/fmt/bundled/format.h	/^inline auto is_big_endian() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_bit_reference_like	include/spdlog/fmt/bundled/std.h	/^struct is_bit_reference_like<std::__bit_const_reference<C>> {$/;"	s	namespace:detail
is_bit_reference_like	include/spdlog/fmt/bundled/std.h	/^template <typename T> struct is_bit_reference_like {$/;"	s	namespace:detail
is_char	include/spdlog/fmt/bundled/core.h	/^template <> struct is_char<char> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct is_char : std::false_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/xchar.h	/^template <> struct is_char<char16_t> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/xchar.h	/^template <> struct is_char<char32_t> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/xchar.h	/^template <> struct is_char<detail::char8_type> : std::true_type {};$/;"	s
is_char	include/spdlog/fmt/bundled/xchar.h	/^template <> struct is_char<wchar_t> : std::true_type {};$/;"	s
is_classic_	include/spdlog/fmt/bundled/chrono.h	/^  const bool is_classic_;$/;"	m	class:detail::tm_writer	typeref:typename:const bool
is_color_terminal	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE bool is_color_terminal() SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE bool
is_compile_string	include/spdlog/fmt/bundled/core.h	/^struct is_compile_string : std::is_base_of<compile_string, S> {};$/;"	s	namespace:detail
is_compiled_format	include/spdlog/fmt/bundled/compile.h	/^struct is_compiled_format<code_unit<Char>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	include/spdlog/fmt/bundled/compile.h	/^struct is_compiled_format<concat<L, R>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	include/spdlog/fmt/bundled/compile.h	/^struct is_compiled_format<field<Char, T, N>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	include/spdlog/fmt/bundled/compile.h	/^struct is_compiled_format<runtime_named_field<Char>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	include/spdlog/fmt/bundled/compile.h	/^struct is_compiled_format<spec_field<Char, T, N>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	include/spdlog/fmt/bundled/compile.h	/^struct is_compiled_format<text<Char>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	include/spdlog/fmt/bundled/compile.h	/^template <typename T> struct is_compiled_format : std::false_type {};$/;"	s	namespace:detail
is_compiled_string	include/spdlog/fmt/bundled/compile.h	/^struct is_compiled_string : std::is_base_of<compiled_string, S> {};$/;"	s	namespace:detail
is_connected	include/mpris_media_player.h	/^  bool is_connected;$/;"	m	class:MprisMediaPlayer	typeref:typename:bool
is_connected	include/spdlog/details/tcp_client-windows.h	/^    bool is_connected() const { return socket_ != INVALID_SOCKET; }$/;"	f	class:spdlog::details::tcp_client	typeref:typename:bool
is_connected	include/spdlog/details/tcp_client.h	/^    bool is_connected() const { return socket_ != -1; }$/;"	f	class:spdlog::details::tcp_client	typeref:typename:bool
is_constant_evaluated	include/spdlog/fmt/bundled/core.h	/^constexpr FMT_INLINE auto is_constant_evaluated($/;"	f	namespace:detail	typeref:typename:FMT_INLINE auto
is_container_adaptor_like	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> class is_container_adaptor_like {$/;"	c	namespace:detail
is_contiguous	include/spdlog/fmt/bundled/core.h	/^struct is_contiguous<std::basic_string<Char>> : std::true_type {};$/;"	s
is_contiguous	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct is_contiguous : std::false_type {};$/;"	s
is_contiguous	include/spdlog/fmt/bundled/format.h	/^struct is_contiguous<basic_memory_buffer<T, SIZE, Allocator>> : std::true_type {$/;"	s
is_convertible_to_any_format_string	include/spdlog/common.h	/^struct is_convertible_to_any_format_string$/;"	s	namespace:spdlog
is_convertible_to_basic_format_string	include/spdlog/common.h	/^struct is_convertible_to_basic_format_string$/;"	s	namespace:spdlog
is_double_double	include/spdlog/fmt/bundled/format.h	/^using is_double_double = bool_constant<std::numeric_limits<T>::digits == 106>;$/;"	t	namespace:detail	typeref:typename:bool_constant<std::numeric_limits<T>::digits==106>
is_exotic_char	include/spdlog/fmt/bundled/xchar.h	/^using is_exotic_char = bool_constant<!std::is_same<T, char>::value>;$/;"	t	namespace:detail	typeref:typename:bool_constant<!std::is_same<T,char>::value>
is_fast_float	include/spdlog/fmt/bundled/format.h	/^struct is_fast_float : bool_constant<std::numeric_limits<T>::is_iec559 &&$/;"	s	namespace:detail
is_fast_float	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct is_fast_float<T, false> : std::false_type {};$/;"	s	namespace:detail
is_float128	include/spdlog/fmt/bundled/format.h	/^template <typename T> using is_float128 = std::is_same<T, float128>;$/;"	t	namespace:detail	typeref:typename:std::is_same<T,float128>
is_floating_point	include/spdlog/fmt/bundled/format.h	/^using is_floating_point =$/;"	t	namespace:detail	typeref:typename:bool_constant<std::is_floating_point<T>::value||is_float128<T>::value>
is_formattable	include/spdlog/fmt/bundled/core.h	/^using is_formattable = bool_constant<!std::is_base_of<$/;"	t
is_formattable_delayed	include/spdlog/fmt/bundled/ranges.h	/^struct is_formattable_delayed$/;"	s	namespace:detail
is_integer	include/spdlog/fmt/bundled/format-inl.h	/^    bool is_integer;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_parity_result	typeref:typename:bool
is_integer	include/spdlog/fmt/bundled/format-inl.h	/^    bool is_integer;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_result	typeref:typename:bool
is_integer	include/spdlog/fmt/bundled/format.h	/^using is_integer =$/;"	t	namespace:detail
is_integral	include/spdlog/fmt/bundled/core.h	/^  auto is_integral() const -> bool { return detail::is_integral_type(type_); }$/;"	f	class:basic_format_arg	typeref:typename:bool
is_integral	include/spdlog/fmt/bundled/format.h	/^template <> struct is_integral<int128_opt> : std::true_type {};$/;"	s	namespace:detail
is_integral	include/spdlog/fmt/bundled/format.h	/^template <> struct is_integral<uint128_t> : std::true_type {};$/;"	s	namespace:detail
is_integral	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct is_integral : std::is_integral<T> {};$/;"	s	namespace:detail
is_integral_type	include/spdlog/fmt/bundled/core.h	/^constexpr auto is_integral_type(type t) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_left_endpoint_integer_shorter_interval	include/spdlog/fmt/bundled/format-inl.h	/^auto is_left_endpoint_integer_shorter_interval(int exponent) noexcept -> bool {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
is_locale	include/spdlog/fmt/bundled/format.h	/^struct is_locale : std::false_type {};$/;"	s	namespace:detail
is_locale	include/spdlog/fmt/bundled/format.h	/^struct is_locale<T, void_t<decltype(T::classic())>> : std::true_type {};$/;"	s	namespace:detail
is_map	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> class is_map {$/;"	c	namespace:detail
is_name_start	include/spdlog/fmt/bundled/core.h	/^template <typename Char> constexpr auto is_name_start(Char c) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_named_arg	include/spdlog/fmt/bundled/core.h	/^struct is_named_arg<named_arg<Char, T>> : std::true_type {};$/;"	s	namespace:detail
is_named_arg	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct is_named_arg : std::false_type {};$/;"	s	namespace:detail
is_named_arg	include/spdlog/fmt/bundled/format.h	/^struct is_named_arg<statically_named_arg<T, Char, N, Str>> : std::true_type {};$/;"	s	namespace:detail
is_negative	include/spdlog/fmt/bundled/format.h	/^constexpr auto is_negative(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_negative	include/spdlog/fmt/bundled/format.h	/^constexpr auto is_negative(T) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_output_iterator	include/spdlog/fmt/bundled/core.h	/^struct is_output_iterator : std::false_type {};$/;"	s	namespace:detail
is_output_iterator	include/spdlog/fmt/bundled/core.h	/^struct is_output_iterator<$/;"	s	namespace:detail
is_packed	include/spdlog/fmt/bundled/core.h	/^  constexpr auto is_packed() const -> bool {$/;"	f	class:basic_format_args	typeref:typename:bool
is_packed	include/spdlog/fmt/bundled/core.h	/^  static const bool is_packed = num_args <= detail::max_packed_args;$/;"	m	class:format_arg_store	typeref:typename:const bool
is_printable	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto is_printable(uint32_t cp) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_printable	include/spdlog/fmt/bundled/format-inl.h	/^inline auto is_printable(uint16_t x, const singleton* singletons,$/;"	f	namespace:detail	typeref:typename:bool
is_range	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, typename Char> struct is_range {$/;"	s
is_range_	include/spdlog/fmt/bundled/ranges.h	/^struct is_range_<T, void>$/;"	s	namespace:detail
is_range_	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, typename _ = void> struct is_range_ : std::false_type {};$/;"	s	namespace:detail
is_reference_wrapper	include/spdlog/fmt/bundled/args.h	/^struct is_reference_wrapper<std::reference_wrapper<T>> : std::true_type {};$/;"	s	namespace:detail
is_reference_wrapper	include/spdlog/fmt/bundled/args.h	/^template <typename T> struct is_reference_wrapper : std::false_type {};$/;"	s	namespace:detail
is_rgb	include/spdlog/fmt/bundled/color.h	/^  bool is_rgb;$/;"	m	struct:detail::color_type	typeref:typename:bool
is_same_arithmetic_type	include/spdlog/fmt/bundled/chrono.h	/^struct is_same_arithmetic_type$/;"	s	namespace:detail
is_set	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> class is_set {$/;"	c	namespace:detail
is_signed	include/spdlog/fmt/bundled/format.h	/^using is_signed =$/;"	t	namespace:detail	typeref:typename:std::integral_constant<bool,std::numeric_limits<T>::is_signed||std::is_same<T,int128_opt>::value>
is_statically_named_arg	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct is_statically_named_arg : std::false_type {};$/;"	s	namespace:detail
is_statically_named_arg	include/spdlog/fmt/bundled/format.h	/^struct is_statically_named_arg<statically_named_arg<T, Char, N, Str>>$/;"	s	namespace:detail
is_std_string_like	include/spdlog/fmt/bundled/ranges.h	/^struct is_std_string_like<fmt::basic_string_view<Char>> : std::true_type {};$/;"	s	namespace:detail
is_std_string_like	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> class is_std_string_like {$/;"	c	namespace:detail
is_string	include/spdlog/fmt/bundled/core.h	/^struct is_string$/;"	s	namespace:detail
is_supported_floating_point	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto is_supported_floating_point(T) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_tuple_formattable	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, typename C> struct is_tuple_formattable {$/;"	s
is_tuple_formattable_	include/spdlog/fmt/bundled/ranges.h	/^class is_tuple_formattable_ {$/;"	c	namespace:detail
is_tuple_formattable_	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, typename C> class is_tuple_formattable_<T, C, true> {$/;"	c	namespace:detail
is_tuple_like	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> struct is_tuple_like {$/;"	s
is_tuple_like_	include/spdlog/fmt/bundled/ranges.h	/^template <typename T> class is_tuple_like_ {$/;"	c	namespace:detail
is_unpacked_bit	include/spdlog/fmt/bundled/core.h	/^enum : unsigned long long { is_unpacked_bit = 1ULL << 63 };$/;"	e	enum:detail::__anon0accc0920a03
is_utf8	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR inline auto is_utf8() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_utf8_	include/spdlog/sinks/qt_sinks.h	/^    bool is_utf8_;$/;"	m	class:spdlog::sinks::qt_color_sink	typeref:typename:bool
is_variant_formattable	include/spdlog/fmt/bundled/std.h	/^template <typename T, typename C> struct is_variant_formattable {$/;"	s
is_variant_formattable_	include/spdlog/fmt/bundled/std.h	/^template <typename T, typename C> class is_variant_formattable_ {$/;"	c	namespace:detail
is_variant_like	include/spdlog/fmt/bundled/std.h	/^template <typename T> struct is_variant_like {$/;"	s
is_variant_like_	include/spdlog/fmt/bundled/std.h	/^struct is_variant_like_<std::variant<Types...>> : std::true_type {};$/;"	s	namespace:detail
is_variant_like_	include/spdlog/fmt/bundled/std.h	/^template <typename> struct is_variant_like_ : std::false_type {};$/;"	s	namespace:detail
is_zero_int	include/spdlog/fmt/bundled/printf.h	/^struct is_zero_int {$/;"	s	namespace:detail
isfinite	include/spdlog/fmt/bundled/chrono.h	/^inline auto isfinite(T) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
isfinite	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto isfinite(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
isfinite	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto isfinite(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
isnan	include/spdlog/fmt/bundled/format.h	/^template <typename T> constexpr auto isnan(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
iso_week_num	include/spdlog/fmt/bundled/chrono.h	/^  auto iso_week_num(int tm_yday, int tm_wday) const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
iso_year_weeks	include/spdlog/fmt/bundled/chrono.h	/^  auto iso_year_weeks(long long curr_year) const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
italic	include/spdlog/fmt/bundled/color.h	/^  italic = 1 << 2,$/;"	e	enum:emphasis
item_type	include/spdlog/details/mpmc_blocking_q.h	/^    using item_type = T;$/;"	t	class:spdlog::details::mpmc_blocking_queue	typeref:typename:T
item_type	include/spdlog/details/thread_pool.h	/^    using item_type = async_msg;$/;"	t	class:spdlog::details::thread_pool	typeref:typename:async_msg
iterator	include/spdlog/fmt/bundled/core.h	/^  using iterator = OutputIt;$/;"	t	class:basic_format_context	typeref:typename:OutputIt
iterator	include/spdlog/fmt/bundled/core.h	/^  using iterator = const Char*;$/;"	t	class:basic_format_parse_context	typeref:typename:const Char *
iterator	include/spdlog/fmt/bundled/core.h	/^  using iterator = const Char*;$/;"	t	class:basic_string_view	typeref:typename:const Char *
iterator	include/spdlog/fmt/bundled/format.h	/^  using iterator = buffer_appender<Char>;$/;"	t	struct:detail::arg_formatter	typeref:typename:buffer_appender<Char>
iterator	include/spdlog/fmt/bundled/format.h	/^  using iterator = buffer_appender<Char>;$/;"	t	struct:detail::default_arg_formatter	typeref:typename:buffer_appender<Char>
iterator	include/spdlog/fmt/bundled/format.h	/^  using iterator = reserve_iterator<OutputIt>;$/;"	t	function:detail::do_write_float	typeref:typename:reserve_iterator<OutputIt>
iterator	include/spdlog/fmt/bundled/printf.h	/^  using iterator = buffer_appender<Char>;$/;"	t	function:detail::vprintf	typeref:typename:buffer_appender<Char>
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^  explicit iterator_buffer(Container& c)$/;"	f	class:detail::iterator_buffer
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^  explicit iterator_buffer(OutputIt out, size_t n = buffer_size)$/;"	f	class:detail::iterator_buffer
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^  explicit iterator_buffer(T* out, size_t = 0) : buffer<T>(out, 0, ~size_t()) {}$/;"	f	class:detail::iterator_buffer
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^  explicit iterator_buffer(T* out, size_t n = buffer_size)$/;"	f	class:detail::iterator_buffer
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^  explicit iterator_buffer(std::back_insert_iterator<Container> out, size_t = 0)$/;"	f	class:detail::iterator_buffer
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^  iterator_buffer(iterator_buffer&& other)$/;"	f	class:detail::iterator_buffer
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^class iterator_buffer final : public Traits, public buffer<T> {$/;"	c	namespace:detail
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^class iterator_buffer<T*, T, fixed_buffer_traits> final$/;"	c	namespace:detail
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^class iterator_buffer<std::back_insert_iterator<Container>,$/;"	c	namespace:detail
iterator_buffer	include/spdlog/fmt/bundled/core.h	/^template <typename T> class iterator_buffer<T*, T> final : public buffer<T> {$/;"	c	namespace:detail
iterator_category	include/spdlog/fmt/bundled/format.h	/^  using iterator_category = std::output_iterator_tag;$/;"	t	class:detail::counting_iterator	typeref:typename:std::output_iterator_tag
iterator_t	include/spdlog/fmt/bundled/format.h	/^using iterator_t = decltype(std::begin(std::declval<T&>()));$/;"	t	namespace:detail
ivory	include/spdlog/fmt/bundled/color.h	/^  ivory = 0xFFFFF0,                    \/\/ rgb(255,255,240)$/;"	e	enum:color
join	include/spdlog/fmt/bundled/format.h	/^auto join(It begin, Sentinel end, string_view sep) -> join_view<It, Sentinel> {$/;"	f	typeref:typename:join_view<It,Sentinel>
join	include/spdlog/fmt/bundled/format.h	/^auto join(Range&& range, string_view sep)$/;"	f	typeref:typename:join_view<detail::iterator_t<Range>,detail::sentinel_t<Range>>
join	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR auto join(const std::tuple<T...>& tuple, string_view sep)$/;"	f	typeref:typename:tuple_join_view<char,T...>
join	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR auto join(const std::tuple<T...>& tuple,$/;"	f	typeref:typename:tuple_join_view<wchar_t,T...>
join	include/spdlog/fmt/bundled/ranges.h	/^auto join(std::initializer_list<T> list, string_view sep)$/;"	f	typeref:typename:join_view<const T *,const T * >
join	include/spdlog/fmt/bundled/xchar.h	/^auto join(It begin, Sentinel end, wstring_view sep)$/;"	f	typeref:typename:join_view<It,Sentinel,wchar_t>
join	include/spdlog/fmt/bundled/xchar.h	/^auto join(Range&& range, wstring_view sep)$/;"	f	typeref:typename:join_view<detail::iterator_t<Range>,detail::sentinel_t<Range>,wchar_t>
join	include/spdlog/fmt/bundled/xchar.h	/^auto join(std::initializer_list<T> list, wstring_view sep)$/;"	f	typeref:typename:join_view<const T *,const T *,wchar_t>
join_view	include/spdlog/fmt/bundled/format.h	/^  join_view(It b, Sentinel e, basic_string_view<Char> s)$/;"	f	struct:join_view
join_view	include/spdlog/fmt/bundled/format.h	/^struct join_view : detail::view {$/;"	s
kafka_logger_async_mt	include/spdlog/sinks/kafka_sink.h	/^inline std::shared_ptr<spdlog::logger> kafka_logger_async_mt($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
kafka_logger_async_st	include/spdlog/sinks/kafka_sink.h	/^inline std::shared_ptr<spdlog::logger> kafka_logger_async_st($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
kafka_logger_mt	include/spdlog/sinks/kafka_sink.h	/^inline std::shared_ptr<logger> kafka_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
kafka_logger_st	include/spdlog/sinks/kafka_sink.h	/^inline std::shared_ptr<logger> kafka_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
kafka_sink	include/spdlog/sinks/kafka_sink.h	/^    kafka_sink(kafka_sink_config config)$/;"	f	class:spdlog::sinks::kafka_sink
kafka_sink	include/spdlog/sinks/kafka_sink.h	/^class kafka_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
kafka_sink_config	include/spdlog/sinks/kafka_sink.h	/^    kafka_sink_config(std::string addr, std::string topic, int flush_timeout_ms = 1000)$/;"	f	struct:spdlog::sinks::kafka_sink_config
kafka_sink_config	include/spdlog/sinks/kafka_sink.h	/^struct kafka_sink_config {$/;"	s	namespace:spdlog::sinks
kafka_sink_mt	include/spdlog/sinks/kafka_sink.h	/^using kafka_sink_mt = kafka_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:kafka_sink<std::mutex>
kafka_sink_st	include/spdlog/sinks/kafka_sink.h	/^using kafka_sink_st = kafka_sink<spdlog::details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:kafka_sink<spdlog::details::null_mutex>
kappa	include/spdlog/fmt/bundled/format.h	/^  static const int kappa = 1;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
kappa	include/spdlog/fmt/bundled/format.h	/^  static const int kappa = 2;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
khaki	include/spdlog/fmt/bundled/color.h	/^  khaki = 0xF0E68C,                    \/\/ rgb(240,230,140)$/;"	e	enum:color
kind	include/spdlog/fmt/bundled/core.h	/^  arg_id_kind kind;$/;"	m	struct:detail::arg_ref	typeref:typename:arg_id_kind
last_formatted	include/spdlog/sinks/ringbuffer_sink.h	/^    std::vector<std::string> last_formatted(size_t lim = 0) {$/;"	f	class:spdlog::sinks::ringbuffer_sink	typeref:typename:std::vector<std::string>
last_integer_type	include/spdlog/fmt/bundled/core.h	/^  last_integer_type = char_type,$/;"	e	enum:detail::type
last_log_secs_	include/spdlog/pattern_formatter.h	/^    std::chrono::seconds last_log_secs_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::chrono::seconds
last_message_time_	include/spdlog/pattern_formatter-inl.h	/^    log_clock::time_point last_message_time_;$/;"	m	class:spdlog::details::elapsed_formatter	typeref:typename:log_clock::time_point
last_msg_payload_	include/spdlog/sinks/dup_filter_sink.h	/^    std::string last_msg_payload_;$/;"	m	class:spdlog::sinks::dup_filter_sink	typeref:typename:std::string
last_msg_time_	include/spdlog/sinks/dup_filter_sink.h	/^    log_clock::time_point last_msg_time_;$/;"	m	class:spdlog::sinks::dup_filter_sink	typeref:typename:log_clock::time_point
last_numeric_type	include/spdlog/fmt/bundled/core.h	/^  last_numeric_type = long_double_type,$/;"	e	enum:detail::type
last_raw	include/spdlog/sinks/ringbuffer_sink.h	/^    std::vector<details::log_msg_buffer> last_raw(size_t lim = 0) {$/;"	f	class:spdlog::sinks::ringbuffer_sink	typeref:typename:std::vector<details::log_msg_buffer>
last_update_	include/spdlog/pattern_formatter-inl.h	/^    log_clock::time_point last_update_{std::chrono::seconds(0)};$/;"	m	class:spdlog::details::z_formatter	typeref:typename:log_clock::time_point
lavender	include/spdlog/fmt/bundled/color.h	/^  lavender = 0xE6E6FA,                 \/\/ rgb(230,230,250)$/;"	e	enum:color
lavender_blush	include/spdlog/fmt/bundled/color.h	/^  lavender_blush = 0xFFF0F5,           \/\/ rgb(255,240,245)$/;"	e	enum:color
lawn_green	include/spdlog/fmt/bundled/color.h	/^  lawn_green = 0x7CFC00,               \/\/ rgb(124,252,0)$/;"	e	enum:color
lazy_connect	include/spdlog/sinks/tcp_sink.h	/^    bool lazy_connect = false;  \/\/ if true connect on first log call instead of on constructio/;"	m	struct:spdlog::sinks::tcp_sink_config	typeref:typename:bool
left	include/spdlog/pattern_formatter.h	/^    enum class pad_side { left, right, center };$/;"	e	enum:spdlog::details::padding_info::pad_side
lemon_chiffon	include/spdlog/fmt/bundled/color.h	/^  lemon_chiffon = 0xFFFACD,            \/\/ rgb(255,250,205)$/;"	e	enum:color
length	include/mpris_media_player.h	/^  int64_t length;$/;"	m	struct:DBusMetadata	typeref:typename:int64_t
level	include/spdlog/common-inl.h	/^namespace level {$/;"	n	namespace:spdlog
level	include/spdlog/common.h	/^namespace level {$/;"	n	namespace:spdlog
level	include/spdlog/details/log_msg.h	/^    level::level_enum level{level::off};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:level::level_enum
level	include/spdlog/fwd.h	/^namespace level {$/;"	n	namespace:spdlog
level	include/spdlog/logger-inl.h	/^SPDLOG_INLINE level::level_enum logger::level() const {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE level::level_enum
level	include/spdlog/sinks/sink-inl.h	/^SPDLOG_INLINE spdlog::level::level_enum spdlog::sinks::sink::level() const {$/;"	f	class:spdlog::sinks::sink	typeref:typename:SPDLOG_INLINE spdlog::level::level_enum
level_	include/spdlog/logger.h	/^    spdlog::level_t level_{level::info};$/;"	m	class:spdlog::logger	typeref:typename:spdlog::level_t
level_	include/spdlog/sinks/sink.h	/^    level_t level_{level::trace};$/;"	m	class:spdlog::sinks::sink	typeref:typename:level_t
level_color	include/spdlog/sinks/qt_sinks.h	/^        QTextCharFormat level_color;$/;"	m	struct:spdlog::sinks::qt_color_sink::invoke_params	typeref:typename:QTextCharFormat
level_enum	include/spdlog/common.h	/^enum level_enum : int {$/;"	g	namespace:spdlog::level	typeref:typename:int
level_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::level_formatter
level_formatter	include/spdlog/pattern_formatter-inl.h	/^class level_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
level_string_views	include/spdlog/common-inl.h	/^    static string_view_t level_string_views[] SPDLOG_LEVEL_NAMES;$/;"	v	namespace:spdlog::level	typeref:typename:string_view_t[]SPDLOG_LEVEL_NAMES
level_t	include/spdlog/common.h	/^using level_t = details::null_atomic_int;$/;"	t	namespace:spdlog	typeref:typename:details::null_atomic_int
level_t	include/spdlog/common.h	/^using level_t = std::atomic<int>;$/;"	t	namespace:spdlog	typeref:typename:std::atomic<int>
levels_array	include/spdlog/sinks/syslog_sink.h	/^    using levels_array = std::array<int, 7>;$/;"	t	class:spdlog::sinks::syslog_sink	typeref:typename:std::array<int,7>
levels_array	include/spdlog/sinks/systemd_sink.h	/^    using levels_array = std::array<int, 7>;$/;"	t	class:spdlog::sinks::systemd_sink	typeref:typename:std::array<int,7>
lhs	include/spdlog/fmt/bundled/compile.h	/^  L lhs;$/;"	m	struct:detail::concat	typeref:typename:L
light_blue	include/spdlog/fmt/bundled/color.h	/^  light_blue = 0xADD8E6,               \/\/ rgb(173,216,230)$/;"	e	enum:color
light_coral	include/spdlog/fmt/bundled/color.h	/^  light_coral = 0xF08080,              \/\/ rgb(240,128,128)$/;"	e	enum:color
light_cyan	include/spdlog/fmt/bundled/color.h	/^  light_cyan = 0xE0FFFF,               \/\/ rgb(224,255,255)$/;"	e	enum:color
light_golden_rod_yellow	include/spdlog/fmt/bundled/color.h	/^  light_golden_rod_yellow = 0xFAFAD2,  \/\/ rgb(250,250,210)$/;"	e	enum:color
light_gray	include/spdlog/fmt/bundled/color.h	/^  light_gray = 0xD3D3D3,               \/\/ rgb(211,211,211)$/;"	e	enum:color
light_green	include/spdlog/fmt/bundled/color.h	/^  light_green = 0x90EE90,              \/\/ rgb(144,238,144)$/;"	e	enum:color
light_pink	include/spdlog/fmt/bundled/color.h	/^  light_pink = 0xFFB6C1,               \/\/ rgb(255,182,193)$/;"	e	enum:color
light_salmon	include/spdlog/fmt/bundled/color.h	/^  light_salmon = 0xFFA07A,             \/\/ rgb(255,160,122)$/;"	e	enum:color
light_sea_green	include/spdlog/fmt/bundled/color.h	/^  light_sea_green = 0x20B2AA,          \/\/ rgb(32,178,170)$/;"	e	enum:color
light_sky_blue	include/spdlog/fmt/bundled/color.h	/^  light_sky_blue = 0x87CEFA,           \/\/ rgb(135,206,250)$/;"	e	enum:color
light_slate_gray	include/spdlog/fmt/bundled/color.h	/^  light_slate_gray = 0x778899,         \/\/ rgb(119,136,153)$/;"	e	enum:color
light_steel_blue	include/spdlog/fmt/bundled/color.h	/^  light_steel_blue = 0xB0C4DE,         \/\/ rgb(176,196,222)$/;"	e	enum:color
light_yellow	include/spdlog/fmt/bundled/color.h	/^  light_yellow = 0xFFFFE0,             \/\/ rgb(255,255,224)$/;"	e	enum:color
lime	include/spdlog/fmt/bundled/color.h	/^  lime = 0x00FF00,                     \/\/ rgb(0,255,0)$/;"	e	enum:color
lime_green	include/spdlog/fmt/bundled/color.h	/^  lime_green = 0x32CD32,               \/\/ rgb(50,205,50)$/;"	e	enum:color
limit	include/spdlog/fmt/bundled/core.h	/^  auto limit(size_t size) -> size_t { return size; }$/;"	f	struct:detail::buffer_traits	typeref:typename:size_t
limit	include/spdlog/fmt/bundled/core.h	/^  auto limit(size_t size) -> size_t {$/;"	f	class:detail::fixed_buffer_traits	typeref:typename:size_t
limit_	include/spdlog/fmt/bundled/core.h	/^  size_t limit_;$/;"	m	class:detail::fixed_buffer_traits	typeref:typename:size_t
line	include/spdlog/common.h	/^    int line{0};$/;"	m	struct:spdlog::source_loc	typeref:typename:int
linen	include/spdlog/fmt/bundled/color.h	/^  linen = 0xFAF0E6,                    \/\/ rgb(250,240,230)$/;"	e	enum:color
literals	include/spdlog/fmt/bundled/compile.h	/^inline namespace literals {$/;"	n
literals	include/spdlog/fmt/bundled/format.h	/^inline namespace literals {$/;"	n
literals	include/spdlog/fmt/bundled/xchar.h	/^inline namespace literals {$/;"	n
lo_	include/spdlog/fmt/bundled/format.h	/^  uint64_t lo_, hi_;$/;"	m	class:detail::uint128_fallback	typeref:typename:uint64_t
load	include/spdlog/details/null_mutex.h	/^    int load(std::memory_order = std::memory_order_relaxed) const { return value; }$/;"	f	struct:spdlog::details::null_atomic_int	typeref:typename:int
load_argv_levels	include/spdlog/cfg/argv.h	/^inline void load_argv_levels(int argc, char **argv) {$/;"	f	namespace:spdlog::cfg	typeref:typename:void
load_argv_levels	include/spdlog/cfg/argv.h	/^inline void load_argv_levels(int argc, const char **argv) {$/;"	f	namespace:spdlog::cfg	typeref:typename:void
load_env_levels	include/spdlog/cfg/env.h	/^inline void load_env_levels() {$/;"	f	namespace:spdlog::cfg	typeref:typename:void
load_levels	include/spdlog/cfg/helpers-inl.h	/^SPDLOG_INLINE void load_levels(const std::string &input) {$/;"	f	namespace:spdlog::cfg::helpers	typeref:typename:SPDLOG_INLINE void
loc	include/spdlog/fmt/bundled/format.h	/^  locale_ref loc;$/;"	m	struct:detail::default_arg_formatter	typeref:typename:locale_ref
loc_	include/spdlog/fmt/bundled/chrono.h	/^  const std::locale& loc_;$/;"	m	class:detail::tm_writer	typeref:typename:const std::locale &
loc_	include/spdlog/fmt/bundled/core.h	/^  detail::locale_ref loc_;$/;"	m	class:basic_format_context	typeref:typename:detail::locale_ref
loc_value	include/spdlog/fmt/bundled/format.h	/^  loc_value(T value) : value_(detail::make_arg<format_context>(value)) {}$/;"	f	class:loc_value
loc_value	include/spdlog/fmt/bundled/format.h	/^  loc_value(T) {}$/;"	f	class:loc_value
loc_value	include/spdlog/fmt/bundled/format.h	/^class loc_value {$/;"	c
loc_writer	include/spdlog/fmt/bundled/format.h	/^template <typename Char = char> struct loc_writer {$/;"	s	namespace:detail
local	include/spdlog/common.h	/^    local,  \/\/ log localtime$/;"	e	enum:spdlog::pattern_time_type
local_alloc_t	include/spdlog/sinks/win_eventlog_sink.h	/^    SPDLOG_CONSTEXPR local_alloc_t() SPDLOG_NOEXCEPT : hlocal_(nullptr) {}$/;"	f	struct:spdlog::sinks::win_eventlog::internal::local_alloc_t	typeref:typename:SPDLOG_CONSTEXPR
local_alloc_t	include/spdlog/sinks/win_eventlog_sink.h	/^struct local_alloc_t {$/;"	s	namespace:spdlog::sinks::win_eventlog::internal
locale	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }$/;"	f	class:basic_format_context	typeref:typename:detail::locale_ref
locale	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
locale	include/spdlog/fmt/bundled/format.h	/^  bool locale : 1;$/;"	m	struct:detail::float_specs	typeref:typename:bool:1
locale	include/spdlog/fmt/bundled/format.h	/^  locale_ref locale;$/;"	m	struct:detail::arg_formatter	typeref:typename:locale_ref
locale	include/spdlog/fmt/bundled/printf.h	/^  auto locale() -> detail::locale_ref { return {}; }$/;"	f	class:basic_printf_context	typeref:typename:detail::locale_ref
locale_	include/spdlog/fmt/bundled/chrono.h	/^    std::locale locale_;$/;"	m	union:detail::get_locale::__anond6ffb532020a	typeref:typename:std::locale
locale_	include/spdlog/fmt/bundled/core.h	/^  const void* locale_;  \/\/ A type-erased pointer to std::locale.$/;"	m	class:detail::locale_ref	typeref:typename:const void *
locale_ref	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE locale_ref() : locale_(nullptr) {}$/;"	f	class:detail::locale_ref	typeref:typename:FMT_INLINE
locale_ref	include/spdlog/fmt/bundled/core.h	/^class locale_ref {$/;"	c	namespace:detail
locale_ref	include/spdlog/fmt/bundled/format-inl.h	/^locale_ref::locale_ref(const Locale& loc) : locale_(&loc) {$/;"	f	class:detail::locale_ref
localized	include/spdlog/fmt/bundled/chrono.h	/^  bool localized = false;$/;"	m	struct:detail::chrono_formatter	typeref:typename:bool
localized	include/spdlog/fmt/bundled/chrono.h	/^  bool localized = false;$/;"	m	struct:formatter	typeref:typename:bool
localized	include/spdlog/fmt/bundled/core.h	/^  bool localized : 1;$/;"	m	struct:format_specs	typeref:typename:bool:1
localized_	include/spdlog/fmt/bundled/chrono.h	/^  bool localized_ = false;$/;"	m	struct:formatter	typeref:typename:bool
localtime	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE std::tm localtime() SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE std::tm
localtime	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE std::tm localtime(const std::time_t &time_tt) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE std::tm
localtime	include/spdlog/fmt/bundled/chrono.h	/^inline auto localtime(std::chrono::local_time<Duration> time) -> std::tm {$/;"	f	typeref:typename:std::tm
localtime	include/spdlog/fmt/bundled/chrono.h	/^inline auto localtime(std::time_t time) -> std::tm {$/;"	f	typeref:typename:std::tm
localtime_s	include/spdlog/fmt/bundled/chrono.h	/^inline auto localtime_s(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:null<>
lock	include/spdlog/details/null_mutex.h	/^    void lock() const {}$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:void
log	include/mpris_media_player.h	/^  Log log;$/;"	m	class:MprisMediaPlayer	typeref:typename:Log
log	include/spdlog/details/thread_pool.h	/^enum class async_msg_type { log, flush, terminate };$/;"	e	enum:spdlog::details::async_msg_type
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, format_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, string_view_t msg) { log(source_loc{}, lvl, msg); }$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(level::level_enum lvl, wstring_view_t msg) { log(source_loc{}, lvl, msg); }$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(log_clock::time_point log_time,$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, format_string_t<Args...> fmt, Args &&...args/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, string_view_t msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, wformat_string_t<Args...> fmt, Args &&...arg/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/logger.h	/^    void log(source_loc loc, level::level_enum lvl, wstring_view_t msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
log	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::log(const details::log_msg &msg) {$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
log	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::log(const details::log_msg &msg) {$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void SPDLOG_INLINE
log	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::log(const details::log_msg &msg) {$/;"	f	class:spdlog::sinks::stdout_sink_base	typeref:typename:SPDLOG_INLINE void
log	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::log(const details::log_msg &msg) {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, format_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
log	include/spdlog/spdlog.h	/^inline void log(source_loc source, level::level_enum lvl, const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
log	include/spdlog/spdlog.h	/^inline void log(source_loc source,$/;"	f	namespace:spdlog	typeref:typename:void
log_	include/spdlog/logger.h	/^    void log_(source_loc loc, level::level_enum lvl, string_view_t fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
log_	include/spdlog/logger.h	/^    void log_(source_loc loc, level::level_enum lvl, wstring_view_t fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
log_clock	include/spdlog/common.h	/^using log_clock = std::chrono::system_clock;$/;"	t	namespace:spdlog	typeref:typename:std::chrono::system_clock
log_filename	include/log.h	/^  std::string log_filename;$/;"	m	class:Log	typeref:typename:std::string
log_it_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::log_it_(const spdlog::details::log_msg &log_msg,$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
log_level_	include/spdlog/sinks/dup_filter_sink.h	/^    level::level_enum log_level_;$/;"	m	class:spdlog::sinks::dup_filter_sink	typeref:typename:level::level_enum
log_levels	include/spdlog/details/registry.h	/^    using log_levels = std::unordered_map<std::string, level::level_enum>;$/;"	t	class:spdlog::details::registry	typeref:typename:std::unordered_map<std::string,level::level_enum>
log_levels_	include/spdlog/details/registry.h	/^    log_levels log_levels_;$/;"	m	class:spdlog::details::registry	typeref:typename:log_levels
log_msg	include/spdlog/details/log_msg-inl.h	/^SPDLOG_INLINE log_msg::log_msg(spdlog::log_clock::time_point log_time,$/;"	f	class:spdlog::details::log_msg	typeref:typename:SPDLOG_INLINE
log_msg	include/spdlog/details/log_msg-inl.h	/^SPDLOG_INLINE log_msg::log_msg(spdlog::source_loc loc,$/;"	f	class:spdlog::details::log_msg	typeref:typename:SPDLOG_INLINE
log_msg	include/spdlog/details/log_msg-inl.h	/^SPDLOG_INLINE log_msg::log_msg(string_view_t a_logger_name,$/;"	f	class:spdlog::details::log_msg	typeref:typename:SPDLOG_INLINE
log_msg	include/spdlog/details/log_msg.h	/^struct SPDLOG_API log_msg {$/;"	s	namespace:spdlog::details
log_msg_buffer	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer::log_msg_buffer(const log_msg &orig_msg)$/;"	f	class:spdlog::details::log_msg_buffer	typeref:typename:SPDLOG_INLINE
log_msg_buffer	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer::log_msg_buffer(const log_msg_buffer &other)$/;"	f	class:spdlog::details::log_msg_buffer	typeref:typename:SPDLOG_INLINE
log_msg_buffer	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer::log_msg_buffer(log_msg_buffer &&other) SPDLOG_NOEXCEPT$/;"	f	class:spdlog::details::log_msg_buffer	typeref:typename:SPDLOG_INLINE
log_msg_buffer	include/spdlog/details/log_msg_buffer.h	/^class SPDLOG_API log_msg_buffer : public log_msg {$/;"	c	namespace:spdlog::details
logger	include/log.h	/^  std::shared_ptr<spdlog::logger> logger;$/;"	m	class:Log	typeref:typename:std::shared_ptr<spdlog::logger>
logger	include/spdlog/logger-inl.h	/^SPDLOG_INLINE logger::logger(const logger &other)$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE
logger	include/spdlog/logger-inl.h	/^SPDLOG_INLINE logger::logger(logger &&other) SPDLOG_NOEXCEPT$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE
logger	include/spdlog/logger.h	/^    explicit logger(std::string name)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^    logger(std::string name, It begin, It end)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^    logger(std::string name, sink_ptr single_sink)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^    logger(std::string name, sinks_init_list sinks)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^class SPDLOG_API logger {$/;"	c	namespace:spdlog
logger_map_mutex_	include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::mutex
logger_name	include/spdlog/details/log_msg.h	/^    string_view_t logger_name;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:string_view_t
loggers_	include/spdlog/details/registry.h	/^    std::unordered_map<std::string, std::shared_ptr<logger>> loggers_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::unordered_map<std::string,std::shared_ptr<logger>>
long_double_type	include/spdlog/fmt/bundled/core.h	/^  long_double_type,$/;"	e	enum:detail::type
long_double_value	include/spdlog/fmt/bundled/core.h	/^    long double long_double_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:long double
long_long_type	include/spdlog/fmt/bundled/core.h	/^  long_long_type,$/;"	e	enum:detail::type
long_long_value	include/spdlog/fmt/bundled/core.h	/^    long long long_long_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:long long
long_short	include/spdlog/fmt/bundled/core.h	/^enum { long_short = sizeof(long) == sizeof(int) };$/;"	e	enum:detail::__anon0accc0920603
long_type	include/spdlog/fmt/bundled/core.h	/^using long_type = conditional_t<long_short, int, long long>;$/;"	t	namespace:detail	typeref:typename:conditional_t<long_short,int,long long>
lossless_integral_conversion	include/spdlog/fmt/bundled/chrono.h	/^FMT_CONSTEXPR auto lossless_integral_conversion(const From from, int& ec)$/;"	f	namespace:safe_duration_cast	typeref:typename:To
low	include/spdlog/fmt/bundled/format.h	/^  constexpr auto low() const noexcept -> uint64_t { return lo_; }$/;"	f	class:detail::uint128_fallback	typeref:typename:auto
lower_count	include/spdlog/fmt/bundled/format-inl.h	/^  unsigned char lower_count;$/;"	m	struct:detail::singleton	typeref:typename:unsigned char
m_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit m_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::m_formatter
m_formatter	include/spdlog/pattern_formatter-inl.h	/^class m_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
magenta	include/spdlog/fmt/bundled/color.h	/^  magenta = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	e	enum:color
magenta	include/spdlog/fmt/bundled/color.h	/^  magenta,$/;"	e	enum:terminal_color
magenta	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t magenta = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
main	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	src/main.cpp	/^int main(void) {$/;"	f	typeref:typename:int
make_arg	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR FMT_INLINE auto make_arg(T& val) -> value<Context> {$/;"	f	namespace:detail	typeref:typename:value<Context>
make_arg	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto make_arg(T& val) -> basic_format_arg<Context> {$/;"	f	namespace:detail	typeref:typename:basic_format_arg<Context>
make_arg	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR inline auto make_arg(T& val) -> basic_format_arg<Context> {$/;"	f	namespace:detail	typeref:typename:basic_format_arg<Context>
make_arg_formatter	include/spdlog/fmt/bundled/printf.h	/^auto make_arg_formatter(buffer_appender<Char> iter, format_specs<Char>& s)$/;"	f	namespace:detail	typeref:typename:arg_formatter<Char>
make_background_color	include/spdlog/fmt/bundled/color.h	/^FMT_CONSTEXPR auto make_background_color(detail::color_type background) noexcept$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
make_concat	include/spdlog/fmt/bundled/compile.h	/^constexpr concat<L, R> make_concat(L lhs, R rhs) {$/;"	f	namespace:detail	typeref:typename:concat<L,R>
make_emphasis	include/spdlog/fmt/bundled/color.h	/^FMT_CONSTEXPR auto make_emphasis(emphasis em) noexcept$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
make_foreground_color	include/spdlog/fmt/bundled/color.h	/^FMT_CONSTEXPR auto make_foreground_color(detail::color_type foreground) noexcept$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
make_format_args	include/spdlog/fmt/bundled/core.h	/^constexpr auto make_format_args(T&... args)$/;"	f	typeref:typename:format_arg_store<Context,remove_cvref_t<T>...>
make_index_sequence	include/spdlog/fmt/bundled/ranges.h	/^template <size_t N> using make_index_sequence = std::make_index_sequence<N>;$/;"	t	namespace:detail	typeref:typename:std::make_index_sequence<N>
make_index_sequence	include/spdlog/fmt/bundled/ranges.h	/^using make_index_sequence = make_integer_sequence<size_t, N>;$/;"	t	namespace:detail	typeref:typename:make_integer_sequence<size_t,N>
make_integer_sequence	include/spdlog/fmt/bundled/ranges.h	/^struct make_integer_sequence : make_integer_sequence<T, N - 1, N - 1, Ns...> {};$/;"	s	namespace:detail
make_integer_sequence	include/spdlog/fmt/bundled/ranges.h	/^struct make_integer_sequence<T, 0, Ns...> : integer_sequence<T, Ns...> {};$/;"	s	namespace:detail
make_printf_args	include/spdlog/fmt/bundled/printf.h	/^inline auto make_printf_args(const T&... args)$/;"	f	typeref:typename:format_arg_store<printf_context,T...>
make_text	include/spdlog/fmt/bundled/compile.h	/^constexpr text<Char> make_text(basic_string_view<Char> s, size_t pos,$/;"	f	namespace:detail	typeref:typename:text<Char>
make_unique	include/spdlog/common.h	/^std::unique_ptr<T> make_unique(Args &&...args) {$/;"	f	namespace:spdlog::details	typeref:typename:std::unique_ptr<T>
make_unsigned_char	include/spdlog/fmt/bundled/format.h	/^using make_unsigned_char =$/;"	t	namespace:detail	typeref:typename:conditional_t<std::is_integral<Char>::value,std::make_unsigned<Char>,type_identity<uint32_t>>::type
make_unsigned_or_bool	include/spdlog/fmt/bundled/printf.h	/^template <> struct make_unsigned_or_bool<bool> {$/;"	s	namespace:detail
make_unsigned_or_bool	include/spdlog/fmt/bundled/printf.h	/^template <typename T> struct make_unsigned_or_bool : std::make_unsigned<T> {};$/;"	s	namespace:detail
make_unsigned_or_unchanged	include/spdlog/fmt/bundled/chrono.h	/^struct make_unsigned_or_unchanged {$/;"	s	namespace:detail
make_unsigned_or_unchanged	include/spdlog/fmt/bundled/chrono.h	/^template <typename T> struct make_unsigned_or_unchanged<T, true> {$/;"	s	namespace:detail
make_wformat_args	include/spdlog/fmt/bundled/xchar.h	/^constexpr auto make_wformat_args(const T&... args)$/;"	f	typeref:typename:format_arg_store<wformat_context,T...>
make_wprintf_args	include/spdlog/fmt/bundled/printf.h	/^inline auto make_wprintf_args(const T&... args)$/;"	f	typeref:typename:format_arg_store<wprintf_context,T...>
make_write_int_arg	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto make_write_int_arg(T value, sign_t sign)$/;"	f	namespace:detail	typeref:typename:write_int_arg<uint32_or_64_or_128_t<T>>
manual_indexing_id	include/spdlog/fmt/bundled/compile.h	/^enum { manual_indexing_id = -1 };$/;"	e	enum:detail::__anonadd9e9b20103
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(T val) -> char_type {$/;"	f	struct:detail::arg_mapper	typeref:typename:char_type
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(T& val)$/;"	f	struct:detail::arg_mapper	typeref:typename:decltype(FMT_DECLTYPE_THIS do_map (val))
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(T) -> unformattable_char {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable_char
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(bool val) -> bool { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:bool
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(char_type* val) -> const char_type* {$/;"	f	struct:detail::arg_mapper	typeref:typename:const char_type *
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(const T (&values)[N]) -> const T (&)[N] {$/;"	f	struct:detail::arg_mapper	typeref:typename:const T (&)[N]{}FMT_CONSTEXPR FMT_INLINE auto map (const T & val)->decltype(FMT_DECLTYPE_THIS map (U ()))
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(const T& named_arg)$/;"	f	struct:detail::arg_mapper	typeref:typename:decltype(FMT_DECLTYPE_THIS map (named_arg.value))
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(const T& val)$/;"	f	struct:detail::arg_mapper	typeref:typename:basic_string_view<char_type>
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(const T&) -> unformattable_char {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable_char
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(const char_type* val) -> const char_type* {$/;"	f	struct:detail::arg_mapper	typeref:typename:const char_type *
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(const void* val) -> const void* {$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(double val) -> double { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:double
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(float val) -> float { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:float
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(int val) -> int { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:int
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(int128_opt val) -> int128_opt {$/;"	f	struct:detail::arg_mapper	typeref:typename:int128_opt
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(long double val) -> long double {$/;"	f	struct:detail::arg_mapper	typeref:typename:long double
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(long long val) -> long long { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:long long
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(long val) -> long_type { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:long_type
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(short val) -> int { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:int
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(signed char val) -> int { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:int
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(std::nullptr_t val) -> const void* {$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(uint128_opt val) -> uint128_opt {$/;"	f	struct:detail::arg_mapper	typeref:typename:uint128_opt
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(unsigned char val) -> unsigned {$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(unsigned long long val)$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned long long
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(unsigned long val) -> ulong_type {$/;"	f	struct:detail::arg_mapper	typeref:typename:ulong_type
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(unsigned short val) -> unsigned {$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(unsigned val) -> unsigned { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto map(void* val) -> const void* { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto map(const T&) -> unformattable_pointer {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable_pointer
map	include/spdlog/fmt/bundled/core.h	/^  auto map(...) -> unformattable { return {}; }$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable
map	include/spdlog/fmt/bundled/ranges.h	/^  static auto map(T&& value) -> T&& {$/;"	f	struct:detail::range_mapper	typeref:typename:T &&
map	include/spdlog/fmt/bundled/ranges.h	/^  static auto map(T&& value)$/;"	f	struct:detail::range_mapper	typeref:typename:decltype(mapper ().map (static_cast<T &&> (value)))
map	include/spdlog/fmt/bundled/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
mapped_type	include/spdlog/fmt/bundled/args.h	/^    static constexpr detail::type mapped_type =$/;"	m	struct:dynamic_format_arg_store::need_copy	typeref:typename:detail::type
mapped_type	include/spdlog/fmt/bundled/core.h	/^  using mapped_type = conditional_t<$/;"	t	function:detail::parse_format_specs
mapped_type_constant	include/spdlog/fmt/bundled/core.h	/^using mapped_type_constant =$/;"	t	namespace:detail
mapper	include/spdlog/fmt/bundled/ranges.h	/^  using mapper = arg_mapper<Context>;$/;"	t	struct:detail::range_mapper	typeref:typename:arg_mapper<Context>
maroon	include/spdlog/fmt/bundled/color.h	/^  maroon = 0x800000,                   \/\/ rgb(128,0,0)$/;"	e	enum:color
max_files_	include/spdlog/sinks/daily_file_sink.h	/^    uint16_t max_files_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:uint16_t
max_files_	include/spdlog/sinks/hourly_file_sink.h	/^    uint16_t max_files_;$/;"	m	class:spdlog::sinks::hourly_file_sink	typeref:typename:uint16_t
max_files_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_files_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:std::size_t
max_items_	include/spdlog/details/circular_q.h	/^    size_t max_items_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:size_t
max_k	include/spdlog/fmt/bundled/format.h	/^  static const int max_k = 341;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
max_k	include/spdlog/fmt/bundled/format.h	/^  static const int max_k = 46;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
max_lines	include/spdlog/sinks/qt_sinks.h	/^        int max_lines;$/;"	m	struct:spdlog::sinks::qt_color_sink::invoke_params	typeref:typename:int
max_lines_	include/spdlog/sinks/qt_sinks.h	/^    int max_lines_;$/;"	m	class:spdlog::sinks::qt_color_sink	typeref:typename:int
max_packed_args	include/spdlog/fmt/bundled/core.h	/^enum { max_packed_args = 62 \/ packed_arg_bits };$/;"	e	enum:detail::__anon0accc0920903
max_size	include/spdlog/fmt/bundled/chrono.h	/^  static constexpr const size_t max_size = 32;$/;"	m	struct:detail::codecvt_result	typeref:typename:const size_t
max_size	include/spdlog/fmt/bundled/core.h	/^  auto max_size() const -> int {$/;"	f	class:basic_format_args	typeref:typename:int
max_size	include/spdlog/fmt/bundled/core.h	/^  enum { max_size = 4 };$/;"	e	enum:detail::fill_t::__anon0accc0920d03
max_size_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_size_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:std::size_t
max_skip_duration_	include/spdlog/sinks/dup_filter_sink.h	/^    std::chrono::microseconds max_skip_duration_;$/;"	m	class:spdlog::sinks::dup_filter_sink	typeref:typename:std::chrono::microseconds
max_value	include/spdlog/fmt/bundled/format.h	/^template <typename T> constexpr auto max_value() -> T {$/;"	f	namespace:detail	typeref:typename:T
maybe_const_range	include/spdlog/fmt/bundled/ranges.h	/^using maybe_const_range =$/;"	t	namespace:detail	typeref:typename:conditional_t<has_const_begin_end<R>::value,const R,R>
maybe_set_debug_format	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR auto maybe_set_debug_format(Formatter& f, bool set)$/;"	f	namespace:detail	typeref:typename:decltype(f.set_debug_format (set))
maybe_set_debug_format	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR void maybe_set_debug_format(Formatter&, ...) {}$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
maybe_set_debug_format	include/spdlog/fmt/bundled/std.h	/^  FMT_CONSTEXPR static auto maybe_set_debug_format(U& u, bool set)$/;"	f	struct:formatter	typeref:typename:decltype(u.set_debug_format (set))
maybe_set_debug_format	include/spdlog/fmt/bundled/std.h	/^  FMT_CONSTEXPR static void maybe_set_debug_format(U&, ...) {}$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
mdc	include/spdlog/mdc.h	/^class SPDLOG_API mdc {$/;"	c	namespace:spdlog
mdc_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit mdc_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::mdc_formatter
mdc_formatter	include/spdlog/pattern_formatter-inl.h	/^class mdc_formatter : public flag_formatter {$/;"	c	namespace:spdlog::details
mdc_formatter_	include/spdlog/pattern_formatter-inl.h	/^    mdc_formatter<null_scoped_padder> mdc_formatter_{padding_info{}};$/;"	m	class:spdlog::details::full_formatter	typeref:typename:mdc_formatter<null_scoped_padder>
mdc_map_t	include/spdlog/mdc.h	/^    using mdc_map_t = std::map<std::string, std::string>;$/;"	t	class:spdlog::mdc	typeref:typename:std::map<std::string,std::string>
medium_aquamarine	include/spdlog/fmt/bundled/color.h	/^  medium_aquamarine = 0x66CDAA,        \/\/ rgb(102,205,170)$/;"	e	enum:color
medium_blue	include/spdlog/fmt/bundled/color.h	/^  medium_blue = 0x0000CD,              \/\/ rgb(0,0,205)$/;"	e	enum:color
medium_orchid	include/spdlog/fmt/bundled/color.h	/^  medium_orchid = 0xBA55D3,            \/\/ rgb(186,85,211)$/;"	e	enum:color
medium_purple	include/spdlog/fmt/bundled/color.h	/^  medium_purple = 0x9370DB,            \/\/ rgb(147,112,219)$/;"	e	enum:color
medium_sea_green	include/spdlog/fmt/bundled/color.h	/^  medium_sea_green = 0x3CB371,         \/\/ rgb(60,179,113)$/;"	e	enum:color
medium_slate_blue	include/spdlog/fmt/bundled/color.h	/^  medium_slate_blue = 0x7B68EE,        \/\/ rgb(123,104,238)$/;"	e	enum:color
medium_spring_green	include/spdlog/fmt/bundled/color.h	/^  medium_spring_green = 0x00FA9A,      \/\/ rgb(0,250,154)$/;"	e	enum:color
medium_turquoise	include/spdlog/fmt/bundled/color.h	/^  medium_turquoise = 0x48D1CC,         \/\/ rgb(72,209,204)$/;"	e	enum:color
medium_violet_red	include/spdlog/fmt/bundled/color.h	/^  medium_violet_red = 0xC71585,        \/\/ rgb(199,21,133)$/;"	e	enum:color
memory_buf_t	include/spdlog/common.h	/^using memory_buf_t = fmt::basic_memory_buffer<char, 250>;$/;"	t	namespace:spdlog	typeref:typename:fmt::basic_memory_buffer<char,250>
memory_buf_t	include/spdlog/common.h	/^using memory_buf_t = std::string;$/;"	t	namespace:spdlog	typeref:typename:std::string
memory_buffer	include/spdlog/fmt/bundled/format.h	/^using memory_buffer = basic_memory_buffer<char>;$/;"	t	typeref:typename:basic_memory_buffer<char>
messages_	include/spdlog/details/backtracer.h	/^    circular_q<log_msg_buffer> messages_;$/;"	m	class:spdlog::details::backtracer	typeref:typename:circular_q<log_msg_buffer>
meta_method_	include/spdlog/sinks/qt_sinks.h	/^    std::string meta_method_;$/;"	m	class:spdlog::sinks::qt_sink	typeref:typename:std::string
midnight_blue	include/spdlog/fmt/bundled/color.h	/^  midnight_blue = 0x191970,            \/\/ rgb(25,25,112)$/;"	e	enum:color
milliseconds	include/spdlog/fmt/bundled/chrono.h	/^  using milliseconds = std::chrono::duration<rep, std::milli>;$/;"	t	struct:detail::chrono_formatter	typeref:typename:std::chrono::duration<rep,std::milli>
min_k	include/spdlog/fmt/bundled/format.h	/^  static const int min_k = -292;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
min_k	include/spdlog/fmt/bundled/format.h	/^  static const int min_k = -31;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
mint_cream	include/spdlog/fmt/bundled/color.h	/^  mint_cream = 0xF5FFFA,               \/\/ rgb(245,255,250)$/;"	e	enum:color
minute	include/spdlog/fmt/bundled/chrono.h	/^  auto minute() const -> Rep {$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
misty_rose	include/spdlog/fmt/bundled/color.h	/^  misty_rose = 0xFFE4E1,               \/\/ rgb(255,228,225)$/;"	e	enum:color
mkdir_	include/spdlog/details/os-inl.h	/^static SPDLOG_INLINE bool mkdir_(const filename_t &path) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE bool
moccasin	include/spdlog/fmt/bundled/color.h	/^  moccasin = 0xFFE4B5,                 \/\/ rgb(255,228,181)$/;"	e	enum:color
mod	include/spdlog/fmt/bundled/chrono.h	/^inline auto mod(T x, int y) -> T {$/;"	f	namespace:detail	typeref:typename:T
mongo_logger_mt	include/spdlog/sinks/mongo_sink.h	/^inline std::shared_ptr<logger> mongo_logger_mt($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
mongo_logger_st	include/spdlog/sinks/mongo_sink.h	/^inline std::shared_ptr<logger> mongo_logger_st($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
mongo_sink	include/spdlog/sinks/mongo_sink.h	/^    mongo_sink(const std::string &db_name,$/;"	f	class:spdlog::sinks::mongo_sink
mongo_sink	include/spdlog/sinks/mongo_sink.h	/^    mongo_sink(std::shared_ptr<mongocxx::instance> instance,$/;"	f	class:spdlog::sinks::mongo_sink
mongo_sink	include/spdlog/sinks/mongo_sink.h	/^class mongo_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
mongo_sink_mt	include/spdlog/sinks/mongo_sink.h	/^using mongo_sink_mt = mongo_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:mongo_sink<std::mutex>
mongo_sink_st	include/spdlog/sinks/mongo_sink.h	/^using mongo_sink_st = mongo_sink<spdlog::details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:mongo_sink<spdlog::details::null_mutex>
monostate	include/spdlog/fmt/bundled/core.h	/^  constexpr monostate() {}$/;"	f	struct:monostate
monostate	include/spdlog/fmt/bundled/core.h	/^struct monostate {$/;"	s
months	include/spdlog/pattern_formatter-inl.h	/^static const std::array<const char *, 12> months{$/;"	v	namespace:spdlog::details	typeref:typename:const std::array<const char *,12>
move	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void move(basic_memory_buffer& other) {$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
mpmc_blocking_queue	include/spdlog/details/mpmc_blocking_q.h	/^    explicit mpmc_blocking_queue(size_t max_items)$/;"	f	class:spdlog::details::mpmc_blocking_queue
mpmc_blocking_queue	include/spdlog/details/mpmc_blocking_q.h	/^class mpmc_blocking_queue {$/;"	c	namespace:spdlog::details
msg_	include/spdlog/common.h	/^    std::string msg_;$/;"	m	class:spdlog::spdlog_ex	typeref:typename:std::string
msg_type	include/spdlog/details/thread_pool.h	/^    async_msg_type msg_type{async_msg_type::log};$/;"	m	struct:spdlog::details::async_msg	typeref:typename:async_msg_type
msvc_sink	include/spdlog/sinks/msvc_sink.h	/^    msvc_sink(bool check_debugger_present)$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	include/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
msvc_sink_mt	include/spdlog/sinks/msvc_sink.h	/^using msvc_sink_mt = msvc_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink<std::mutex>
msvc_sink_st	include/spdlog/sinks/msvc_sink.h	/^using msvc_sink_st = msvc_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink<details::null_mutex>
multiply	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void multiply(UInt value) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
multiply	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void multiply(uint32_t value) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
multiply	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline auto multiply(uint64_t lhs, uint64_t rhs) -> uint64_t {$/;"	f	namespace:detail	typeref:typename:uint64_t
mutex	include/spdlog/details/console_globals.h	/^    static mutex_t &mutex() {$/;"	f	struct:spdlog::details::console_mutex	typeref:typename:mutex_t &
mutex	include/spdlog/details/console_globals.h	/^    static mutex_t &mutex() {$/;"	f	struct:spdlog::details::console_nullmutex	typeref:typename:mutex_t &
mutex_	include/spdlog/details/backtracer.h	/^    mutable std::mutex mutex_;$/;"	m	class:spdlog::details::backtracer	typeref:typename:std::mutex
mutex_	include/spdlog/details/periodic_worker.h	/^    std::mutex mutex_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:std::mutex
mutex_	include/spdlog/sinks/ansicolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:mutex_t &
mutex_	include/spdlog/sinks/base_sink.h	/^    Mutex mutex_;$/;"	m	class:spdlog::sinks::base_sink	typeref:typename:Mutex
mutex_	include/spdlog/sinks/stdout_sinks.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::stdout_sink_base	typeref:typename:mutex_t &
mutex_	include/spdlog/sinks/wincolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:mutex_t &
mutex_t	include/spdlog/details/console_globals.h	/^    using mutex_t = null_mutex;$/;"	t	struct:spdlog::details::console_nullmutex	typeref:typename:null_mutex
mutex_t	include/spdlog/details/console_globals.h	/^    using mutex_t = std::mutex;$/;"	t	struct:spdlog::details::console_mutex	typeref:typename:std::mutex
mutex_t	include/spdlog/sinks/ansicolor_sink.h	/^    using mutex_t = typename ConsoleMutex::mutex_t;$/;"	t	class:spdlog::sinks::ansicolor_sink	typeref:typename:ConsoleMutex::mutex_t
mutex_t	include/spdlog/sinks/stdout_sinks.h	/^    using mutex_t = typename ConsoleMutex::mutex_t;$/;"	t	class:spdlog::sinks::stdout_sink_base	typeref:typename:ConsoleMutex::mutex_t
mutex_t	include/spdlog/sinks/wincolor_sink.h	/^    using mutex_t = typename ConsoleMutex::mutex_t;$/;"	t	class:spdlog::sinks::wincolor_sink	typeref:typename:ConsoleMutex::mutex_t
n_levels	include/spdlog/common.h	/^    n_levels$/;"	e	enum:spdlog::level::level_enum
name	include/spdlog/fmt/bundled/compile.h	/^  basic_string_view<Char> name;$/;"	m	struct:detail::runtime_named_field	typeref:typename:basic_string_view<Char>
name	include/spdlog/fmt/bundled/core.h	/^    basic_string_view<Char> name;$/;"	m	union:detail::arg_ref::value	typeref:typename:basic_string_view<Char>
name	include/spdlog/fmt/bundled/core.h	/^  const Char* name;$/;"	m	struct:detail::named_arg	typeref:typename:const Char *
name	include/spdlog/fmt/bundled/core.h	/^  const Char* name;$/;"	m	struct:detail::named_arg_info	typeref:typename:const Char *
name	include/spdlog/fmt/bundled/core.h	/^enum class arg_id_kind { none, index, name };$/;"	e	enum:detail::arg_id_kind
name	include/spdlog/fmt/bundled/format.h	/^  static constexpr auto name = Str.data;$/;"	m	struct:detail::statically_named_arg	typeref:typename:auto
name	include/spdlog/logger-inl.h	/^SPDLOG_INLINE const std::string &logger::name() const { return name_; }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE const std::string &
name_	include/spdlog/logger.h	/^    std::string name_;$/;"	m	class:spdlog::logger	typeref:typename:std::string
name_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit name_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::name_formatter
name_formatter	include/spdlog/pattern_formatter-inl.h	/^class name_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
named_arg	include/spdlog/fmt/bundled/core.h	/^  named_arg(const Char* n, const T& v) : name(n), value(v) {}$/;"	f	struct:detail::named_arg
named_arg	include/spdlog/fmt/bundled/core.h	/^template <typename Char, typename T> struct named_arg : view {$/;"	s	namespace:detail
named_arg_info	include/spdlog/fmt/bundled/core.h	/^template <typename Char> struct named_arg_info {$/;"	s	namespace:detail
named_arg_value	include/spdlog/fmt/bundled/core.h	/^template <typename Char> struct named_arg_value {$/;"	s	namespace:detail
named_args	include/spdlog/fmt/bundled/core.h	/^    named_arg_value<char_type> named_args;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:named_arg_value<char_type>
named_args	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE auto named_args() -> std::nullptr_t {$/;"	f	struct:detail::arg_data	typeref:typename:std::nullptr_t
named_args	include/spdlog/fmt/bundled/core.h	/^  auto named_args() -> named_arg_info<Char>* { return named_args_; }$/;"	f	struct:detail::arg_data	typeref:typename:named_arg_info<Char> *
named_args_	include/spdlog/fmt/bundled/core.h	/^  named_arg_info<Char> named_args_[NUM_NAMED_ARGS];$/;"	m	struct:detail::arg_data	typeref:typename:named_arg_info<Char>[]
named_info_	include/spdlog/fmt/bundled/args.h	/^  std::vector<detail::named_arg_info<char_type>> named_info_;$/;"	m	class:dynamic_format_arg_store	typeref:typename:std::vector<detail::named_arg_info<char_type>>
navajo_white	include/spdlog/fmt/bundled/color.h	/^  navajo_white = 0xFFDEAD,             \/\/ rgb(255,222,173)$/;"	e	enum:color
navy	include/spdlog/fmt/bundled/color.h	/^  navy = 0x000080,                     \/\/ rgb(0,0,128)$/;"	e	enum:color
need_copy	include/spdlog/fmt/bundled/args.h	/^  template <typename T> struct need_copy {$/;"	s	class:dynamic_format_arg_store
need_localtime	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::need_localtime(bool need) { need_localtime_ = need; }$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE void
need_localtime_	include/spdlog/pattern_formatter.h	/^    bool need_localtime_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:bool
needs_escape	include/spdlog/fmt/bundled/format.h	/^inline auto needs_escape(uint32_t cp) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
negative	include/spdlog/fmt/bundled/chrono.h	/^  bool negative;$/;"	m	struct:detail::chrono_formatter	typeref:typename:bool
nested	include/spdlog/fmt/bundled/format.h	/^  auto nested(const T& value) const -> nested_view<T> {$/;"	f	struct:nested_formatter	typeref:typename:nested_view<T>
nested_formatter	include/spdlog/fmt/bundled/format.h	/^  constexpr nested_formatter() : width_(0), align_(align_t::none) {}$/;"	f	struct:nested_formatter
nested_formatter	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct nested_formatter {$/;"	s
nested_view	include/spdlog/fmt/bundled/format.h	/^template <typename T> struct nested_view {$/;"	s
never	include/spdlog/common.h	/^enum class color_mode { always, automatic, never };$/;"	e	enum:spdlog::color_mode
next	include/spdlog/fmt/bundled/args.h	/^    std::unique_ptr<node<>> next;$/;"	m	struct:detail::dynamic_arg_list::node	typeref:typename:std::unique_ptr<node<>>
next	include/spdlog/fmt/bundled/format.h	/^  auto next(next_state& state) const -> int {$/;"	f	class:detail::digit_grouping	typeref:typename:int
next	src/mpris_media_player.cpp	/^void MprisMediaPlayer::next() { execute_base_method_func(Next); }$/;"	f	class:MprisMediaPlayer	typeref:typename:void
next_arg_id	include/spdlog/fmt/bundled/compile.h	/^  int next_arg_id;$/;"	m	struct:detail::parse_specs_result	typeref:typename:int
next_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto next_arg_id() -> int {$/;"	f	class:basic_format_parse_context	typeref:typename:int
next_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto next_arg_id() -> int {$/;"	f	class:detail::compile_parse_context	typeref:typename:int
next_arg_id_	include/spdlog/fmt/bundled/core.h	/^  int next_arg_id_;$/;"	m	class:basic_format_parse_context	typeref:typename:int
next_rotation_tp_	include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point next_rotation_tp_() {$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:log_clock::time_point
next_rotation_tp_	include/spdlog/sinks/hourly_file_sink.h	/^    log_clock::time_point next_rotation_tp_() {$/;"	f	class:spdlog::sinks::hourly_file_sink	typeref:typename:log_clock::time_point
next_state	include/spdlog/fmt/bundled/format.h	/^  struct next_state {$/;"	s	class:detail::digit_grouping
no_value	include/spdlog/fmt/bundled/core.h	/^    monostate no_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:monostate
node	include/spdlog/fmt/bundled/args.h	/^  template <typename = void> struct node {$/;"	s	class:detail::dynamic_arg_list
none	include/spdlog/fmt/bundled/chrono.h	/^  none,$/;"	e	enum:detail::pad_type
none	include/spdlog/fmt/bundled/core.h	/^  none,$/;"	e	enum:presentation_type
none	include/spdlog/fmt/bundled/core.h	/^enum class arg_id_kind { none, index, name };$/;"	e	enum:detail::arg_id_kind
none_type	include/spdlog/fmt/bundled/core.h	/^  none_type,$/;"	e	enum:detail::type
normalize	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto normalize(basic_fp<F> value) -> basic_fp<F> {$/;"	f	namespace:detail	typeref:typename:basic_fp<F>
now	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE spdlog::log_clock::time_point now() SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE spdlog::log_clock::time_point
now_tm	include/spdlog/sinks/daily_file_sink.h	/^    tm now_tm(log_clock::time_point tp) {$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:tm
now_tm	include/spdlog/sinks/hourly_file_sink.h	/^    tm now_tm(log_clock::time_point tp) {$/;"	f	class:spdlog::sinks::hourly_file_sink	typeref:typename:tm
null	include/spdlog/fmt/bundled/chrono.h	/^template <typename T = void> struct null {};$/;"	s	namespace:detail
null_atomic_int	include/spdlog/details/null_mutex.h	/^    explicit null_atomic_int(int new_value)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	include/spdlog/details/null_mutex.h	/^struct null_atomic_int {$/;"	s	namespace:spdlog::details
null_chrono_spec_handler	include/spdlog/fmt/bundled/chrono.h	/^template <typename Derived> struct null_chrono_spec_handler {$/;"	s	namespace:detail
null_logger_mt	include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_mt(const std::string &logger_name) {$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
null_logger_st	include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_st(const std::string &logger_name) {$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
null_mutex	include/spdlog/details/null_mutex.h	/^struct null_mutex {$/;"	s	namespace:spdlog::details
null_scoped_padder	include/spdlog/pattern_formatter-inl.h	/^    null_scoped_padder(size_t \/*wrapped_size*\/,$/;"	f	struct:spdlog::details::null_scoped_padder
null_scoped_padder	include/spdlog/pattern_formatter-inl.h	/^struct null_scoped_padder {$/;"	s	namespace:spdlog::details
null_sink	include/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
null_sink_mt	include/spdlog/sinks/null_sink.h	/^using null_sink_mt = null_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:null_sink<details::null_mutex>
null_sink_st	include/spdlog/sinks/null_sink.h	/^using null_sink_st = null_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:null_sink<details::null_mutex>
num_args	include/spdlog/fmt/bundled/core.h	/^  constexpr auto num_args() const -> int { return num_args_; }$/;"	f	class:detail::compile_parse_context	typeref:typename:int
num_args	include/spdlog/fmt/bundled/core.h	/^  static const size_t num_args = sizeof...(Args);$/;"	m	class:format_arg_store	typeref:typename:const size_t
num_args	include/spdlog/fmt/bundled/core.h	/^  static constexpr int num_args = sizeof...(Args);$/;"	m	class:detail::format_string_checker	typeref:typename:int
num_args_	include/spdlog/fmt/bundled/core.h	/^  int num_args_;$/;"	m	class:detail::compile_parse_context	typeref:typename:int
num_bigits	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 auto num_bigits() const -> int {$/;"	f	class:detail::bigint	typeref:typename:int
num_bits	include/spdlog/fmt/bundled/format.h	/^template <> constexpr auto num_bits<int128_opt>() -> int { return 128; }$/;"	f	namespace:detail	typeref:typename:int
num_bits	include/spdlog/fmt/bundled/format.h	/^template <> constexpr auto num_bits<uint128_t>() -> int { return 128; }$/;"	f	namespace:detail	typeref:typename:int
num_bits	include/spdlog/fmt/bundled/format.h	/^template <typename T> constexpr auto num_bits() -> int {$/;"	f	namespace:detail	typeref:typename:int
num_emphases	include/spdlog/fmt/bundled/color.h	/^  static constexpr size_t num_emphases = 8;$/;"	m	struct:detail::ansi_color_escape	typeref:typename:size_t
num_named_args	include/spdlog/fmt/bundled/core.h	/^  static constexpr size_t num_named_args = detail::count_named_args<Args...>();$/;"	m	class:format_arg_store	typeref:typename:size_t
num_significand_bits	include/spdlog/fmt/bundled/format.h	/^  static constexpr const int num_significand_bits =$/;"	m	struct:detail::basic_fp	typeref:typename:const int
num_significand_bits	include/spdlog/fmt/bundled/format.h	/^template <typename Float> constexpr auto num_significand_bits() -> int {$/;"	f	namespace:detail	typeref:typename:int
numeric_system	include/spdlog/fmt/bundled/chrono.h	/^enum class numeric_system {$/;"	g	namespace:detail
oct	include/spdlog/fmt/bundled/core.h	/^  oct,             \/\/ 'o'$/;"	e	enum:presentation_type
off	include/spdlog/common.h	/^    off = SPDLOG_LEVEL_OFF,$/;"	e	enum:spdlog::level::level_enum
offset_minutes_	include/spdlog/pattern_formatter-inl.h	/^    int offset_minutes_{0};$/;"	m	class:spdlog::details::z_formatter	typeref:typename:int
oflag	include/spdlog/fmt/bundled/os.h	/^  int oflag = file::WRONLY | file::CREATE | file::TRUNC;$/;"	m	struct:detail::ostream_params	typeref:typename:int
old_lace	include/spdlog/fmt/bundled/color.h	/^  old_lace = 0xFDF5E6,                 \/\/ rgb(253,245,230)$/;"	e	enum:color
olive	include/spdlog/fmt/bundled/color.h	/^  olive = 0x808000,                    \/\/ rgb(128,128,0)$/;"	e	enum:color
olive_drab	include/spdlog/fmt/bundled/color.h	/^  olive_drab = 0x6B8E23,               \/\/ rgb(107,142,35)$/;"	e	enum:color
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_12_hour(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_12_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_12_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_12_hour_time() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_12_hour_time() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_12_hour_time() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour_time() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour_time() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_24_hour(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_24_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_24_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_24_hour_time() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_24_hour_time() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_24_hour_time() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour_time() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour_time() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_abbr_month() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_abbr_month() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_month() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_month() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_abbr_weekday() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_abbr_weekday() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_weekday() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_weekday() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_am_pm() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_am_pm() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_am_pm() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  void on_am_pm() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  void on_am_pm() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto on_arg_id() -> int { return context_.next_arg_id(); }$/;"	f	class:detail::format_string_checker	typeref:typename:int
on_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {$/;"	f	class:detail::format_string_checker	typeref:typename:int
on_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto on_arg_id(int id) -> int {$/;"	f	class:detail::format_string_checker	typeref:typename:int
on_arg_id	include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR auto on_arg_id() -> int {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:int
on_arg_id	include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:int
on_arg_id	include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR auto on_arg_id(int id) -> int {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:int
on_auto	include/spdlog/fmt/bundled/compile.h	/^  constexpr int on_auto() {$/;"	f	struct:detail::arg_id_handler	typeref:typename:int
on_auto	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void on_auto() { arg_id = handler.on_arg_id(); }$/;"	f	struct:detail::parse_replacement_field::id_adapter	typeref:typename:FMT_CONSTEXPR void
on_auto	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_auto() {$/;"	f	struct:detail::dynamic_spec_id_handler	typeref:typename:FMT_CONSTEXPR void
on_black	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_black = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
on_blue	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_blue = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
on_century	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_century(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_century	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_century(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_century	include/spdlog/fmt/bundled/chrono.h	/^  void on_century(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_century	include/spdlog/fmt/bundled/chrono.h	/^  void on_century(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_cyan	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_cyan = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_datetime(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_datetime(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  void on_datetime(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  void on_datetime(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_day_of_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_day_of_month(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_day_of_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_day_of_month(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_day_of_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_day_of_month(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_day_of_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_day_of_month(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_day_of_month_space	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_day_of_month_space(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_day_of_month_space	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_day_of_month_space(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_day_of_month_space	include/spdlog/fmt/bundled/chrono.h	/^  void on_day_of_month_space(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_day_of_month_space	include/spdlog/fmt/bundled/chrono.h	/^  void on_day_of_month_space(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_day_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_day_of_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_day_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_day_of_year() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_day_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_day_of_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_day_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_day_of_year() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_day_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_day_of_year() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec0_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec0_week_of_year(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec0_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec0_week_of_year(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec0_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec0_week_of_year(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec0_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec0_week_of_year(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec0_weekday(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec0_weekday(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec0_weekday(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec0_weekday(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec1_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec1_week_of_year(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec1_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec1_week_of_year(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec1_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec1_week_of_year(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec1_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec1_week_of_year(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec1_weekday(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec1_weekday(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec1_weekday(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec1_weekday(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec_month(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_dec_month(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec_month(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec_month(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_duration_unit() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_duration_unit() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_unit() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_duration_unit	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_unit() {}$/;"	f	class:detail::tm_writer	typeref:typename:void
on_duration_value	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_duration_value() const {$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_duration_value	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_duration_value() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_duration_value	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_value() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_duration_value	include/spdlog/fmt/bundled/chrono.h	/^  void on_duration_value() {}$/;"	f	class:detail::tm_writer	typeref:typename:void
on_error	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_error	include/spdlog/fmt/bundled/core.h	/^  FMT_NORETURN void on_error(const char* message) {$/;"	f	struct:detail::error_handler	typeref:typename:FMT_NORETURN void
on_error	include/spdlog/fmt/bundled/core.h	/^  void on_error(const char* message) { error_handler().on_error(message); }$/;"	f	class:basic_format_context	typeref:typename:void
on_error	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:basic_printf_context	typeref:typename:FMT_CONSTEXPR void
on_format_specs	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto on_format_specs(int id, const Char* begin, const Char*)$/;"	f	class:detail::format_string_checker	typeref:typename:const Char *
on_format_specs	include/spdlog/fmt/bundled/format.h	/^    auto on_format_specs(int id, const Char* begin, const Char* end)$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:const Char *
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_full_month() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_full_month() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_month() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_month() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_full_weekday() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_full_weekday() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_weekday() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_weekday() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_green	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_green = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
on_index	include/spdlog/fmt/bundled/compile.h	/^  constexpr int on_index(int id) {$/;"	f	struct:detail::arg_id_handler	typeref:typename:int
on_index	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }$/;"	f	struct:detail::parse_replacement_field::id_adapter	typeref:typename:FMT_CONSTEXPR void
on_index	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_index(int id) {$/;"	f	struct:detail::dynamic_spec_id_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_date() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_date() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_date() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_date() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_time() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_time() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_time() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_time() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_time() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_week_based_short_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_short_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_short_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_short_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_short_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_week_based_short_year() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_week_based_short_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_week_based_short_year() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_week_based_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_week_based_year() { write_year(tm_iso_week_year()); }$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_week_based_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_week_based_year() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_of_year(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_of_year(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_week_of_year(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_week_of_year(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_loc_date(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_loc_date(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_date(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_date(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_loc_time(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_loc_time(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_time(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_time(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_magenta	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_minute(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_minute(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_minute(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  void on_minute(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  void on_minute(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_name	include/spdlog/fmt/bundled/compile.h	/^  constexpr int on_name(basic_string_view<Char> id) {$/;"	f	struct:detail::arg_id_handler	typeref:typename:int
on_name	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {$/;"	f	struct:detail::parse_replacement_field::id_adapter	typeref:typename:FMT_CONSTEXPR void
on_name	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {$/;"	f	struct:detail::dynamic_spec_id_handler	typeref:typename:FMT_CONSTEXPR void
on_offset_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_offset_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_offset_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_offset_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_offset_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_offset_year() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_offset_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_offset_year() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_red	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_red = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
on_replacement_field	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_replacement_field(int id, const Char* begin) {$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_replacement_field	include/spdlog/fmt/bundled/format.h	/^    FMT_INLINE void on_replacement_field(int id, const Char*) {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:FMT_INLINE void
on_second	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_second(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_second	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_second(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_second	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_second(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_second	include/spdlog/fmt/bundled/chrono.h	/^  void on_second(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_second	include/spdlog/fmt/bundled/chrono.h	/^  void on_second(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_short_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_short_year(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_short_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_short_year(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_short_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_short_year(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_short_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_short_year(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_text	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_text(const Char* begin, const Char* end) {$/;"	f	class:detail::tm_writer	typeref:typename:FMT_CONSTEXPR void
on_text	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_text	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_text	include/spdlog/fmt/bundled/chrono.h	/^  void on_text(const char_type* begin, const char_type* end) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_text	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_text	include/spdlog/fmt/bundled/format.h	/^    void on_text(const Char* begin, const Char* end) {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:void
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_tz_name() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_tz_name() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  void on_tz_name() { format_tz_name_impl(tm_); }$/;"	f	class:detail::tm_writer	typeref:typename:void
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  void on_tz_name() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_us_date() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_us_date() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_us_date() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_us_date() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_utc_offset(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_utc_offset(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  void on_utc_offset(numeric_system ns) { format_utc_offset_impl(tm_, ns); }$/;"	f	class:detail::tm_writer	typeref:typename:void
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  void on_utc_offset(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_white	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_white = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
on_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_year(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_year	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void on_year(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_year(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_year	include/spdlog/fmt/bundled/chrono.h	/^  void on_year(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_yellow	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t on_yellow = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
open	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::open(const filename_t &fname, bool truncate) {$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE void
open_interval_	include/spdlog/details/file_helper.h	/^    const unsigned int open_interval_ = 10;$/;"	m	class:spdlog::details::file_helper	typeref:typename:const unsigned int
open_tries_	include/spdlog/details/file_helper.h	/^    const int open_tries_ = 5;$/;"	m	class:spdlog::details::file_helper	typeref:typename:const int
operator !=	include/spdlog/fmt/bundled/core.h	/^  friend auto operator!=(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator !=	include/spdlog/fmt/bundled/format.h	/^  friend constexpr auto operator!=(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:bool
operator ""_a	include/spdlog/fmt/bundled/format.h	/^template <detail_exported::fixed_string Str> constexpr auto operator""_a() {$/;"	f	namespace:literals	typeref:typename:auto
operator ""_a	include/spdlog/fmt/bundled/xchar.h	/^constexpr auto operator""_a(const wchar_t* s, size_t)$/;"	f	namespace:literals	typeref:typename:detail::udl_arg<wchar_t>
operator ""_cf	include/spdlog/fmt/bundled/compile.h	/^template <detail_exported::fixed_string Str> constexpr auto operator""_cf() {$/;"	f	namespace:literals	typeref:typename:auto
operator &	include/spdlog/fmt/bundled/format.h	/^  friend constexpr auto operator&(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator &=	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator&=(uint128_fallback n) {$/;"	f	class:detail::uint128_fallback	typeref:typename:FMT_CONSTEXPR void
operator ()	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {$/;"	f	struct:detail::parse_format_specs::__anon0accc0920f08	typeref:typename:const Char *
operator ()	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {$/;"	f	struct:detail::parse_format_string::writer	typeref:typename:FMT_CONSTEXPR void
operator ()	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void operator()(state s, bool valid = true) {$/;"	f	struct:detail::parse_format_specs::__anon0accc0920e08	typeref:typename:FMT_CONSTEXPR void
operator ()	include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR auto operator()(uint32_t cp, string_view) const -> bool {$/;"	f	struct:detail::compute_width::count_code_points	typeref:typename:bool
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {$/;"	f	struct:detail::arg_formatter	typeref:typename:iterator
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator()(T value) -> unsigned long long {$/;"	f	struct:detail::precision_checker	typeref:typename:unsigned long long
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator()(T value) -> unsigned long long {$/;"	f	struct:detail::width_checker	typeref:typename:unsigned long long
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator()(T) -> unsigned long long {$/;"	f	struct:detail::precision_checker	typeref:typename:unsigned long long
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator()(T) -> unsigned long long {$/;"	f	struct:detail::width_checker	typeref:typename:unsigned long long
operator ()	include/spdlog/fmt/bundled/format.h	/^  auto operator()(T value) -> bool {$/;"	f	struct:detail::loc_writer	typeref:typename:bool
operator ()	include/spdlog/fmt/bundled/format.h	/^  auto operator()(T) -> bool {$/;"	f	struct:detail::loc_writer	typeref:typename:bool
operator ()	include/spdlog/fmt/bundled/format.h	/^  auto operator()(typename basic_format_arg<context>::handle h) -> iterator {$/;"	f	struct:detail::default_arg_formatter	typeref:typename:iterator
operator ()	include/spdlog/fmt/bundled/format.h	/^  auto operator()(typename basic_format_arg<context>::handle) -> iterator {$/;"	f	struct:detail::arg_formatter	typeref:typename:iterator
operator ()	include/spdlog/fmt/bundled/format.h	/^  template <typename T> auto operator()(T value) -> iterator {$/;"	f	struct:detail::default_arg_formatter	typeref:typename:iterator
operator ()	include/spdlog/fmt/bundled/printf.h	/^  auto operator()(T value) -> bool {$/;"	f	struct:detail::is_zero_int	typeref:typename:bool
operator ()	include/spdlog/fmt/bundled/printf.h	/^  auto operator()(T value) -> int {$/;"	f	struct:detail::printf_precision_handler	typeref:typename:int
operator ()	include/spdlog/fmt/bundled/printf.h	/^  auto operator()(T value) -> unsigned {$/;"	f	class:detail::printf_width_handler	typeref:typename:unsigned
operator ()	include/spdlog/fmt/bundled/printf.h	/^  auto operator()(T) -> bool {$/;"	f	struct:detail::is_zero_int	typeref:typename:bool
operator ()	include/spdlog/fmt/bundled/printf.h	/^  auto operator()(T) -> int {$/;"	f	struct:detail::printf_precision_handler	typeref:typename:int
operator ()	include/spdlog/fmt/bundled/printf.h	/^  auto operator()(T) -> unsigned {$/;"	f	class:detail::printf_width_handler	typeref:typename:unsigned
operator ()	include/spdlog/fmt/bundled/printf.h	/^  auto operator()(const Char* s) -> const Char* { return s; }$/;"	f	struct:detail::get_cstring	typeref:typename:const Char *
operator ()	include/spdlog/fmt/bundled/printf.h	/^  template <typename T> auto operator()(T) -> const Char* { return nullptr; }$/;"	f	struct:detail::get_cstring	typeref:typename:const Char *
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(T value) {$/;"	f	class:detail::char_converter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(T value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(T) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:detail::char_converter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(U value) {$/;"	f	class:detail::arg_converter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(U) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:detail::arg_converter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(basic_string_view<Char> value) { base::operator()(value); }$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(bool value) {$/;"	f	class:detail::arg_converter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(const char* value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(const void* value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(const wchar_t* value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(monostate value) { base::operator()(value); }$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/ranges.h	/^  template <typename Formatter> FMT_CONSTEXPR void operator()(Formatter& f) {$/;"	f	struct:detail::parse_empty_specs	typeref:typename:FMT_CONSTEXPR void
operator ()	include/spdlog/fmt/bundled/ranges.h	/^  void operator()(const formatter<T, char_type>& f, const T& v) {$/;"	f	struct:detail::format_tuple_element	typeref:typename:void
operator ()	include/spdlog/fmt/bundled/std.h	/^    FMT_CONSTEXPR auto operator()(OutputIt out) -> OutputIt {$/;"	f	struct:formatter::writer	typeref:typename:OutputIt
operator *	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator*() const -> value_type { return {}; }$/;"	f	class:detail::counting_iterator	typeref:typename:value_type
operator *	include/spdlog/fmt/bundled/format.h	/^  friend auto operator*(const uint128_fallback& lhs, uint32_t rhs)$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator *	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline auto operator*(fp x, fp y) -> fp {$/;"	f	namespace:detail	typeref:typename:fp
operator *=	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 auto operator*=(Int value) -> bigint& {$/;"	f	class:detail::bigint	typeref:typename:bigint &
operator +	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR friend auto operator+(counting_iterator it, difference_type n)$/;"	f	namespace:detail	typeref:typename:counting_iterator
operator +	include/spdlog/fmt/bundled/format.h	/^  friend auto operator+(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator ++	include/spdlog/fmt/bundled/core.h	/^  auto operator++() noexcept -> appender& { return *this; }$/;"	f	class:appender	typeref:typename:auto
operator ++	include/spdlog/fmt/bundled/core.h	/^  auto operator++(int) noexcept -> appender { return *this; }$/;"	f	class:appender	typeref:typename:auto
operator ++	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator++() -> counting_iterator& {$/;"	f	class:detail::counting_iterator	typeref:typename:counting_iterator &
operator ++	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator++(int) -> counting_iterator {$/;"	f	class:detail::counting_iterator	typeref:typename:counting_iterator
operator +=	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator+=(uint128_fallback n) {$/;"	f	class:detail::uint128_fallback	typeref:typename:FMT_CONSTEXPR void
operator +=	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 auto operator+=(uint64_t n) noexcept -> uint128_fallback& {$/;"	f	class:detail::uint128_fallback	typeref:typename:FMT_CONSTEXPR20 auto
operator -	include/spdlog/fmt/bundled/format.h	/^  friend auto operator-(const uint128_fallback& lhs, uint64_t rhs)$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator <	include/spdlog/fmt/bundled/core.h	/^  friend auto operator<(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator <<	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator<<(int shift) const -> uint128_fallback {$/;"	f	class:detail::uint128_fallback	typeref:typename:uint128_fallback
operator <<=	include/spdlog/fmt/bundled/format.h	/^  FMT_NOINLINE FMT_CONSTEXPR20 auto operator<<=(int shift) -> bigint& {$/;"	f	class:detail::bigint	typeref:typename:bigint &
operator <=	include/spdlog/fmt/bundled/core.h	/^  friend auto operator<=(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator =	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE backtracer &backtracer::operator=(backtracer other) {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE backtracer &
operator =	include/spdlog/details/circular_q.h	/^    circular_q &operator=(circular_q &&other) SPDLOG_NOEXCEPT {$/;"	f	class:spdlog::details::circular_q	typeref:typename:circular_q &
operator =	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer &log_msg_buffer::operator=(const log_msg_buffer &other) {$/;"	f	class:spdlog::details::log_msg_buffer	typeref:typename:SPDLOG_INLINE log_msg_buffer &
operator =	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE log_msg_buffer &log_msg_buffer::operator=(log_msg_buffer &&other) SPDLOG_NOEXCEPT /;"	f	class:spdlog::details::log_msg_buffer	typeref:typename:SPDLOG_INLINE log_msg_buffer &
operator =	include/spdlog/details/thread_pool.h	/^    async_msg &operator=(async_msg &&other) {$/;"	f	struct:spdlog::details::async_msg	typeref:typename:async_msg &
operator =	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto operator=(int idx) -> arg_ref& {$/;"	f	struct:detail::arg_ref	typeref:typename:arg_ref &
operator =	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void operator=(basic_string_view<Char> s) {$/;"	f	struct:detail::fill_t	typeref:typename:FMT_CONSTEXPR void
operator =	include/spdlog/fmt/bundled/format.h	/^    template <typename T> FMT_CONSTEXPR void operator=(const T&) {}$/;"	f	struct:detail::counting_iterator::value_type	typeref:typename:FMT_CONSTEXPR void
operator =	include/spdlog/fmt/bundled/format.h	/^  auto operator=(basic_memory_buffer&& other) noexcept -> basic_memory_buffer& {$/;"	f	class:basic_memory_buffer	typeref:typename:auto
operator =	include/spdlog/fmt/bundled/format.h	/^  template <typename Int> FMT_CONSTEXPR20 void operator=(Int n) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
operator =	include/spdlog/fmt/bundled/format.h	/^  template <typename T> auto operator=(T&& value) const -> named_arg<Char, T> {$/;"	f	struct:detail::udl_arg	typeref:typename:named_arg<Char,T>
operator =	include/spdlog/fmt/bundled/format.h	/^  template <typename T> auto operator=(T&& value) const {$/;"	f	struct:detail::udl_arg	typeref:typename:auto
operator =	include/spdlog/fmt/bundled/os.h	/^  auto operator=(buffered_file&& other) -> buffered_file& {$/;"	f	class:buffered_file	typeref:typename:buffered_file &
operator =	include/spdlog/fmt/bundled/os.h	/^  auto operator=(file&& other) -> file& {$/;"	f	class:file	typeref:typename:file &
operator =	include/spdlog/fmt/bundled/os.h	/^  auto operator=(size_t val) const -> buffer_size {$/;"	f	struct:detail::buffer_size	typeref:typename:buffer_size
operator =	include/spdlog/logger-inl.h	/^SPDLOG_INLINE logger &logger::operator=(logger other) SPDLOG_NOEXCEPT {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE logger &
operator ==	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR_CHAR_TRAITS friend auto operator==(basic_string_view lhs,$/;"	f	typeref:typename:bool
operator ==	include/spdlog/fmt/bundled/format-inl.h	/^inline auto operator==(basic_fp<F> x, basic_fp<F> y) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
operator ==	include/spdlog/fmt/bundled/format.h	/^  friend constexpr auto operator==(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:bool
operator >	include/spdlog/fmt/bundled/core.h	/^  friend auto operator>(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator >	include/spdlog/fmt/bundled/format.h	/^  friend constexpr auto operator>(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:bool
operator >=	include/spdlog/fmt/bundled/core.h	/^  friend auto operator>=(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator >>	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator>>(int shift) const -> uint128_fallback {$/;"	f	class:detail::uint128_fallback	typeref:typename:uint128_fallback
operator >>=	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto operator>>=(int shift) -> uint128_fallback& {$/;"	f	class:detail::uint128_fallback	typeref:typename:uint128_fallback &
operator T	include/spdlog/fmt/bundled/format.h	/^  constexpr explicit operator T() const {$/;"	f	class:detail::uint128_fallback
operator []	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto operator[](Idx index) const -> const T& {$/;"	f	class:detail::buffer	typeref:typename:const T &
operator []	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto operator[](size_t index) -> Char& { return data_[index]; }$/;"	f	struct:detail::fill_t	typeref:typename:Char &
operator []	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto operator[](size_t index) const -> const Char& {$/;"	f	struct:detail::fill_t	typeref:typename:const Char &
operator []	include/spdlog/fmt/bundled/core.h	/^  constexpr auto operator[](size_t pos) const noexcept -> const Char& {$/;"	f	class:basic_string_view	typeref:typename:auto
operator []	include/spdlog/fmt/bundled/core.h	/^  template <typename Idx> FMT_CONSTEXPR auto operator[](Idx index) -> T& {$/;"	f	class:detail::buffer	typeref:typename:T &
operator []	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 auto operator[](int index) -> bigit& {$/;"	f	class:detail::bigint	typeref:typename:bigit &
operator []	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 auto operator[](int index) const -> bigit {$/;"	f	class:detail::bigint	typeref:typename:bigit
operator basic_string_view<Char>	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE operator basic_string_view<Char>() const { return str_; }$/;"	f	class:basic_format_string	typeref:typename:FMT_INLINE
operator basic_string_view<CharT>	include/spdlog/fmt/bundled/format.h	/^  constexpr operator basic_string_view<CharT>() const {$/;"	f	struct:detail::string_literal
operator basic_string_view<char_type>	include/spdlog/fmt/bundled/compile.h	/^  explicit constexpr operator basic_string_view<char_type>() const {$/;"	f	struct:detail::udl_compiled_string
operator basic_string_view<wchar_t>	include/spdlog/fmt/bundled/format.h	/^  operator basic_string_view<wchar_t>() const { return {&buffer_[0], size()}; }$/;"	f	class:detail::utf8_to_utf16
operator bool	include/spdlog/fmt/bundled/core.h	/^  constexpr explicit operator bool() const noexcept {$/;"	f	class:basic_format_arg
operator bool	include/spdlog/fmt/bundled/core.h	/^  explicit operator bool() const noexcept { return locale_ != nullptr; }$/;"	f	class:detail::locale_ref
operator const Char*	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR operator const Char*() const noexcept { return buffer; }$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR
operator const std::locale&	include/spdlog/fmt/bundled/chrono.h	/^  operator const std::locale&() const {$/;"	f	class:detail::get_locale
operator string_view	include/spdlog/fmt/bundled/format.h	/^  operator string_view() const { return string_view(&buffer_[0], size()); }$/;"	f	class:detail::to_utf8
operator |	include/spdlog/fmt/bundled/color.h	/^  friend FMT_CONSTEXPR auto operator|(text_style lhs, const text_style& rhs)$/;"	f	typeref:typename:text_style
operator |	include/spdlog/fmt/bundled/color.h	/^FMT_CONSTEXPR inline auto operator|(emphasis lhs, emphasis rhs) noexcept$/;"	f	typeref:typename:FMT_CONSTEXPR auto
operator |	include/spdlog/fmt/bundled/format.h	/^  friend constexpr auto operator|(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator |=	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR auto operator|=(const text_style& rhs) -> text_style& {$/;"	f	class:text_style	typeref:typename:text_style &
operator ~	include/spdlog/fmt/bundled/format.h	/^  friend constexpr auto operator~(const uint128_fallback& n)$/;"	f	namespace:detail	typeref:typename:uint128_fallback
orange	include/spdlog/fmt/bundled/color.h	/^  orange = 0xFFA500,                   \/\/ rgb(255,165,0)$/;"	e	enum:color
orange_red	include/spdlog/fmt/bundled/color.h	/^  orange_red = 0xFF4500,               \/\/ rgb(255,69,0)$/;"	e	enum:color
orchid	include/spdlog/fmt/bundled/color.h	/^  orchid = 0xDA70D6,                   \/\/ rgb(218,112,214)$/;"	e	enum:color
os	include/spdlog/details/os-inl.h	/^namespace os {$/;"	n	namespace:spdlog::details
os	include/spdlog/details/os.h	/^namespace os {$/;"	n	namespace:spdlog::details
ostream	include/spdlog/fmt/bundled/os.h	/^  ostream(cstring_view path, const detail::ostream_params& params)$/;"	f	class:ostream
ostream	include/spdlog/fmt/bundled/os.h	/^  ostream(ostream&& other) : buffer_(std::move(other.buffer_)) {}$/;"	f	class:ostream
ostream	include/spdlog/fmt/bundled/os.h	/^class FMT_API ostream {$/;"	c
ostream_	include/spdlog/sinks/ostream_sink.h	/^    std::ostream &ostream_;$/;"	m	class:spdlog::sinks::ostream_sink	typeref:typename:std::ostream &
ostream_formatter	include/spdlog/fmt/bundled/ostream.h	/^using ostream_formatter = basic_ostream_formatter<char>;$/;"	t	typeref:typename:basic_ostream_formatter<char>
ostream_params	include/spdlog/fmt/bundled/os.h	/^  ostream_params() {}$/;"	f	struct:detail::ostream_params
ostream_params	include/spdlog/fmt/bundled/os.h	/^  ostream_params(T... params, detail::buffer_size bs)$/;"	f	struct:detail::ostream_params
ostream_params	include/spdlog/fmt/bundled/os.h	/^  ostream_params(T... params, int new_oflag) : ostream_params(params...) {$/;"	f	struct:detail::ostream_params
ostream_params	include/spdlog/fmt/bundled/os.h	/^  ostream_params(detail::buffer_size bs) : buffer_size(bs.value) {}$/;"	f	struct:detail::ostream_params
ostream_params	include/spdlog/fmt/bundled/os.h	/^  ostream_params(int new_oflag) : oflag(new_oflag) {}$/;"	f	struct:detail::ostream_params
ostream_params	include/spdlog/fmt/bundled/os.h	/^struct ostream_params {$/;"	s	namespace:detail
ostream_sink	include/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream &os, bool force_flush = false)$/;"	f	class:spdlog::sinks::ostream_sink
ostream_sink	include/spdlog/sinks/ostream_sink.h	/^class ostream_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
ostream_sink_mt	include/spdlog/sinks/ostream_sink.h	/^using ostream_sink_mt = ostream_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ostream_sink<std::mutex>
ostream_sink_st	include/spdlog/sinks/ostream_sink.h	/^using ostream_sink_st = ostream_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ostream_sink<details::null_mutex>
out	include/spdlog/fmt/bundled/chrono.h	/^  OutputIt out;$/;"	m	struct:detail::chrono_formatter	typeref:typename:OutputIt
out	include/spdlog/fmt/bundled/chrono.h	/^  auto out() const -> OutputIt { return out_; }$/;"	f	class:detail::tm_writer	typeref:typename:OutputIt
out	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto out() -> iterator { return out_; }$/;"	f	class:basic_format_context	typeref:typename:iterator
out	include/spdlog/fmt/bundled/core.h	/^  OutputIt out;$/;"	m	struct:format_to_n_result	typeref:typename:OutputIt
out	include/spdlog/fmt/bundled/core.h	/^  auto out() -> OutputIt {$/;"	f	class:detail::iterator_buffer	typeref:typename:OutputIt
out	include/spdlog/fmt/bundled/core.h	/^  auto out() -> T* { return &*this->end(); }$/;"	f	class:detail::iterator_buffer	typeref:typename:T *
out	include/spdlog/fmt/bundled/core.h	/^  auto out() -> T* {$/;"	f	class:detail::iterator_buffer	typeref:typename:T *
out	include/spdlog/fmt/bundled/core.h	/^  auto out() -> std::back_insert_iterator<Container> {$/;"	f	class:detail::iterator_buffer	typeref:typename:std::back_insert_iterator<Container>
out	include/spdlog/fmt/bundled/format.h	/^  buffer_appender<Char> out;$/;"	m	struct:detail::loc_writer	typeref:typename:buffer_appender<Char>
out	include/spdlog/fmt/bundled/format.h	/^  iterator out;$/;"	m	struct:detail::arg_formatter	typeref:typename:iterator
out	include/spdlog/fmt/bundled/format.h	/^  iterator out;$/;"	m	struct:detail::default_arg_formatter	typeref:typename:iterator
out	include/spdlog/fmt/bundled/printf.h	/^  auto out() -> detail::buffer_appender<Char> { return out_; }$/;"	f	class:basic_printf_context	typeref:typename:detail::buffer_appender<Char>
out_	include/spdlog/fmt/bundled/chrono.h	/^  OutputIt out_;$/;"	m	class:detail::tm_writer	typeref:typename:OutputIt
out_	include/spdlog/fmt/bundled/core.h	/^  OutputIt out_;$/;"	m	class:basic_format_context	typeref:typename:OutputIt
out_	include/spdlog/fmt/bundled/core.h	/^  OutputIt out_;$/;"	m	class:detail::iterator_buffer	typeref:typename:OutputIt
out_	include/spdlog/fmt/bundled/core.h	/^  T* out_;$/;"	m	class:detail::iterator_buffer	typeref:typename:T *
out_	include/spdlog/fmt/bundled/printf.h	/^  detail::buffer_appender<Char> out_;$/;"	m	class:basic_printf_context	typeref:typename:detail::buffer_appender<Char>
out_handle_	include/spdlog/sinks/wincolor_sink.h	/^    void *out_handle_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:void *
output_file	include/spdlog/fmt/bundled/os.h	/^inline auto output_file(cstring_view path, T... params) -> ostream {$/;"	f	typeref:typename:ostream
overflow	include/spdlog/fmt/bundled/ostream.h	/^  auto overflow(int_type ch) -> int_type override {$/;"	f	class:detail::formatbuf	typeref:typename:int_type override
overflow_policy_	include/spdlog/async_logger.h	/^    async_overflow_policy overflow_policy_;$/;"	m	class:spdlog::async_logger	typeref:typename:async_overflow_policy
overrun_counter	include/spdlog/details/circular_q.h	/^    size_t overrun_counter() const { return overrun_counter_; }$/;"	f	class:spdlog::details::circular_q	typeref:typename:size_t
overrun_counter	include/spdlog/details/mpmc_blocking_q.h	/^    size_t overrun_counter() {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:size_t
overrun_counter	include/spdlog/details/thread_pool-inl.h	/^size_t SPDLOG_INLINE thread_pool::overrun_counter() { return q_.overrun_counter(); }$/;"	f	class:spdlog::details::thread_pool	typeref:typename:size_t SPDLOG_INLINE
overrun_counter_	include/spdlog/details/circular_q.h	/^    size_t overrun_counter_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:size_t
overrun_oldest	include/spdlog/async_logger.h	/^    overrun_oldest,  \/\/ Discard oldest message in the queue if full when trying to$/;"	e	enum:spdlog::async_overflow_policy
p_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit p_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::p_formatter
p_formatter	include/spdlog/pattern_formatter-inl.h	/^class p_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
packed_arg_bits	include/spdlog/fmt/bundled/core.h	/^enum { packed_arg_bits = 4 };$/;"	e	enum:detail::__anon0accc0920803
pad2	include/spdlog/details/fmt_helper.h	/^inline void pad2(int n, memory_buf_t &dest) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad3	include/spdlog/details/fmt_helper.h	/^inline void pad3(T n, memory_buf_t &dest) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad6	include/spdlog/details/fmt_helper.h	/^inline void pad6(T n, memory_buf_t &dest) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad9	include/spdlog/details/fmt_helper.h	/^inline void pad9(T n, memory_buf_t &dest) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad_it	include/spdlog/pattern_formatter-inl.h	/^    void pad_it(long count) {$/;"	f	class:spdlog::details::scoped_padder	typeref:typename:void
pad_side	include/spdlog/pattern_formatter.h	/^    enum class pad_side { left, right, center };$/;"	g	struct:spdlog::details::padding_info
pad_type	include/spdlog/fmt/bundled/chrono.h	/^enum class pad_type {$/;"	g	namespace:detail
pad_uint	include/spdlog/details/fmt_helper.h	/^inline void pad_uint(T n, unsigned int width, memory_buf_t &dest) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
padding	include/spdlog/fmt/bundled/format.h	/^  size_t padding;$/;"	m	struct:detail::write_int_data	typeref:typename:size_t
padding_info	include/spdlog/pattern_formatter.h	/^    padding_info(size_t width, padding_info::pad_side side, bool truncate)$/;"	f	struct:spdlog::details::padding_info
padding_info	include/spdlog/pattern_formatter.h	/^struct padding_info {$/;"	s	namespace:spdlog::details
padinfo_	include/spdlog/pattern_formatter-inl.h	/^    const padding_info &padinfo_;$/;"	m	class:spdlog::details::scoped_padder	typeref:typename:const padding_info &
padinfo_	include/spdlog/pattern_formatter.h	/^    padding_info padinfo_;$/;"	m	class:spdlog::details::flag_formatter	typeref:typename:padding_info
pale_golden_rod	include/spdlog/fmt/bundled/color.h	/^  pale_golden_rod = 0xEEE8AA,          \/\/ rgb(238,232,170)$/;"	e	enum:color
pale_green	include/spdlog/fmt/bundled/color.h	/^  pale_green = 0x98FB98,               \/\/ rgb(152,251,152)$/;"	e	enum:color
pale_turquoise	include/spdlog/fmt/bundled/color.h	/^  pale_turquoise = 0xAFEEEE,           \/\/ rgb(175,238,238)$/;"	e	enum:color
pale_violet_red	include/spdlog/fmt/bundled/color.h	/^  pale_violet_red = 0xDB7093,          \/\/ rgb(219,112,147)$/;"	e	enum:color
papaya_whip	include/spdlog/fmt/bundled/color.h	/^  papaya_whip = 0xFFEFD5,              \/\/ rgb(255,239,213)$/;"	e	enum:color
parity	include/spdlog/fmt/bundled/format-inl.h	/^    bool parity;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_parity_result	typeref:typename:bool
parse	include/spdlog/fmt/bin_to_hex.h	/^    SPDLOG_CONSTEXPR_FUNC auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:std::formatter	typeref:typename:decltype(ctx.begin ())
parse	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR auto parse(basic_format_parse_context<Char>& ctx)$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> const Char* {$/;"	f	struct:formatter	typeref:typename:const Char *
parse	include/spdlog/fmt/bundled/format-inl.h	/^  FMT_CONSTEXPR auto parse(format_parse_context& ctx)$/;"	f	struct:formatter	typeref:typename:format_parse_context::iterator
parse	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> const Char* {$/;"	f	struct:formatter	typeref:typename:const Char *
parse	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> const char* {$/;"	f	struct:formatter	typeref:typename:const char *
parse	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto parse(format_parse_context& ctx) -> const char* {$/;"	f	struct:formatter	typeref:typename:const char *
parse	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR auto parse(format_parse_context& ctx) -> const char* {$/;"	f	struct:nested_formatter	typeref:typename:const char *
parse	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:detail::range_default_formatter	typeref:typename:decltype(ctx.begin ())
parse	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:range_formatter	typeref:typename:decltype(ctx.begin ())
parse	include/spdlog/fmt/bundled/std.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	include/spdlog/fmt/bundled/std.h	/^  FMT_CONSTEXPR auto parse(basic_format_parse_context<Char>& ctx)$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	include/spdlog/fmt/bundled/std.h	/^  template <typename ParseContext> FMT_CONSTEXPR auto parse(ParseContext& ctx) {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR auto
parse_align	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {$/;"	f	namespace:detail	typeref:typename:align_t
parse_align	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto parse_align(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_arg_id	include/spdlog/fmt/bundled/compile.h	/^constexpr auto parse_arg_id(const Char* begin, const Char* end) {$/;"	f	namespace:detail	typeref:typename:auto
parse_arg_id	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR FMT_INLINE auto parse_arg_id(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_arg_id_result	include/spdlog/fmt/bundled/compile.h	/^template <typename Char> struct parse_arg_id_result {$/;"	s	namespace:detail
parse_chrono_format	include/spdlog/fmt/bundled/chrono.h	/^FMT_CONSTEXPR auto parse_chrono_format(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_context	include/spdlog/fmt/bundled/core.h	/^  using parse_context = typename Context::parse_context_type;$/;"	t	struct:detail::custom_value	typeref:typename:Context::parse_context_type
parse_context	include/spdlog/fmt/bundled/format.h	/^    basic_format_parse_context<Char> parse_context;$/;"	m	struct:detail::vformat_to::format_handler	typeref:typename:basic_format_parse_context<Char>
parse_context_type	include/spdlog/fmt/bundled/core.h	/^  using parse_context_type = basic_format_parse_context<Char>;$/;"	t	class:basic_format_context	typeref:typename:basic_format_parse_context<Char>
parse_context_type	include/spdlog/fmt/bundled/core.h	/^  using parse_context_type = compile_parse_context<Char>;$/;"	t	class:detail::format_string_checker	typeref:typename:compile_parse_context<Char>
parse_context_type	include/spdlog/fmt/bundled/printf.h	/^  using parse_context_type = basic_format_parse_context<Char>;$/;"	t	class:basic_printf_context	typeref:typename:basic_format_parse_context<Char>
parse_dynamic_spec	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto parse_dynamic_spec(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_empty_specs	include/spdlog/fmt/bundled/ranges.h	/^template <typename ParseContext> struct parse_empty_specs {$/;"	s	namespace:detail
parse_flags	include/spdlog/fmt/bundled/printf.h	/^void parse_flags(format_specs<Char>& specs, const Char*& it, const Char* end) {$/;"	f	namespace:detail	typeref:typename:void
parse_float_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto parse_float_type_spec(const format_specs<Char>& specs)$/;"	f	namespace:detail	typeref:typename:float_specs
parse_format_specs	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR FMT_INLINE auto parse_format_specs($/;"	f	namespace:detail	typeref:typename:const Char *
parse_format_specs	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto parse_format_specs(ParseContext& ctx)$/;"	f	namespace:detail	typeref:typename:decltype(ctx.begin ())
parse_format_string	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR FMT_INLINE void parse_format_string($/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR FMT_INLINE void
parse_func	include/spdlog/fmt/bundled/core.h	/^  using parse_func = const Char* (*)(parse_context_type&);$/;"	t	class:detail::format_string_checker
parse_funcs_	include/spdlog/fmt/bundled/core.h	/^  parse_func parse_funcs_[num_args > 0 ? static_cast<size_t>(num_args) : 1];$/;"	m	class:detail::format_string_checker	typeref:typename:parse_func[]
parse_header	include/spdlog/fmt/bundled/printf.h	/^auto parse_header(const Char*& it, const Char* end, format_specs<Char>& specs,$/;"	f	namespace:detail	typeref:typename:int
parse_nonnegative_int	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto parse_nonnegative_int(const Char*& begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
parse_precision	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto parse_precision(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_printf_presentation_type	include/spdlog/fmt/bundled/printf.h	/^inline auto parse_printf_presentation_type(char c, type t)$/;"	f	namespace:detail	typeref:typename:presentation_type
parse_replacement_field	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto parse_replacement_field(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_replacement_field_then_tail	include/spdlog/fmt/bundled/compile.h	/^constexpr auto parse_replacement_field_then_tail(S format_str) {$/;"	f	namespace:detail	typeref:typename:auto
parse_specs	include/spdlog/fmt/bundled/compile.h	/^constexpr parse_specs_result<T, Char> parse_specs(basic_string_view<Char> str,$/;"	f	namespace:detail	typeref:typename:parse_specs_result<T,Char>
parse_specs_result	include/spdlog/fmt/bundled/compile.h	/^template <typename T, typename Char> struct parse_specs_result {$/;"	s	namespace:detail
parse_tail	include/spdlog/fmt/bundled/compile.h	/^constexpr auto parse_tail(T head, S format_str) {$/;"	f	namespace:detail	typeref:typename:auto
parse_text	include/spdlog/fmt/bundled/compile.h	/^constexpr size_t parse_text(basic_string_view<Char> str, size_t pos) {$/;"	f	namespace:detail	typeref:typename:size_t
path_exists	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE bool path_exists(const filename_t &filename) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE bool
path_type_	include/spdlog/fmt/bundled/std.h	/^  char path_type_ = 0;$/;"	m	struct:formatter	typeref:typename:char
pattern_	include/spdlog/pattern_formatter.h	/^    std::string pattern_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::string
pattern_formatter	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE pattern_formatter::pattern_formatter(pattern_time_type time_type, std::string eol)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE
pattern_formatter	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE pattern_formatter::pattern_formatter(std::string pattern,$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE
pattern_formatter	include/spdlog/pattern_formatter.h	/^class SPDLOG_API pattern_formatter final : public formatter {$/;"	c	namespace:spdlog
pattern_time_type	include/spdlog/common.h	/^enum class pattern_time_type {$/;"	g	namespace:spdlog
pattern_time_type_	include/spdlog/pattern_formatter.h	/^    pattern_time_type pattern_time_type_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:pattern_time_type
pause	src/mpris_media_player.cpp	/^void MprisMediaPlayer::pause() { execute_base_method_func(Pause); }$/;"	f	class:MprisMediaPlayer	typeref:typename:void
payload	include/spdlog/details/log_msg.h	/^    string_view_t payload;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:string_view_t
payload	include/spdlog/sinks/qt_sinks.h	/^        QString payload;$/;"	m	struct:spdlog::sinks::qt_color_sink::invoke_params	typeref:typename:QString
peach_puff	include/spdlog/fmt/bundled/color.h	/^  peach_puff = 0xFFDAB9,               \/\/ rgb(255,218,185)$/;"	e	enum:color
period	include/spdlog/fmt/bundled/chrono.h	/^    using period = typename Duration::period;$/;"	t	function:formatter::format	typeref:typename:Duration::period
periodic_flusher_	include/spdlog/details/registry.h	/^    std::unique_ptr<periodic_worker> periodic_flusher_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::unique_ptr<periodic_worker>
periodic_worker	include/spdlog/details/periodic_worker.h	/^    periodic_worker(const std::function<void()> &callback_fun,$/;"	f	class:spdlog::details::periodic_worker
periodic_worker	include/spdlog/details/periodic_worker.h	/^class SPDLOG_API periodic_worker {$/;"	c	namespace:spdlog::details
peru	include/spdlog/fmt/bundled/color.h	/^  peru = 0xCD853F,                     \/\/ rgb(205,133,63)$/;"	e	enum:color
pid	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE int pid() SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE int
pid_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit pid_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::pid_formatter
pid_formatter	include/spdlog/pattern_formatter-inl.h	/^class pid_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
pink	include/spdlog/fmt/bundled/color.h	/^  pink = 0xFFC0CB,                     \/\/ rgb(255,192,203)$/;"	e	enum:color
play	src/mpris_media_player.cpp	/^void MprisMediaPlayer::play() { execute_base_method_func(Play); }$/;"	f	class:MprisMediaPlayer	typeref:typename:void
play_pause	src/mpris_media_player.cpp	/^void MprisMediaPlayer::play_pause() { execute_base_method_func(PlayPause); }$/;"	f	class:MprisMediaPlayer	typeref:typename:void
plum	include/spdlog/fmt/bundled/color.h	/^  plum = 0xDDA0DD,                     \/\/ rgb(221,160,221)$/;"	e	enum:color
pointer	include/spdlog/fmt/bundled/core.h	/^    const void* pointer;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:const void *
pointer	include/spdlog/fmt/bundled/core.h	/^  pointer,         \/\/ 'p'$/;"	e	enum:presentation_type
pointer	include/spdlog/fmt/bundled/format.h	/^  using pointer = void;$/;"	t	class:detail::counting_iterator	typeref:typename:void
pointer_set	include/spdlog/fmt/bundled/core.h	/^  pointer_set = set(type::pointer_type)$/;"	e	enum:detail::__anon0accc0920103
pointer_type	include/spdlog/fmt/bundled/core.h	/^  pointer_type,$/;"	e	enum:detail::type
pop_cv_	include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable pop_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:std::condition_variable
pop_front	include/spdlog/details/circular_q.h	/^    void pop_front() { head_ = (head_ + 1) % max_items_; }$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
pos	include/spdlog/fmt/bundled/format.h	/^    int pos;$/;"	m	struct:detail::digit_grouping::next_state	typeref:typename:int
post_async_msg_	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::post_async_msg_(async_msg &&new_msg,$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void SPDLOG_INLINE
post_flush	include/spdlog/details/thread_pool-inl.h	/^std::future<void> SPDLOG_INLINE thread_pool::post_flush(async_logger_ptr &&worker_ptr,$/;"	f	class:spdlog::details::thread_pool	typeref:typename:std::future<void> SPDLOG_INLINE
post_log	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::post_log(async_logger_ptr &&worker_ptr,$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void SPDLOG_INLINE
pow10	include/spdlog/fmt/bundled/chrono.h	/^constexpr auto pow10(std::uint32_t n) -> long long {$/;"	f	namespace:detail	typeref:typename:long long
powder_blue	include/spdlog/fmt/bundled/color.h	/^  powder_blue = 0xB0E0E6,              \/\/ rgb(176,224,230)$/;"	e	enum:color
precision	include/spdlog/fmt/bundled/chrono.h	/^  int precision;$/;"	m	struct:detail::chrono_formatter	typeref:typename:int
precision	include/spdlog/fmt/bundled/core.h	/^  int precision;$/;"	m	struct:format_specs	typeref:typename:int
precision	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
precision	include/spdlog/fmt/bundled/format.h	/^  int precision;$/;"	m	struct:detail::float_specs	typeref:typename:int
precision_checker	include/spdlog/fmt/bundled/format.h	/^struct precision_checker {$/;"	s	namespace:detail
precision_ref	include/spdlog/fmt/bundled/core.h	/^  arg_ref<Char> precision_ref;$/;"	m	struct:detail::dynamic_format_specs	typeref:typename:arg_ref<Char>
precision_ref_	include/spdlog/fmt/bundled/chrono.h	/^  detail::arg_ref<Char> precision_ref_;$/;"	m	struct:formatter	typeref:typename:detail::arg_ref<Char>
predecessor_closer	include/spdlog/fmt/bundled/format.h	/^  predecessor_closer = 1,$/;"	e	enum:detail::dragon
prefix	include/spdlog/fmt/bundled/format.h	/^  unsigned prefix;$/;"	m	struct:detail::write_int_arg	typeref:typename:unsigned
prefix_append	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline void prefix_append(unsigned& prefix, unsigned value) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
preinstall	build/Makefile	/^preinstall: all$/;"	t
preinstall/fast	build/Makefile	/^preinstall\/fast:$/;"	t
pres	include/spdlog/fmt/bundled/core.h	/^  using pres = presentation_type;$/;"	t	function:detail::parse_format_specs	typeref:typename:presentation_type
presentation_type	include/spdlog/fmt/bundled/core.h	/^enum class presentation_type : unsigned char {$/;"	g	typeref:typename:unsigned char
previous	src/mpris_media_player.cpp	/^void MprisMediaPlayer::previous() { execute_base_method_func(Previous); }$/;"	f	class:MprisMediaPlayer	typeref:typename:void
print	include/mpris_media_player.h	/^  void print() {$/;"	f	struct:DBusMetadata	typeref:typename:void
print	include/spdlog/fmt/bundled/color.h	/^void print(const text_style& ts, const S& format_str, const Args&... args) {$/;"	f	typeref:typename:void
print	include/spdlog/fmt/bundled/color.h	/^void print(std::FILE* f, const text_style& ts, const S& format_str,$/;"	f	typeref:typename:void
print	include/spdlog/fmt/bundled/compile.h	/^void print(const S& format_str, const Args&... args) {$/;"	f	typeref:typename:void
print	include/spdlog/fmt/bundled/compile.h	/^void print(std::FILE* f, const S& format_str, const Args&... args) {$/;"	f	typeref:typename:void
print	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE void print(format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
print	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE void print(std::FILE* f, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
print	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void print(std::FILE* f, string_view text) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
print	include/spdlog/fmt/bundled/os.h	/^  inline void print(string_view format_str, const Args&... args) {$/;"	f	class:buffered_file	typeref:typename:void
print	include/spdlog/fmt/bundled/os.h	/^  template <typename... T> void print(format_string<T...> fmt, T&&... args) {$/;"	f	class:ostream	typeref:typename:void
print	include/spdlog/fmt/bundled/ostream.h	/^void print(std::ostream& os, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_EXPORT void
print	include/spdlog/fmt/bundled/ostream.h	/^void print(std::wostream& os,$/;"	f	typeref:typename:FMT_EXPORT void
print	include/spdlog/fmt/bundled/xchar.h	/^template <typename... T> void print(wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
print	include/spdlog/fmt/bundled/xchar.h	/^void print(std::FILE* f, wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
print_ccode_	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::print_ccode_(const string_view_t &color_code) {$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
print_dbus_variant	src/mpris_media_player.cpp	/^void MprisMediaPlayer::print_dbus_variant(DBusMessageIter *iter) {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
print_range_	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::print_range_(const memory_buf_t &formatted,$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
print_range_	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::print_range_(const memory_buf_t &formatted,$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
printf	include/spdlog/fmt/bundled/printf.h	/^FMT_DEPRECATED inline auto printf(basic_string_view<wchar_t> fmt,$/;"	f	typeref:typename:int
printf	include/spdlog/fmt/bundled/printf.h	/^inline auto printf(string_view fmt, const T&... args) -> int {$/;"	f	typeref:typename:int
printf_arg_formatter	include/spdlog/fmt/bundled/printf.h	/^  printf_arg_formatter(buffer_appender<Char> iter, format_specs<Char>& s,$/;"	f	class:detail::printf_arg_formatter
printf_arg_formatter	include/spdlog/fmt/bundled/printf.h	/^class printf_arg_formatter : public arg_formatter<Char> {$/;"	c	namespace:detail
printf_args	include/spdlog/fmt/bundled/printf.h	/^using printf_args = basic_format_args<printf_context>;$/;"	t	typeref:typename:basic_format_args<printf_context>
printf_context	include/spdlog/fmt/bundled/printf.h	/^using printf_context = basic_printf_context<char>;$/;"	t	typeref:typename:basic_printf_context<char>
printf_formatter	include/spdlog/fmt/bundled/printf.h	/^template <typename T> struct printf_formatter {$/;"	s
printf_precision_handler	include/spdlog/fmt/bundled/printf.h	/^struct printf_precision_handler {$/;"	s	namespace:detail
printf_width_handler	include/spdlog/fmt/bundled/printf.h	/^  explicit printf_width_handler(format_specs<Char>& specs) : specs_(specs) {}$/;"	f	class:detail::printf_width_handler
printf_width_handler	include/spdlog/fmt/bundled/printf.h	/^template <typename Char> class printf_width_handler {$/;"	c	namespace:detail
println	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE void println(format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
println	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE void println(std::FILE* f, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
println	include/spdlog/fmt/bundled/ostream.h	/^void println(std::ostream& os, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_EXPORT void
println	include/spdlog/fmt/bundled/ostream.h	/^void println(std::wostream& os,$/;"	f	typeref:typename:FMT_EXPORT void
println	include/spdlog/fmt/bundled/xchar.h	/^template <typename... T> void println(wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
println	include/spdlog/fmt/bundled/xchar.h	/^void println(std::FILE* f, wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
process_next_msg_	include/spdlog/details/thread_pool-inl.h	/^bool SPDLOG_INLINE thread_pool::process_next_msg_() {$/;"	f	class:spdlog::details::thread_pool	typeref:typename:bool SPDLOG_INLINE
process_token_t	include/spdlog/sinks/win_eventlog_sink.h	/^            explicit process_token_t(HANDLE process) {$/;"	f	struct:spdlog::sinks::win_eventlog::internal::sid_t::get_current_user_sid::process_token_t
process_token_t	include/spdlog/sinks/win_eventlog_sink.h	/^        struct process_token_t {$/;"	s	function:spdlog::sinks::win_eventlog::internal::sid_t::get_current_user_sid
produce_topic	include/spdlog/sinks/kafka_sink.h	/^    std::string produce_topic;$/;"	m	struct:spdlog::sinks::kafka_sink_config	typeref:typename:std::string
producer_	include/spdlog/sinks/kafka_sink.h	/^    std::unique_ptr<RdKafka::Producer> producer_ = nullptr;$/;"	m	class:spdlog::sinks::kafka_sink	typeref:typename:std::unique_ptr<RdKafka::Producer>
property_func_return_bool	src/mpris_media_player.cpp	/^bool MprisMediaPlayer::property_func_return_bool(DBusPropertyType type) {$/;"	f	class:MprisMediaPlayer	typeref:typename:bool
property_func_return_double	src/mpris_media_player.cpp	/^double MprisMediaPlayer::property_func_return_double(DBusPropertyType type) {$/;"	f	class:MprisMediaPlayer	typeref:typename:double
pt	include/spdlog/fmt/bundled/printf.h	/^  using pt = presentation_type;$/;"	t	function:detail::parse_printf_presentation_type	typeref:typename:presentation_type
ptr	include/spdlog/fmt/bundled/format.h	/^auto ptr(const std::unique_ptr<T, Deleter>& p) -> const void* {$/;"	f	typeref:typename:const void *
ptr	include/spdlog/fmt/bundled/format.h	/^template <typename T> auto ptr(T p) -> const void* {$/;"	f	typeref:typename:const void *
ptr	include/spdlog/fmt/bundled/format.h	/^template <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {$/;"	f	typeref:typename:const void *
ptr_	include/spdlog/fmt/bundled/core.h	/^  T* ptr_;$/;"	m	class:detail::buffer	typeref:typename:T *
purple	include/spdlog/fmt/bundled/color.h	/^  purple = 0x800080,                   \/\/ rgb(128,0,128)$/;"	e	enum:color
push	include/spdlog/fmt/bundled/args.h	/^  template <typename T, typename Arg> auto push(const Arg& arg) -> const T& {$/;"	f	class:detail::dynamic_arg_list	typeref:typename:const T &
push_back	include/spdlog/details/backtracer-inl.h	/^SPDLOG_INLINE void backtracer::push_back(const log_msg &msg) {$/;"	f	class:spdlog::details::backtracer	typeref:typename:SPDLOG_INLINE void
push_back	include/spdlog/details/circular_q.h	/^    void push_back(T &&item) {$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
push_back	include/spdlog/fmt/bundled/args.h	/^  template <typename T> void push_back(const T& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
push_back	include/spdlog/fmt/bundled/args.h	/^  template <typename T> void push_back(std::reference_wrapper<T> arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
push_back	include/spdlog/fmt/bundled/args.h	/^  void push_back(const detail::named_arg<char_type, T>& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
push_back	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 void push_back(const T& value) {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR20 void
push_cv_	include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable push_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:std::condition_variable
put	include/spdlog/fmt/bundled/format.h	/^  auto put(appender out, loc_value val, const format_specs<>& specs) const$/;"	f	class:format_facet	typeref:typename:bool
put	include/spdlog/mdc.h	/^    static void put(const std::string &key, const std::string &value) {$/;"	f	class:spdlog::mdc	typeref:typename:void
put_delimiters	include/spdlog/fmt/bin_to_hex.h	/^    bool put_delimiters = true;$/;"	m	struct:std::formatter	typeref:typename:bool
put_newline	include/spdlog/fmt/bin_to_hex.h	/^    void put_newline(It inserter, std::size_t pos) const {$/;"	f	struct:std::formatter	typeref:typename:void
put_newlines	include/spdlog/fmt/bin_to_hex.h	/^    bool put_newlines = true;$/;"	m	struct:std::formatter	typeref:typename:bool
put_positions	include/spdlog/fmt/bin_to_hex.h	/^    bool put_positions = true;  \/\/ position on start of each line$/;"	m	struct:std::formatter	typeref:typename:bool
q_	include/spdlog/details/mpmc_blocking_q.h	/^    spdlog::details::circular_q<T> q_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:spdlog::details::circular_q<T>
q_	include/spdlog/details/thread_pool.h	/^    q_type q_;$/;"	m	class:spdlog::details::thread_pool	typeref:typename:q_type
q_	include/spdlog/sinks/ringbuffer_sink.h	/^    details::circular_q<details::log_msg_buffer> q_;$/;"	m	class:spdlog::sinks::ringbuffer_sink	typeref:typename:details::circular_q<details::log_msg_buffer>
q_text_edit	include/spdlog/sinks/qt_sinks.h	/^        QTextEdit *q_text_edit;$/;"	m	struct:spdlog::sinks::qt_color_sink::invoke_params	typeref:typename:QTextEdit *
q_type	include/spdlog/details/thread_pool.h	/^    using q_type = details::mpmc_blocking_queue<item_type>;$/;"	t	class:spdlog::details::thread_pool	typeref:typename:details::mpmc_blocking_queue<item_type>
qnxnto	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.29.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.29.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.29.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qt_color_logger_mt	include/spdlog/sinks/qt_sinks.h	/^inline std::shared_ptr<logger> qt_color_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
qt_color_logger_st	include/spdlog/sinks/qt_sinks.h	/^inline std::shared_ptr<logger> qt_color_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
qt_color_sink	include/spdlog/sinks/qt_sinks.h	/^    qt_color_sink(QTextEdit *qt_text_edit,$/;"	f	class:spdlog::sinks::qt_color_sink
qt_color_sink	include/spdlog/sinks/qt_sinks.h	/^class qt_color_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
qt_color_sink_mt	include/spdlog/sinks/qt_sinks.h	/^using qt_color_sink_mt = qt_color_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:qt_color_sink<std::mutex>
qt_color_sink_st	include/spdlog/sinks/qt_sinks.h	/^using qt_color_sink_st = qt_color_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:qt_color_sink<details::null_mutex>
qt_logger_mt	include/spdlog/sinks/qt_sinks.h	/^inline std::shared_ptr<logger> qt_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
qt_logger_st	include/spdlog/sinks/qt_sinks.h	/^inline std::shared_ptr<logger> qt_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
qt_object_	include/spdlog/sinks/qt_sinks.h	/^    QObject *qt_object_ = nullptr;$/;"	m	class:spdlog::sinks::qt_sink	typeref:typename:QObject *
qt_sink	include/spdlog/sinks/qt_sinks.h	/^    qt_sink(QObject *qt_object, std::string meta_method)$/;"	f	class:spdlog::sinks::qt_sink
qt_sink	include/spdlog/sinks/qt_sinks.h	/^class qt_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
qt_sink_mt	include/spdlog/sinks/qt_sinks.h	/^using qt_sink_mt = qt_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:qt_sink<std::mutex>
qt_sink_st	include/spdlog/sinks/qt_sinks.h	/^using qt_sink_st = qt_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:qt_sink<details::null_mutex>
qt_text_edit_	include/spdlog/sinks/qt_sinks.h	/^    QTextEdit *qt_text_edit_;$/;"	m	class:spdlog::sinks::qt_color_sink	typeref:typename:QTextEdit *
qualified_type	include/spdlog/fmt/bundled/core.h	/^    using qualified_type =$/;"	t	function:detail::value::format_custom_arg
queue_mutex_	include/spdlog/details/mpmc_blocking_q.h	/^    std::mutex queue_mutex_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:std::mutex
queue_size	include/spdlog/details/thread_pool-inl.h	/^size_t SPDLOG_INLINE thread_pool::queue_size() { return q_.size(); }$/;"	f	class:spdlog::details::thread_pool	typeref:typename:size_t SPDLOG_INLINE
r	include/spdlog/fmt/bundled/color.h	/^  uint8_t r;$/;"	m	struct:rgb	typeref:typename:uint8_t
r_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit r_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::r_formatter
r_formatter	include/spdlog/pattern_formatter-inl.h	/^class r_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
range_begin	include/spdlog/fmt/bundled/ranges.h	/^auto range_begin(T&& rng)$/;"	f	namespace:detail	typeref:typename:enable_if_t<!has_member_fn_begin_end_t<T &&>::value,decltype(begin (static_cast<T &&> (rng))) >
range_begin	include/spdlog/fmt/bundled/ranges.h	/^auto range_begin(const T (&arr)[N]) -> const T* {$/;"	f	namespace:detail	typeref:typename:const T *
range_default_formatter	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR range_default_formatter() { init(range_format_constant<K>()); }$/;"	f	struct:detail::range_default_formatter	typeref:typename:FMT_CONSTEXPR
range_default_formatter	include/spdlog/fmt/bundled/ranges.h	/^struct range_default_formatter<$/;"	s	namespace:detail
range_end	include/spdlog/fmt/bundled/ranges.h	/^auto range_end(T&& rng) -> enable_if_t<!has_member_fn_begin_end_t<T&&>::value,$/;"	f	namespace:detail	typeref:typename:enable_if_t<!has_member_fn_begin_end_t<T &&>::value,decltype(end (static_cast<T &&> (rng))) >
range_end	include/spdlog/fmt/bundled/ranges.h	/^auto range_end(const T (&arr)[N]) -> const T* {$/;"	f	namespace:detail	typeref:typename:const T *
range_format	include/spdlog/fmt/bundled/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	g
range_format_constant	include/spdlog/fmt/bundled/ranges.h	/^using range_format_constant = std::integral_constant<range_format, K>;$/;"	t	namespace:detail	typeref:typename:std::integral_constant<range_format,K>
range_format_kind	include/spdlog/fmt/bundled/ranges.h	/^struct range_format_kind$/;"	s
range_format_kind_	include/spdlog/fmt/bundled/ranges.h	/^struct range_format_kind_$/;"	s	namespace:detail
range_formatter	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR range_formatter() {}$/;"	f	struct:range_formatter	typeref:typename:FMT_CONSTEXPR
range_formatter	include/spdlog/fmt/bundled/ranges.h	/^struct range_formatter<$/;"	s
range_formatter_type	include/spdlog/fmt/bundled/ranges.h	/^using range_formatter_type =$/;"	t	namespace:detail
range_mapper	include/spdlog/fmt/bundled/ranges.h	/^template <typename Context> struct range_mapper {$/;"	s	namespace:detail
range_reference_type	include/spdlog/fmt/bundled/ranges.h	/^using range_reference_type = typename range_reference_type_impl<T>::type;$/;"	t	namespace:detail	typeref:typename:range_reference_type_impl<T>::type
range_reference_type	include/spdlog/fmt/bundled/ranges.h	/^using range_reference_type =$/;"	t	namespace:detail
range_reference_type_impl	include/spdlog/fmt/bundled/ranges.h	/^template <typename R> struct range_reference_type_impl {$/;"	s	namespace:detail
range_reference_type_impl	include/spdlog/fmt/bundled/ranges.h	/^template <typename T, std::size_t N> struct range_reference_type_impl<T[N]> {$/;"	s	namespace:detail
range_type	include/spdlog/fmt/bundled/ranges.h	/^  using range_type = detail::maybe_const_range<R>;$/;"	t	struct:detail::range_default_formatter	typeref:typename:detail::maybe_const_range<R>
read_reply	src/mpris_media_player.cpp	/^int MprisMediaPlayer::read_reply(DBusMessage *&reply, void *output) {$/;"	f	class:MprisMediaPlayer	typeref:typename:int
rebecca_purple	include/spdlog/fmt/bundled/color.h	/^  rebecca_purple = 0x663399,           \/\/ rgb(102,51,153)$/;"	e	enum:color
rebuild_cache	build/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
red	include/spdlog/fmt/bundled/color.h	/^  red = 0xFF0000,                      \/\/ rgb(255,0,0)$/;"	e	enum:color
red	include/spdlog/fmt/bundled/color.h	/^  red,$/;"	e	enum:terminal_color
red	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t red = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
red_bold	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t red_bold = "\\033[31m\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
ref	include/spdlog/fmt/bundled/core.h	/^  arg_ref<Char>& ref;$/;"	m	struct:detail::dynamic_spec_id_handler	typeref:typename:arg_ref<Char> &
reference	include/spdlog/fmt/bundled/format.h	/^  using reference = void;$/;"	t	class:detail::counting_iterator	typeref:typename:void
register_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::register_logger(std::shared_ptr<logger> new_logger) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
register_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void register_logger(std::shared_ptr<logger> logger) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
register_logger_	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::register_logger_(std::shared_ptr<logger> new_logger) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
registry	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE registry::registry()$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE
registry	include/spdlog/details/registry.h	/^class SPDLOG_API registry {$/;"	c	namespace:spdlog::details
remaining_pad_	include/spdlog/pattern_formatter-inl.h	/^    long remaining_pad_;$/;"	m	class:spdlog::details::scoped_padder	typeref:typename:long
remove	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE int remove(const filename_t &filename) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE int
remove	include/spdlog/mdc.h	/^    static void remove(const std::string &key) { get_context().erase(key); }$/;"	f	class:spdlog::mdc	typeref:typename:void
remove_const_t	include/spdlog/fmt/bundled/core.h	/^using remove_const_t = typename std::remove_const<T>::type;$/;"	t	typeref:typename:std::remove_const<T>::type
remove_cvref_t	include/spdlog/common.h	/^using remove_cvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;$/;"	t	namespace:spdlog	typeref:typename:std::remove_cv<typename std::remove_reference<T>::type>::type
remove_cvref_t	include/spdlog/fmt/bundled/core.h	/^using remove_cvref_t = typename std::remove_cv<remove_reference_t<T>>::type;$/;"	t	typeref:typename:std::remove_cv<remove_reference_t<T>>::type
remove_if_exists	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE int remove_if_exists(const filename_t &filename) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE int
remove_init_file_	include/spdlog/sinks/hourly_file_sink.h	/^    bool remove_init_file_;$/;"	m	class:spdlog::sinks::hourly_file_sink	typeref:typename:bool
remove_leading_zeros	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void remove_leading_zeros() {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
remove_prefix	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void remove_prefix(size_t n) noexcept {$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR void
remove_reference_t	include/spdlog/fmt/bundled/core.h	/^using remove_reference_t = typename std::remove_reference<T>::type;$/;"	t	typeref:typename:std::remove_reference<T>::type
remove_sink	include/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sub_sink) {$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
remove_trailing_zeros	include/spdlog/fmt/bundled/format-inl.h	/^FMT_INLINE int remove_trailing_zeros(uint32_t& n, int s = 0) noexcept {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_INLINE int
remove_trailing_zeros	include/spdlog/fmt/bundled/format-inl.h	/^FMT_INLINE int remove_trailing_zeros(uint64_t& n) noexcept {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_INLINE int
rename	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE int rename(const filename_t &filename1, const filename_t &filename2) SPDLOG_NOEXCE/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE int
rename_file_	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE bool rotating_file_sink<Mutex>::rename_file_(const filename_t &src_filename,$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:SPDLOG_INLINE bool
reopen	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::reopen(bool truncate) {$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE void
rep	include/spdlog/fmt/bundled/chrono.h	/^  using rep = typename Duration::rep;$/;"	t	function:detail::write_floating_seconds	typeref:typename:Duration::rep
replace	include/spdlog/fmt/bundled/format.h	/^enum class to_utf8_error_policy { abort, replace };$/;"	e	enum:detail::to_utf8_error_policy
report_error	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void report_error(format_func func, int error_code,$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
report_system_error	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void report_system_error(int error_code,$/;"	f	typeref:typename:FMT_FUNC void
reserve	include/spdlog/fmt/bundled/args.h	/^  void reserve(size_t new_cap, size_t new_cap_named) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
reserve	include/spdlog/fmt/bundled/format.h	/^  void reserve(size_t new_capacity) { this->try_reserve(new_capacity); }$/;"	f	class:basic_memory_buffer	typeref:typename:void
reserve	include/spdlog/fmt/bundled/format.h	/^constexpr auto reserve(Iterator& it, size_t) -> Iterator& {$/;"	f	namespace:detail	typeref:typename:Iterator &
reserve	include/spdlog/fmt/bundled/format.h	/^inline auto reserve(buffer_appender<T> it, size_t n) -> buffer_appender<T> {$/;"	f	namespace:detail	typeref:typename:buffer_appender<T>
reserve	include/spdlog/fmt/bundled/format.h	/^reserve(std::back_insert_iterator<Container> it, size_t n) ->$/;"	f	namespace:detail	typeref:typename:Container::value_type *
reserve_iterator	include/spdlog/fmt/bundled/format.h	/^using reserve_iterator =$/;"	t	namespace:detail
reset	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t reset = "\\033[m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
reset	include/spdlog/stopwatch.h	/^    void reset() { start_tp_ = clock::now(); }$/;"	f	class:spdlog::stopwatch	typeref:typename:void
reset_color	include/spdlog/fmt/bundled/color.h	/^template <typename Char> inline void reset_color(buffer<Char>& buffer) {$/;"	f	namespace:detail	typeref:typename:void
reset_discard_counter	include/spdlog/details/mpmc_blocking_q.h	/^    void reset_discard_counter() { discard_counter_.store(0, std::memory_order_relaxed); }$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
reset_discard_counter	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::reset_discard_counter() { q_.reset_discard_counter(); }$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void SPDLOG_INLINE
reset_overrun_counter	include/spdlog/details/circular_q.h	/^    void reset_overrun_counter() { overrun_counter_ = 0; }$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
reset_overrun_counter	include/spdlog/details/mpmc_blocking_q.h	/^    void reset_overrun_counter() {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
reset_overrun_counter	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::reset_overrun_counter() { q_.reset_overrun_counter(); }$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void SPDLOG_INLINE
resize	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void resize(size_t count) { this->try_resize(count); }$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
result	include/spdlog/fmt/bundled/core.h	/^  using result = decltype(to_string_view(std::declval<S>()));$/;"	t	struct:detail::char_t_impl
result	include/spdlog/fmt/bundled/format-inl.h	/^    carrier_uint result;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_result	typeref:typename:carrier_uint
result_t	include/spdlog/fmt/bundled/ranges.h	/^using result_t = std::tuple<formatter<remove_cvref_t<T>, Char>...>;$/;"	t	namespace:detail::tuple	typeref:typename:std::tuple<formatter<remove_cvref_t<T>,Char>...>
reverse	include/spdlog/fmt/bundled/color.h	/^  reverse = 1 << 5,$/;"	e	enum:emphasis
reverse	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t reverse = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb() : r(0), g(0), b(0) {}$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb(color hex)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb(uint32_t hex)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR rgb(uint8_t r_, uint8_t g_, uint8_t b_) : r(r_), g(g_), b(b_) {}$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	include/spdlog/fmt/bundled/color.h	/^struct rgb {$/;"	s
rgb_color	include/spdlog/fmt/bundled/color.h	/^    uint32_t rgb_color;$/;"	m	union:detail::color_type::color_union	typeref:typename:uint32_t
rhs	include/spdlog/fmt/bundled/compile.h	/^  R rhs;$/;"	m	struct:detail::concat	typeref:typename:R
right	include/spdlog/pattern_formatter.h	/^    enum class pad_side { left, right, center };$/;"	e	enum:spdlog::details::padding_info::pad_side
ringbuffer_sink	include/spdlog/sinks/ringbuffer_sink.h	/^    explicit ringbuffer_sink(size_t n_items)$/;"	f	class:spdlog::sinks::ringbuffer_sink
ringbuffer_sink	include/spdlog/sinks/ringbuffer_sink.h	/^class ringbuffer_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
ringbuffer_sink_mt	include/spdlog/sinks/ringbuffer_sink.h	/^using ringbuffer_sink_mt = ringbuffer_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ringbuffer_sink<std::mutex>
ringbuffer_sink_st	include/spdlog/sinks/ringbuffer_sink.h	/^using ringbuffer_sink_st = ringbuffer_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ringbuffer_sink<details::null_mutex>
rosy_brown	include/spdlog/fmt/bundled/color.h	/^  rosy_brown = 0xBC8F8F,               \/\/ rgb(188,143,143)$/;"	e	enum:color
rotate_	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE void rotating_file_sink<Mutex>::rotate_() {$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:SPDLOG_INLINE void
rotating_file_sink	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE rotating_file_sink<Mutex>::rotating_file_sink($/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:SPDLOG_INLINE
rotating_file_sink	include/spdlog/sinks/rotating_file_sink.h	/^class rotating_file_sink final : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
rotating_file_sink_mt	include/spdlog/sinks/rotating_file_sink.h	/^using rotating_file_sink_mt = rotating_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<std::mutex>
rotating_file_sink_st	include/spdlog/sinks/rotating_file_sink.h	/^using rotating_file_sink_st = rotating_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<details::null_mutex>
rotating_logger_mt	include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotating_logger_st	include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotation_h_	include/spdlog/sinks/daily_file_sink.h	/^    int rotation_h_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:int
rotation_m_	include/spdlog/sinks/daily_file_sink.h	/^    int rotation_m_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:int
rotation_tp_	include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point rotation_tp_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:log_clock::time_point
rotation_tp_	include/spdlog/sinks/hourly_file_sink.h	/^    log_clock::time_point rotation_tp_;$/;"	m	class:spdlog::sinks::hourly_file_sink	typeref:typename:log_clock::time_point
rotr	include/spdlog/fmt/bundled/format-inl.h	/^FMT_CONSTEXPR inline auto rotr(uint32_t n, uint32_t r) noexcept -> uint32_t {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
rotr	include/spdlog/fmt/bundled/format-inl.h	/^FMT_CONSTEXPR inline auto rotr(uint64_t n, uint32_t r) noexcept -> uint64_t {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
royal_blue	include/spdlog/fmt/bundled/color.h	/^  royal_blue = 0x4169E1,               \/\/ rgb(65,105,225)$/;"	e	enum:color
run	include/spdlog/fmt/bundled/chrono.h	/^    auto run() -> bool {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
run	include/spdlog/fmt/bundled/chrono.h	/^    auto run() -> bool {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
runtime	include/spdlog/fmt/bundled/core.h	/^inline auto runtime(string_view s) -> runtime_format_string<> { return {{s}}; }$/;"	f	typeref:typename:runtime_format_string<>
runtime	include/spdlog/fmt/bundled/core.h	/^inline auto runtime(string_view s) -> string_view { return s; }$/;"	f	typeref:typename:string_view
runtime	include/spdlog/fmt/bundled/xchar.h	/^inline auto runtime(wstring_view s) -> runtime_format_string<wchar_t> {$/;"	f	typeref:typename:runtime_format_string<wchar_t>
runtime	include/spdlog/fmt/bundled/xchar.h	/^inline auto runtime(wstring_view s) -> wstring_view { return s; }$/;"	f	typeref:typename:wstring_view
runtime_format_string	include/spdlog/fmt/bundled/core.h	/^template <typename Char = char> struct runtime_format_string {$/;"	s
runtime_named_field	include/spdlog/fmt/bundled/compile.h	/^template <typename Char> struct runtime_named_field {$/;"	s	namespace:detail
s	include/spdlog/fmt/bundled/chrono.h	/^  seconds s;$/;"	m	struct:detail::chrono_formatter	typeref:typename:seconds
saddle_brown	include/spdlog/fmt/bundled/color.h	/^  saddle_brown = 0x8B4513,             \/\/ rgb(139,69,19)$/;"	e	enum:color
safe_duration_cast	include/spdlog/fmt/bundled/chrono.h	/^auto safe_duration_cast(std::chrono::duration<FromRep, FromPeriod> from,$/;"	f	namespace:safe_duration_cast	typeref:typename:To
safe_duration_cast	include/spdlog/fmt/bundled/chrono.h	/^namespace safe_duration_cast {$/;"	n
safe_float_conversion	include/spdlog/fmt/bundled/chrono.h	/^FMT_CONSTEXPR auto safe_float_conversion(const From from, int& ec) -> To {$/;"	f	namespace:safe_duration_cast	typeref:typename:To
salmon	include/spdlog/fmt/bundled/color.h	/^  salmon = 0xFA8072,                   \/\/ rgb(250,128,114)$/;"	e	enum:color
sandy_brown	include/spdlog/fmt/bundled/color.h	/^  sandy_brown = 0xF4A460,              \/\/ rgb(244,164,96)$/;"	e	enum:color
say	include/spdlog/fmt/bundled/os.h	/^void say(const S& format_str, Args&&... args) {$/;"	f	typeref:typename:void
scoped_padder	include/spdlog/pattern_formatter-inl.h	/^    scoped_padder(size_t wrapped_size, const padding_info &padinfo, memory_buf_t &dest)$/;"	f	class:spdlog::details::scoped_padder
scoped_padder	include/spdlog/pattern_formatter-inl.h	/^class scoped_padder {$/;"	c	namespace:spdlog::details
sea_green	include/spdlog/fmt/bundled/color.h	/^  sea_green = 0x2E8B57,                \/\/ rgb(46,139,87)$/;"	e	enum:color
sea_shell	include/spdlog/fmt/bundled/color.h	/^  sea_shell = 0xFFF5EE,                \/\/ rgb(255,245,238)$/;"	e	enum:color
second	include/spdlog/fmt/bundled/chrono.h	/^  auto second() const -> Rep { return static_cast<Rep>(mod(s.count(), 60)); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
seconds	include/spdlog/fmt/bundled/chrono.h	/^  using seconds = std::chrono::duration<rep>;$/;"	t	struct:detail::chrono_formatter	typeref:typename:std::chrono::duration<rep>
send	include/spdlog/details/tcp_client-windows.h	/^    void send(const char *data, size_t n_bytes) {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
send	include/spdlog/details/tcp_client.h	/^    void send(const char *data, size_t n_bytes) {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
send	include/spdlog/details/udp_client-windows.h	/^    void send(const char *data, size_t n_bytes) {$/;"	f	class:spdlog::details::udp_client	typeref:typename:void
send	include/spdlog/details/udp_client.h	/^    void send(const char *data, size_t n_bytes) {$/;"	f	class:spdlog::details::udp_client	typeref:typename:void
send_dbus_msg	src/mpris_media_player.cpp	/^int MprisMediaPlayer::send_dbus_msg(DBusMessage *&msg) {$/;"	f	class:MprisMediaPlayer	typeref:typename:int
send_dbus_msg_with_reply	src/mpris_media_player.cpp	/^int MprisMediaPlayer::send_dbus_msg_with_reply(DBusMessage *&msg,$/;"	f	class:MprisMediaPlayer	typeref:typename:int
sentinel_t	include/spdlog/fmt/bundled/format.h	/^template <typename T> using sentinel_t = decltype(std::end(std::declval<T&>()));$/;"	t	namespace:detail
sep	include/spdlog/fmt/bundled/format.h	/^  basic_string_view<Char> sep;$/;"	m	struct:join_view	typeref:typename:basic_string_view<Char>
sep	include/spdlog/fmt/bundled/format.h	/^  std::basic_string<Char> sep;$/;"	m	struct:detail::loc_writer	typeref:typename:std::basic_string<Char>
sep	include/spdlog/fmt/bundled/ranges.h	/^  basic_string_view<Char> sep;$/;"	m	struct:tuple_join_view	typeref:typename:basic_string_view<Char>
separator	include/spdlog/fmt/bundled/ranges.h	/^  basic_string_view<char_type> separator;$/;"	m	struct:detail::format_tuple_element	typeref:typename:basic_string_view<char_type>
separator_	include/spdlog/fmt/bundled/format.h	/^  std::string separator_;$/;"	m	class:format_facet	typeref:typename:std::string
sequence	include/spdlog/fmt/bundled/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
server_addr	include/spdlog/sinks/kafka_sink.h	/^    std::string server_addr;$/;"	m	struct:spdlog::sinks::kafka_sink_config	typeref:typename:std::string
server_host	include/spdlog/sinks/tcp_sink.h	/^    std::string server_host;$/;"	m	struct:spdlog::sinks::tcp_sink_config	typeref:typename:std::string
server_host	include/spdlog/sinks/udp_sink.h	/^    std::string server_host;$/;"	m	struct:spdlog::sinks::udp_sink_config	typeref:typename:std::string
server_port	include/spdlog/sinks/tcp_sink.h	/^    int server_port;$/;"	m	struct:spdlog::sinks::tcp_sink_config	typeref:typename:int
server_port	include/spdlog/sinks/udp_sink.h	/^    uint16_t server_port;$/;"	m	struct:spdlog::sinks::udp_sink_config	typeref:typename:uint16_t
session_name	include/mpris_media_player.h	/^  std::string session_name;$/;"	m	class:MprisMediaPlayer	typeref:typename:std::string
set	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR void
set	include/spdlog/fmt/bundled/core.h	/^constexpr auto set(type rhs) -> int { return 1 << static_cast<int>(rhs); }$/;"	f	namespace:detail	typeref:typename:int
set	include/spdlog/fmt/bundled/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
set_automatic_registration	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_automatic_registration(bool automatic_registration) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
set_automatic_registration	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_automatic_registration(bool automatic_registration) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
set_background_color	include/spdlog/fmt/bundled/color.h	/^  bool set_background_color;$/;"	m	class:text_style	typeref:typename:bool
set_brackets	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR void set_brackets(basic_string_view<Char> open,$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
set_brackets	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR void set_brackets(basic_string_view<Char> open,$/;"	f	struct:range_formatter	typeref:typename:FMT_CONSTEXPR void
set_color	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_color(level::level_enum color_level,$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
set_color	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color(level::level_enum level,$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
set_color_mode	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_color_mode(color_mode mode) {$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
set_color_mode	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color_mode(color_mode mode) {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
set_color_mode_impl	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color_mode_impl(color_mode mode) {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
set_debug_format	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void set_debug_format(bool set = true) {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
set_debug_format	include/spdlog/fmt/bundled/std.h	/^  FMT_CONSTEXPR void set_debug_format(bool set = true) { debug_ = set; }$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
set_default_color	include/spdlog/sinks/qt_sinks.h	/^    void set_default_color(QTextCharFormat format) {$/;"	f	class:spdlog::sinks::qt_color_sink	typeref:typename:void
set_default_logger	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_default_logger(std::shared_ptr<logger> new_default_logger) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
set_default_logger	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_default_logger(std::shared_ptr<spdlog::logger> default_logger) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
set_error_handler	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_error_handler(err_handler handler) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
set_error_handler	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_error_handler(err_handler handler) {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
set_error_handler	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_error_handler(void (*handler)(const std::string &msg)) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
set_foreground_color	include/spdlog/fmt/bundled/color.h	/^  bool set_foreground_color;$/;"	m	class:text_style	typeref:typename:bool
set_foreground_color_	include/spdlog/sinks/wincolor_sink-inl.h	/^wincolor_sink<ConsoleMutex>::set_foreground_color_(std::uint16_t attribs) {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:std::uint16_t SPDLOG_INLINE
set_formatter	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_formatter(std::unique_ptr<formatter> formatter) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
set_formatter	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_formatter(std::unique_ptr<formatter> f) {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
set_formatter	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_formatter($/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
set_formatter	include/spdlog/sinks/base_sink-inl.h	/^spdlog::sinks::base_sink<Mutex>::set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void SPDLOG_INLINE
set_formatter	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::set_formatter($/;"	f	class:spdlog::sinks::stdout_sink_base	typeref:typename:SPDLOG_INLINE void
set_formatter	include/spdlog/sinks/wincolor_sink-inl.h	/^wincolor_sink<ConsoleMutex>::set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
set_formatter	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_formatter(std::unique_ptr<spdlog::formatter> formatter) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
set_formatter_	include/spdlog/sinks/base_sink-inl.h	/^spdlog::sinks::base_sink<Mutex>::set_formatter_(std::unique_ptr<spdlog::formatter> sink_formatte/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void SPDLOG_INLINE
set_formatter_	include/spdlog/sinks/dist_sink.h	/^    void set_formatter_(std::unique_ptr<spdlog::formatter> sink_formatter) override {$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
set_level	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_level(level::level_enum log_level) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
set_level	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_level(level::level_enum log_level) { level_.store(log_level); }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
set_level	include/spdlog/sinks/sink-inl.h	/^SPDLOG_INLINE void spdlog::sinks::sink::set_level(level::level_enum log_level) {$/;"	f	class:spdlog::sinks::sink	typeref:typename:SPDLOG_INLINE void
set_level	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_level(level::level_enum log_level) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
set_level_color	include/spdlog/sinks/qt_sinks.h	/^    void set_level_color(level::level_enum color_level, QTextCharFormat format) {$/;"	f	class:spdlog::sinks::qt_color_sink	typeref:typename:void
set_levels	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_levels(log_levels levels, level::level_enum *global_level) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
set_loop_status	src/mpris_media_player.cpp	/^void MprisMediaPlayer::set_loop_status(DBusLoopStatusType loop_status) {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
set_padding_info	include/spdlog/pattern_formatter.h	/^    void set_padding_info(const details::padding_info &padding) {$/;"	f	class:spdlog::custom_flag_formatter	typeref:typename:void
set_pattern	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::set_pattern(std::string pattern, pattern_time_type time_type) {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
set_pattern	include/spdlog/pattern_formatter-inl.h	/^SPDLOG_INLINE void pattern_formatter::set_pattern(std::string pattern) {$/;"	f	class:spdlog::pattern_formatter	typeref:typename:SPDLOG_INLINE void
set_pattern	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE void ansicolor_sink<ConsoleMutex>::set_pattern(const std::string &pattern) {$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE void
set_pattern	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::set_pattern(const std::string &pattern) {$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void SPDLOG_INLINE
set_pattern	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE void stdout_sink_base<ConsoleMutex>::set_pattern(const std::string &pattern) {$/;"	f	class:spdlog::sinks::stdout_sink_base	typeref:typename:SPDLOG_INLINE void
set_pattern	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_pattern(const std::string &pattern) {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
set_pattern	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void set_pattern(std::string pattern, pattern_time_type time_type) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
set_pattern_	include/spdlog/sinks/base_sink-inl.h	/^void SPDLOG_INLINE spdlog::sinks::base_sink<Mutex>::set_pattern_(const std::string &pattern) {$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void SPDLOG_INLINE
set_pattern_	include/spdlog/sinks/dist_sink.h	/^    void set_pattern_(const std::string &pattern) override {$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
set_separator	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR void set_separator(basic_string_view<Char> sep) {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
set_separator	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR void set_separator(basic_string_view<Char> sep) {$/;"	f	struct:range_formatter	typeref:typename:FMT_CONSTEXPR void
set_shuffle	src/mpris_media_player.cpp	/^void MprisMediaPlayer::set_shuffle(bool shuffle_on) {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
set_sinks	include/spdlog/sinks/dist_sink.h	/^    void set_sinks(std::vector<std::shared_ptr<sink>> sinks) {$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
set_tp	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::set_tp(std::shared_ptr<thread_pool> tp) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
set_volume	src/mpris_media_player.cpp	/^void MprisMediaPlayer::set_volume(double volume) {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
shift_amount	include/spdlog/fmt/bundled/format-inl.h	/^  int shift_amount;$/;"	m	struct:detail::dragonbox::__anondc4b9cc20108	typeref:typename:int
short_filename_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit short_filename_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::short_filename_formatter
short_filename_formatter	include/spdlog/pattern_formatter-inl.h	/^class short_filename_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
short_level_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit short_level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::short_level_formatter
short_level_formatter	include/spdlog/pattern_formatter-inl.h	/^class short_level_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
short_level_names	include/spdlog/common-inl.h	/^static const char *short_level_names[] SPDLOG_SHORT_LEVEL_NAMES;$/;"	v	namespace:spdlog::level	typeref:typename:const char * []SPDLOG_SHORT_LEVEL_NAMES
shorter_interval_case	include/spdlog/fmt/bundled/format-inl.h	/^FMT_INLINE decimal_fp<T> shorter_interval_case(int exponent) noexcept {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_INLINE decimal_fp<T>
shorter_interval_tie_lower_threshold	include/spdlog/fmt/bundled/format.h	/^  static const int shorter_interval_tie_lower_threshold = -35;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
shorter_interval_tie_lower_threshold	include/spdlog/fmt/bundled/format.h	/^  static const int shorter_interval_tie_lower_threshold = -77;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
shorter_interval_tie_upper_threshold	include/spdlog/fmt/bundled/format.h	/^  static const int shorter_interval_tie_upper_threshold = -35;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
shorter_interval_tie_upper_threshold	include/spdlog/fmt/bundled/format.h	/^  static const int shorter_interval_tie_upper_threshold = -77;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
should_backtrace	include/spdlog/logger.h	/^    bool should_backtrace() const { return tracer_.enabled(); }$/;"	f	class:spdlog::logger	typeref:typename:bool
should_color	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE bool ansicolor_sink<ConsoleMutex>::should_color() {$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE bool
should_do_colors_	include/spdlog/sinks/ansicolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:bool
should_do_colors_	include/spdlog/sinks/wincolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:bool
should_flush_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE bool logger::should_flush_(const details::log_msg &msg) {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE bool
should_log	include/spdlog/logger.h	/^    bool should_log(level::level_enum msg_level) const {$/;"	f	class:spdlog::logger	typeref:typename:bool
should_log	include/spdlog/sinks/sink-inl.h	/^SPDLOG_INLINE bool spdlog::sinks::sink::should_log(spdlog::level::level_enum msg_level) const {$/;"	f	class:spdlog::sinks::sink	typeref:typename:SPDLOG_INLINE bool
should_log	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE bool should_log(level::level_enum log_level) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE bool
show_ascii	include/spdlog/fmt/bin_to_hex.h	/^    bool show_ascii = false;$/;"	m	struct:std::formatter	typeref:typename:bool
showpoint	include/spdlog/fmt/bundled/format.h	/^  bool showpoint : 1;$/;"	m	struct:detail::float_specs	typeref:typename:bool:1
shutdown	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::shutdown() {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
shutdown	include/spdlog/spdlog-inl.h	/^SPDLOG_INLINE void shutdown() { details::registry::instance().shutdown(); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
sid_t	include/spdlog/sinks/win_eventlog_sink.h	/^    sid_t() {}$/;"	f	struct:spdlog::sinks::win_eventlog::internal::sid_t
sid_t	include/spdlog/sinks/win_eventlog_sink.h	/^struct sid_t {$/;"	s	namespace:spdlog::sinks::win_eventlog::internal
side_	include/spdlog/pattern_formatter.h	/^    pad_side side_ = pad_side::left;$/;"	m	struct:spdlog::details::padding_info	typeref:typename:pad_side
sienna	include/spdlog/fmt/bundled/color.h	/^  sienna = 0xA0522D,                   \/\/ rgb(160,82,45)$/;"	e	enum:color
sign	include/spdlog/fmt/bundled/core.h	/^  sign_t sign : 3;$/;"	m	struct:format_specs	typeref:typename:sign_t:3
sign	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
sign	include/spdlog/fmt/bundled/core.h	/^namespace sign {$/;"	n
sign	include/spdlog/fmt/bundled/format.h	/^  sign_t sign : 8;$/;"	m	struct:detail::float_specs	typeref:typename:sign_t:8
sign	include/spdlog/fmt/bundled/format.h	/^template <typename Char, typename Sign> constexpr auto sign(Sign s) -> Char {$/;"	f	namespace:detail	typeref:typename:Char
sign_t	include/spdlog/fmt/bundled/core.h	/^using sign_t = sign::type;$/;"	t	typeref:typename:sign::type
signbit	include/spdlog/fmt/bundled/format.h	/^FMT_INLINE FMT_CONSTEXPR bool signbit(T value) {$/;"	f	namespace:detail	typeref:typename:FMT_INLINE FMT_CONSTEXPR bool
significand	include/spdlog/fmt/bundled/format.h	/^  const char* significand;$/;"	m	struct:detail::big_decimal_fp	typeref:typename:const char *
significand	include/spdlog/fmt/bundled/format.h	/^  significand_type significand;$/;"	m	struct:detail::dragonbox::decimal_fp	typeref:typename:significand_type
significand_size	include/spdlog/fmt/bundled/format.h	/^  int significand_size;$/;"	m	struct:detail::big_decimal_fp	typeref:typename:int
significand_type	include/spdlog/fmt/bundled/format.h	/^  using significand_type = typename float_info<T>::carrier_uint;$/;"	t	struct:detail::dragonbox::decimal_fp	typeref:typename:float_info<T>::carrier_uint
silver	include/spdlog/fmt/bundled/color.h	/^  silver = 0xC0C0C0,                   \/\/ rgb(192,192,192)$/;"	e	enum:color
singleton	include/spdlog/fmt/bundled/format-inl.h	/^struct singleton {$/;"	s	namespace:detail
sink	include/spdlog/sinks/sink.h	/^class SPDLOG_API sink {$/;"	c	namespace:spdlog::sinks
sink_it_	include/spdlog/async_logger-inl.h	/^SPDLOG_INLINE void spdlog::async_logger::sink_it_(const details::log_msg &msg){$/;"	f	class:spdlog::async_logger	typeref:typename:SPDLOG_INLINE void
sink_it_	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::sink_it_(const details::log_msg &msg) {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
sink_it_	include/spdlog/sinks/android_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/basic_file_sink-inl.h	/^SPDLOG_INLINE void basic_file_sink<Mutex>::sink_it_(const details::log_msg &msg) {$/;"	f	class:spdlog::sinks::basic_file_sink	typeref:typename:SPDLOG_INLINE void
sink_it_	include/spdlog/sinks/callback_sink.h	/^    void sink_it_(const details::log_msg &msg) override { callback_(msg); }$/;"	f	class:spdlog::sinks::callback_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/daily_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/dist_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/dup_filter_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::dup_filter_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/hourly_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::hourly_file_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/kafka_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::kafka_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/mongo_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::mongo_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/msvc_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::msvc_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/null_sink.h	/^    void sink_it_(const details::log_msg &) override {}$/;"	f	class:spdlog::sinks::null_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/ostream_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::ostream_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/qt_sinks.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::qt_color_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/qt_sinks.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::qt_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/ringbuffer_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::ringbuffer_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/rotating_file_sink-inl.h	/^SPDLOG_INLINE void rotating_file_sink<Mutex>::sink_it_(const details::log_msg &msg) {$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:SPDLOG_INLINE void
sink_it_	include/spdlog/sinks/syslog_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/systemd_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::systemd_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/tcp_sink.h	/^    void sink_it_(const spdlog::details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::tcp_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/udp_sink.h	/^    void sink_it_(const spdlog::details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::udp_sink	typeref:typename:void
sink_it_	include/spdlog/sinks/win_eventlog_sink.h	/^    void sink_it_(const details::log_msg &msg) override {$/;"	f	class:spdlog::sinks::win_eventlog::win_eventlog_sink	typeref:typename:void
sink_ptr	include/spdlog/common.h	/^using sink_ptr = std::shared_ptr<sinks::sink>;$/;"	t	namespace:spdlog	typeref:typename:std::shared_ptr<sinks::sink>
sinks	include/spdlog/common.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/fwd.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/logger-inl.h	/^SPDLOG_INLINE const std::vector<sink_ptr> &logger::sinks() const { return sinks_; }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE const std::vector<sink_ptr> &
sinks	include/spdlog/logger-inl.h	/^SPDLOG_INLINE std::vector<sink_ptr> &logger::sinks() { return sinks_; }$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE std::vector<sink_ptr> &
sinks	include/spdlog/sinks/android_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ansicolor_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ansicolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/base_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/basic_file_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/basic_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/callback_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/daily_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> &sinks() { return sinks_; }$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:std::vector<std::shared_ptr<sink>> &
sinks	include/spdlog/sinks/dist_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/dup_filter_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/hourly_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/kafka_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/mongo_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/msvc_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/null_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ostream_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/qt_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ringbuffer_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/rotating_file_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/rotating_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_color_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_sinks-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/syslog_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/systemd_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/tcp_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/udp_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/win_eventlog_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/wincolor_sink-inl.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/wincolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks_	include/spdlog/logger.h	/^    std::vector<sink_ptr> sinks_;$/;"	m	class:spdlog::logger	typeref:typename:std::vector<sink_ptr>
sinks_	include/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> sinks_;$/;"	m	class:spdlog::sinks::dist_sink	typeref:typename:std::vector<std::shared_ptr<sink>>
sinks_init_list	include/spdlog/common.h	/^using sinks_init_list = std::initializer_list<sink_ptr>;$/;"	t	namespace:spdlog	typeref:typename:std::initializer_list<sink_ptr>
sint_set	include/spdlog/fmt/bundled/core.h	/^  sint_set =$/;"	e	enum:detail::__anon0accc0920103
size	include/spdlog/details/circular_q.h	/^    size_t size() const {$/;"	f	class:spdlog::details::circular_q	typeref:typename:size_t
size	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE size_t file_helper::size() const {$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE size_t
size	include/spdlog/details/mpmc_blocking_q.h	/^    size_t size() {$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:size_t
size	include/spdlog/fmt/bundled/core.h	/^  constexpr auto size() const -> size_t { return size_; }$/;"	f	struct:detail::fill_t	typeref:typename:size_t
size	include/spdlog/fmt/bundled/core.h	/^  constexpr auto size() const noexcept -> size_t { return size_; }$/;"	f	class:basic_string_view	typeref:typename:auto
size	include/spdlog/fmt/bundled/core.h	/^  constexpr auto size() const noexcept -> size_t { return size_; }$/;"	f	class:detail::buffer	typeref:typename:auto
size	include/spdlog/fmt/bundled/core.h	/^  size_t size;$/;"	m	struct:detail::named_arg_value	typeref:typename:size_t
size	include/spdlog/fmt/bundled/core.h	/^  size_t size;$/;"	m	struct:detail::string_value	typeref:typename:size_t
size	include/spdlog/fmt/bundled/core.h	/^  size_t size;$/;"	m	struct:format_to_n_result	typeref:typename:size_t
size	include/spdlog/fmt/bundled/format.h	/^  auto size() const -> size_t { return buffer_.size() - 1; }$/;"	f	class:detail::to_utf8	typeref:typename:size_t
size	include/spdlog/fmt/bundled/format.h	/^  auto size() const -> size_t { return buffer_.size() - 1; }$/;"	f	class:detail::utf8_to_utf16	typeref:typename:size_t
size	include/spdlog/fmt/bundled/format.h	/^  auto size() const -> size_t {$/;"	f	class:format_int	typeref:typename:size_t
size	include/spdlog/fmt/bundled/format.h	/^  size_t size;$/;"	m	struct:detail::write_int_data	typeref:typename:size_t
size	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR auto size() -> size_t { return sizeof...(N); }$/;"	f	struct:detail::integer_sequence	typeref:typename:size_t
size_	include/spdlog/fmt/bundled/core.h	/^  size_t size_;$/;"	m	class:basic_string_view	typeref:typename:size_t
size_	include/spdlog/fmt/bundled/core.h	/^  size_t size_;$/;"	m	class:detail::buffer	typeref:typename:size_t
size_	include/spdlog/fmt/bundled/core.h	/^  unsigned char size_ = 1;$/;"	m	struct:detail::fill_t	typeref:typename:unsigned char
size_per_line	include/spdlog/fmt/bin_to_hex.h	/^    size_t size_per_line() const { return size_per_line_; }$/;"	f	class:spdlog::details::dump_info	typeref:typename:size_t
size_per_line_	include/spdlog/fmt/bin_to_hex.h	/^    size_t size_per_line_;$/;"	m	class:spdlog::details::dump_info	typeref:typename:size_t
size_type	include/spdlog/fmt/bundled/core.h	/^  using size_type = int;$/;"	t	class:basic_format_args	typeref:typename:int
skip_counter_	include/spdlog/sinks/dup_filter_sink.h	/^    size_t skip_counter_ = 0;$/;"	m	class:spdlog::sinks::dup_filter_sink	typeref:typename:size_t
sky_blue	include/spdlog/fmt/bundled/color.h	/^  sky_blue = 0x87CEEB,                 \/\/ rgb(135,206,235)$/;"	e	enum:color
slate_blue	include/spdlog/fmt/bundled/color.h	/^  slate_blue = 0x6A5ACD,               \/\/ rgb(106,90,205)$/;"	e	enum:color
slate_gray	include/spdlog/fmt/bundled/color.h	/^  slate_gray = 0x708090,               \/\/ rgb(112,128,144)$/;"	e	enum:color
sleep_for_millis	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE void sleep_for_millis(unsigned int milliseconds) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE void
small_division_by_pow10	include/spdlog/fmt/bundled/format-inl.h	/^template <int N> auto small_division_by_pow10(uint32_t n) noexcept -> uint32_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
small_divisor	include/spdlog/fmt/bundled/format.h	/^  static const int small_divisor = 100;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
small_divisor	include/spdlog/fmt/bundled/format.h	/^  static const int small_divisor = 10;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
snow	include/spdlog/fmt/bundled/color.h	/^  snow = 0xFFFAFA,                     \/\/ rgb(255,250,250)$/;"	e	enum:color
sockAddr_	include/spdlog/details/udp_client.h	/^    struct sockaddr_in sockAddr_;$/;"	m	class:spdlog::details::udp_client	typeref:struct:sockaddr_in
socket_	include/spdlog/details/tcp_client-windows.h	/^    SOCKET socket_ = INVALID_SOCKET;$/;"	m	class:spdlog::details::tcp_client	typeref:typename:SOCKET
socket_	include/spdlog/details/tcp_client.h	/^    int socket_ = -1;$/;"	m	class:spdlog::details::tcp_client	typeref:typename:int
socket_	include/spdlog/details/udp_client-windows.h	/^    SOCKET socket_ = INVALID_SOCKET;$/;"	m	class:spdlog::details::udp_client	typeref:typename:SOCKET
socket_	include/spdlog/details/udp_client.h	/^    int socket_ = -1;$/;"	m	class:spdlog::details::udp_client	typeref:typename:int
source	include/spdlog/details/log_msg.h	/^    source_loc source;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:source_loc
source_	include/spdlog/sinks/win_eventlog_sink.h	/^    std::string source_;$/;"	m	class:spdlog::sinks::win_eventlog::win_eventlog_sink	typeref:typename:std::string
source_filename_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit source_filename_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::source_filename_formatter
source_filename_formatter	include/spdlog/pattern_formatter-inl.h	/^class source_filename_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
source_funcname_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit source_funcname_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::source_funcname_formatter
source_funcname_formatter	include/spdlog/pattern_formatter-inl.h	/^class source_funcname_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
source_linenum_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit source_linenum_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::source_linenum_formatter
source_linenum_formatter	include/spdlog/pattern_formatter-inl.h	/^class source_linenum_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
source_loc	include/spdlog/common.h	/^    SPDLOG_CONSTEXPR source_loc(const char *filename_in, int line_in, const char *funcname_in)$/;"	f	struct:spdlog::source_loc	typeref:typename:SPDLOG_CONSTEXPR
source_loc	include/spdlog/common.h	/^struct source_loc {$/;"	s	namespace:spdlog
source_location_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit source_location_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::source_location_formatter
source_location_formatter	include/spdlog/pattern_formatter-inl.h	/^class source_location_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
space	include/spdlog/fmt/bundled/chrono.h	/^  space,$/;"	e	enum:detail::pad_type
spaces_	include/spdlog/pattern_formatter-inl.h	/^    string_view_t spaces_{"                                                                ", 64/;"	m	class:spdlog::details::scoped_padder	typeref:typename:string_view_t
spdlog	include/spdlog/async.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/async_logger.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/cfg/argv.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/cfg/env.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/cfg/helpers-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/cfg/helpers.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/common-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/common.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/backtracer-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/backtracer.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/circular_q.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/console_globals.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/file_helper-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/file_helper.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/fmt_helper.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg_buffer-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg_buffer.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/mpmc_blocking_q.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/null_mutex.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/os-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/os.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/periodic_worker-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/periodic_worker.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/registry-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/registry.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/synchronous_factory.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/tcp_client-windows.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/tcp_client.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/thread_pool-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/thread_pool.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/udp_client-windows.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/udp_client.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/fmt/bin_to_hex.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/formatter.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/fwd.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/logger-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/logger.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/mdc.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/pattern_formatter-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/pattern_formatter.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/android_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ansicolor_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/base_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/basic_file_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/basic_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/callback_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/daily_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/dist_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/dup_filter_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/hourly_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/kafka_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/mongo_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/msvc_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/null_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ostream_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/qt_sinks.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ringbuffer_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/rotating_file_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/rotating_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_color_sinks-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_color_sinks.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_sinks-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_sinks.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/syslog_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/systemd_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/tcp_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/udp_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/win_eventlog_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/wincolor_sink-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/wincolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/spdlog-inl.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/spdlog.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/stopwatch.h	/^namespace spdlog {$/;"	n
spdlog_ex	include/spdlog/common-inl.h	/^SPDLOG_INLINE spdlog_ex::spdlog_ex(const std::string &msg, int last_errno) {$/;"	f	class:spdlog::spdlog_ex	typeref:typename:SPDLOG_INLINE
spdlog_ex	include/spdlog/common-inl.h	/^SPDLOG_INLINE spdlog_ex::spdlog_ex(std::string msg)$/;"	f	class:spdlog::spdlog_ex	typeref:typename:SPDLOG_INLINE
spdlog_ex	include/spdlog/common.h	/^class SPDLOG_API spdlog_ex : public std::exception {$/;"	c	namespace:spdlog
spec_field	include/spdlog/fmt/bundled/compile.h	/^template <typename Char, typename T, int N> struct spec_field {$/;"	s	namespace:detail
specs	include/spdlog/fmt/bundled/core.h	/^    dynamic_format_specs<Char>& specs;$/;"	m	struct:detail::parse_format_specs::__anon0accc0920f08	typeref:typename:dynamic_format_specs<Char> &
specs	include/spdlog/fmt/bundled/format.h	/^  const format_specs<Char>& specs;$/;"	m	struct:detail::arg_formatter	typeref:typename:const format_specs<Char> &
specs	include/spdlog/fmt/bundled/format.h	/^  const format_specs<Char>& specs;$/;"	m	struct:detail::loc_writer	typeref:typename:const format_specs<Char> &
specs_	include/spdlog/fmt/bundled/chrono.h	/^  format_specs<Char> specs_;$/;"	m	struct:formatter	typeref:typename:format_specs<Char>
specs_	include/spdlog/fmt/bundled/core.h	/^  detail::dynamic_format_specs<Char> specs_;$/;"	m	struct:formatter	typeref:typename:detail::dynamic_format_specs<Char>
specs_	include/spdlog/fmt/bundled/format.h	/^  detail::dynamic_format_specs<> specs_;$/;"	m	struct:formatter	typeref:typename:detail::dynamic_format_specs<>
specs_	include/spdlog/fmt/bundled/printf.h	/^  format_specs<Char>& specs_;$/;"	m	class:detail::printf_width_handler	typeref:typename:format_specs<Char> &
specs_	include/spdlog/fmt/bundled/std.h	/^  format_specs<Char> specs_;$/;"	m	struct:formatter	typeref:typename:format_specs<Char>
split_by_extension	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE std::tuple<filename_t, filename_t> file_helper::split_by_extension($/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE std::tuple<filename_t,filename_t>
split_year_lower	include/spdlog/fmt/bundled/chrono.h	/^  auto split_year_lower(long long year) const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
spring_green	include/spdlog/fmt/bundled/color.h	/^  spring_green = 0x00FF7F,             \/\/ rgb(0,255,127)$/;"	e	enum:color
sprintf	include/spdlog/fmt/bundled/printf.h	/^inline auto sprintf(const S& fmt, const T&... args) -> std::basic_string<Char> {$/;"	f	typeref:typename:std::basic_string<Char>
square	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void square() {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
src/main.cpp.i	build/Makefile	/^src\/main.cpp.i:$/;"	t
src/main.cpp.o	build/Makefile	/^src\/main.cpp.o:$/;"	t
src/main.cpp.s	build/Makefile	/^src\/main.cpp.s:$/;"	t
src/main.i	build/Makefile	/^src\/main.i: src\/main.cpp.i$/;"	t
src/main.o	build/Makefile	/^src\/main.o: src\/main.cpp.o$/;"	t
src/main.s	build/Makefile	/^src\/main.s: src\/main.cpp.s$/;"	t
src/mpris_media_player.cpp.i	build/Makefile	/^src\/mpris_media_player.cpp.i:$/;"	t
src/mpris_media_player.cpp.o	build/Makefile	/^src\/mpris_media_player.cpp.o:$/;"	t
src/mpris_media_player.cpp.s	build/Makefile	/^src\/mpris_media_player.cpp.s:$/;"	t
src/mpris_media_player.i	build/Makefile	/^src\/mpris_media_player.i: src\/mpris_media_player.cpp.i$/;"	t
src/mpris_media_player.o	build/Makefile	/^src\/mpris_media_player.o: src\/mpris_media_player.cpp.o$/;"	t
src/mpris_media_player.s	build/Makefile	/^src\/mpris_media_player.s: src\/mpris_media_player.cpp.s$/;"	t
standard	include/spdlog/fmt/bundled/chrono.h	/^  standard,$/;"	e	enum:detail::numeric_system
start	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
start_tp_	include/spdlog/stopwatch.h	/^    std::chrono::time_point<clock> start_tp_;$/;"	m	class:spdlog::stopwatch	typeref:typename:std::chrono::time_point<clock>
starts_with	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR_CHAR_TRAITS auto starts_with($/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR_CHAR_TRAITS auto
starts_with	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR_CHAR_TRAITS auto starts_with(Char c) const noexcept -> bool {$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR_CHAR_TRAITS auto
starts_with	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR_CHAR_TRAITS auto starts_with(const Char* s) const -> bool {$/;"	f	class:basic_string_view	typeref:typename:bool
state	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	g	namespace:detail
statically_named_arg	include/spdlog/fmt/bundled/format.h	/^  statically_named_arg(const T& v) : value(v) {}$/;"	f	struct:detail::statically_named_arg
statically_named_arg	include/spdlog/fmt/bundled/format.h	/^struct statically_named_arg : view {$/;"	s	namespace:detail
std	include/spdlog/fmt/bin_to_hex.h	/^    std$/;"	n
std	include/spdlog/stopwatch.h	/^    std$/;"	n
std_string_view	include/spdlog/fmt/bundled/core.h	/^template <typename Char> using std_string_view = std::basic_string_view<Char>;$/;"	t	namespace:detail	typeref:typename:std::basic_string_view<Char>
std_string_view	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct std_string_view {};$/;"	s	namespace:detail
std_string_view	include/spdlog/fmt/bundled/core.h	/^using std_string_view = std::experimental::basic_string_view<Char>;$/;"	t	namespace:detail	typeref:typename:std::experimental::basic_string_view<Char>
stderr_color_mt	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_color_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stderr_color_sink_mt	include/spdlog/sinks/stdout_color_sinks.h	/^using stderr_color_sink_mt = wincolor_stderr_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink_mt
stderr_color_sink_st	include/spdlog/sinks/stdout_color_sinks.h	/^using stderr_color_sink_st = wincolor_stderr_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink_st
stderr_color_st	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_color_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stderr_logger_mt	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_logger_mt(const std::string &logger_name) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stderr_logger_st	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stderr_logger_st(const std::string &logger_name) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stderr_sink	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE stderr_sink<ConsoleMutex>::stderr_sink()$/;"	f	class:spdlog::sinks::stderr_sink	typeref:typename:SPDLOG_INLINE
stderr_sink	include/spdlog/sinks/stdout_sinks.h	/^class stderr_sink : public stdout_sink_base<ConsoleMutex> {$/;"	c	namespace:spdlog::sinks
stderr_sink_mt	include/spdlog/sinks/stdout_sinks.h	/^using stderr_sink_mt = stderr_sink<details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stderr_sink<details::console_mutex>
stderr_sink_st	include/spdlog/sinks/stdout_sinks.h	/^using stderr_sink_st = stderr_sink<details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stderr_sink<details::console_nullmutex>
stdout_color_mt	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_color_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stdout_color_sink_mt	include/spdlog/sinks/stdout_color_sinks.h	/^using stdout_color_sink_mt = wincolor_stdout_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink_mt
stdout_color_sink_st	include/spdlog/sinks/stdout_color_sinks.h	/^using stdout_color_sink_st = wincolor_stdout_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink_st
stdout_color_st	include/spdlog/sinks/stdout_color_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_color_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stdout_logger_mt	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_logger_mt(const std::string &logger_name) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stdout_logger_st	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE std::shared_ptr<logger> stdout_logger_st(const std::string &logger_name) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE std::shared_ptr<logger>
stdout_sink	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE stdout_sink<ConsoleMutex>::stdout_sink()$/;"	f	class:spdlog::sinks::stdout_sink	typeref:typename:SPDLOG_INLINE
stdout_sink	include/spdlog/sinks/stdout_sinks.h	/^class stdout_sink : public stdout_sink_base<ConsoleMutex> {$/;"	c	namespace:spdlog::sinks
stdout_sink_base	include/spdlog/sinks/stdout_sinks-inl.h	/^SPDLOG_INLINE stdout_sink_base<ConsoleMutex>::stdout_sink_base(FILE *file)$/;"	f	class:spdlog::sinks::stdout_sink_base	typeref:typename:SPDLOG_INLINE
stdout_sink_base	include/spdlog/sinks/stdout_sinks.h	/^class stdout_sink_base : public sink {$/;"	c	namespace:spdlog::sinks
stdout_sink_mt	include/spdlog/sinks/stdout_sinks.h	/^using stdout_sink_mt = stdout_sink<details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<details::console_mutex>
stdout_sink_st	include/spdlog/sinks/stdout_sinks.h	/^using stdout_sink_st = stdout_sink<details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<details::console_nullmutex>
steel_blue	include/spdlog/fmt/bundled/color.h	/^  steel_blue = 0x4682B4,               \/\/ rgb(70,130,180)$/;"	e	enum:color
stop	src/mpris_media_player.cpp	/^void MprisMediaPlayer::stop() { execute_base_method_func(Stop); }$/;"	f	class:MprisMediaPlayer	typeref:typename:void
stopwatch	include/spdlog/stopwatch.h	/^    stopwatch()$/;"	f	class:spdlog::stopwatch
stopwatch	include/spdlog/stopwatch.h	/^class stopwatch {$/;"	c	namespace:spdlog
store	include/spdlog/details/null_mutex.h	/^    void store(int new_value, std::memory_order = std::memory_order_relaxed) { value = new_value/;"	f	struct:spdlog::details::null_atomic_int	typeref:typename:void
store_	include/spdlog/fmt/bundled/format.h	/^  T store_[SIZE];$/;"	m	class:basic_memory_buffer	typeref:typename:T[]
stored_type	include/spdlog/fmt/bundled/args.h	/^  using stored_type = conditional_t<$/;"	t	class:dynamic_format_arg_store
str	include/spdlog/fmt/bundled/core.h	/^  basic_string_view<Char> str;$/;"	m	struct:runtime_format_string	typeref:typename:basic_string_view<Char>
str	include/spdlog/fmt/bundled/format.h	/^  auto str() const -> std::string { return std::string(&buffer_[0], size()); }$/;"	f	class:detail::to_utf8	typeref:typename:std::string
str	include/spdlog/fmt/bundled/format.h	/^  auto str() const -> std::string { return std::string(str_, size()); }$/;"	f	class:format_int	typeref:typename:std::string
str	include/spdlog/fmt/bundled/format.h	/^  auto str() const -> std::wstring { return {&buffer_[0], size()}; }$/;"	f	class:detail::utf8_to_utf16	typeref:typename:std::wstring
str	include/spdlog/fmt/bundled/format.h	/^  const Char* str;$/;"	m	struct:detail::udl_arg	typeref:typename:const Char *
str_	include/spdlog/fmt/bundled/core.h	/^  basic_string_view<Char> str_;$/;"	m	class:basic_format_string	typeref:typename:basic_string_view<Char>
str_	include/spdlog/fmt/bundled/format.h	/^  char* str_;$/;"	m	class:format_int	typeref:typename:char *
str_	include/spdlog/pattern_formatter-inl.h	/^    std::string str_;$/;"	m	class:spdlog::details::aggregate_formatter	typeref:typename:std::string
streamed	include/spdlog/fmt/bundled/ostream.h	/^constexpr auto streamed(const T& value) -> detail::streamed_view<T> {$/;"	f	typeref:typename:detail::streamed_view<T>
streamed_view	include/spdlog/fmt/bundled/ostream.h	/^template <typename T> struct streamed_view {$/;"	s	namespace:detail
streamsize	include/spdlog/fmt/bundled/ostream.h	/^  using streamsize = decltype(std::declval<Streambuf>().sputn(nullptr, 0));$/;"	t	class:detail::formatbuf
strikethrough	include/spdlog/fmt/bundled/color.h	/^  strikethrough = 1 << 7,$/;"	e	enum:emphasis
string	include/spdlog/fmt/bundled/core.h	/^    string_value<char_type> string;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:string_value<char_type>
string	include/spdlog/fmt/bundled/core.h	/^  string,          \/\/ 's'$/;"	e	enum:presentation_type
string	include/spdlog/fmt/bundled/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
string_literal	include/spdlog/fmt/bundled/format.h	/^template <typename CharT, CharT... C> struct string_literal {$/;"	s	namespace:detail
string_set	include/spdlog/fmt/bundled/core.h	/^  string_set = set(type::string_type),$/;"	e	enum:detail::__anon0accc0920103
string_type	include/spdlog/fmt/bundled/core.h	/^  string_type,$/;"	e	enum:detail::type
string_value	include/spdlog/fmt/bundled/core.h	/^template <typename Char> struct string_value {$/;"	s	namespace:detail
string_view	include/spdlog/fmt/bundled/core.h	/^using string_view = basic_string_view<char>;$/;"	t	typeref:typename:basic_string_view<char>
string_view_t	include/spdlog/common.h	/^using string_view_t = fmt::basic_string_view<char>;$/;"	t	namespace:spdlog	typeref:typename:fmt::basic_string_view<char>
string_view_t	include/spdlog/common.h	/^using string_view_t = std::string_view;$/;"	t	namespace:spdlog	typeref:typename:std::string_view
strip_named_arg	include/spdlog/fmt/bundled/core.h	/^template <typename T, bool = is_named_arg<T>::value> struct strip_named_arg {$/;"	s	namespace:detail
strip_named_arg	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct strip_named_arg<T, true> {$/;"	s	namespace:detail
style	include/spdlog/fmt/bundled/color.h	/^  text_style style;$/;"	m	struct:detail::styled_arg	typeref:typename:text_style
styled	include/spdlog/fmt/bundled/color.h	/^FMT_CONSTEXPR auto styled(const T& value, text_style ts)$/;"	f	typeref:typename:detail::styled_arg<remove_cvref_t<T>>
styled_arg	include/spdlog/fmt/bundled/color.h	/^  styled_arg(const T& v, text_style s) : value(v), style(s) {}$/;"	f	struct:detail::styled_arg
styled_arg	include/spdlog/fmt/bundled/color.h	/^template <typename T> struct styled_arg : detail::view {$/;"	s	namespace:detail
subsecond_precision	include/spdlog/fmt/bundled/chrono.h	/^  using subsecond_precision = std::chrono::duration<$/;"	t	function:detail::write_fractional_seconds
subsecs_	include/spdlog/fmt/bundled/chrono.h	/^  const Duration* subsecs_;$/;"	m	class:detail::tm_writer	typeref:typename:const Duration *
subtract_aligned	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void subtract_aligned(const bigint& other) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
subtract_bigits	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 void subtract_bigits(int index, bigit other, bigit& borrow) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
sv	include/spdlog/fmt/bundled/core.h	/^    using sv = basic_string_view<typename Context::char_type>;$/;"	t	function:visit_format_arg	typeref:typename:basic_string_view<typename Context::char_type>
swap	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void logger::swap(spdlog::logger &other) SPDLOG_NOEXCEPT {$/;"	f	class:spdlog::logger	typeref:typename:SPDLOG_INLINE void
swap	include/spdlog/logger-inl.h	/^SPDLOG_INLINE void swap(logger &a, logger &b) { a.swap(b); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
sync	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::sync() {$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE void
synchronous_factory	include/spdlog/details/synchronous_factory.h	/^struct synchronous_factory {$/;"	s	namespace:spdlog
syslog_level	include/spdlog/sinks/systemd_sink.h	/^    int syslog_level(level::level_enum l) {$/;"	f	class:spdlog::sinks::systemd_sink	typeref:typename:int
syslog_levels_	include/spdlog/sinks/syslog_sink.h	/^    levels_array syslog_levels_;$/;"	m	class:spdlog::sinks::syslog_sink	typeref:typename:levels_array
syslog_levels_	include/spdlog/sinks/systemd_sink.h	/^    levels_array syslog_levels_;$/;"	m	class:spdlog::sinks::systemd_sink	typeref:typename:levels_array
syslog_logger_mt	include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
syslog_logger_st	include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
syslog_prio_from_level	include/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const {$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:int
syslog_sink	include/spdlog/sinks/syslog_sink.h	/^    syslog_sink(std::string ident, int syslog_option, int syslog_facility, bool enable_formattin/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	include/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
syslog_sink_mt	include/spdlog/sinks/syslog_sink.h	/^using syslog_sink_mt = syslog_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:syslog_sink<std::mutex>
syslog_sink_st	include/spdlog/sinks/syslog_sink.h	/^using syslog_sink_st = syslog_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:syslog_sink<details::null_mutex>
system_category	include/spdlog/fmt/bundled/os.h	/^inline auto system_category() noexcept -> const std::error_category& {$/;"	f	typeref:typename:auto
system_error	include/spdlog/fmt/bundled/format.h	/^auto system_error(int error_code, format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::system_error
systemd_logger_mt	include/spdlog/sinks/systemd_sink.h	/^inline std::shared_ptr<logger> systemd_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
systemd_logger_st	include/spdlog/sinks/systemd_sink.h	/^inline std::shared_ptr<logger> systemd_logger_st(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
systemd_sink	include/spdlog/sinks/systemd_sink.h	/^    systemd_sink(std::string ident = "", bool enable_formatting = false)$/;"	f	class:spdlog::sinks::systemd_sink
systemd_sink	include/spdlog/sinks/systemd_sink.h	/^class systemd_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
systemd_sink_mt	include/spdlog/sinks/systemd_sink.h	/^using systemd_sink_mt = systemd_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:systemd_sink<std::mutex>
systemd_sink_st	include/spdlog/sinks/systemd_sink.h	/^using systemd_sink_st = systemd_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:systemd_sink<details::null_mutex>
t_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit t_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::t_formatter
t_formatter	include/spdlog/pattern_formatter-inl.h	/^class t_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
tag_	include/spdlog/sinks/android_sink.h	/^    std::string tag_;$/;"	m	class:spdlog::sinks::android_sink	typeref:typename:std::string
tail_	include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type tail_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>::size_type
tan	include/spdlog/fmt/bundled/color.h	/^  tan = 0xD2B48C,                      \/\/ rgb(210,180,140)$/;"	e	enum:color
target_file_	include/spdlog/sinks/ansicolor_sink.h	/^    FILE *target_file_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:FILE *
target_type	include/spdlog/fmt/bundled/printf.h	/^    using target_type = conditional_t<std::is_same<T, void>::value, U, T>;$/;"	t	function:detail::arg_converter::operator ()	typeref:typename:conditional_t<std::is_same<T,void>::value,U,T>
tconf_	include/spdlog/sinks/kafka_sink.h	/^    std::unique_ptr<RdKafka::Conf> tconf_ = nullptr;$/;"	m	class:spdlog::sinks::kafka_sink	typeref:typename:std::unique_ptr<RdKafka::Conf>
tcp_client	include/spdlog/details/tcp_client-windows.h	/^    tcp_client() { init_winsock_(); }$/;"	f	class:spdlog::details::tcp_client
tcp_client	include/spdlog/details/tcp_client-windows.h	/^class tcp_client {$/;"	c	namespace:spdlog::details
tcp_client	include/spdlog/details/tcp_client.h	/^class tcp_client {$/;"	c	namespace:spdlog::details
tcp_sink	include/spdlog/sinks/tcp_sink.h	/^    explicit tcp_sink(tcp_sink_config sink_config)$/;"	f	class:spdlog::sinks::tcp_sink
tcp_sink	include/spdlog/sinks/tcp_sink.h	/^class tcp_sink : public spdlog::sinks::base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
tcp_sink_config	include/spdlog/sinks/tcp_sink.h	/^    tcp_sink_config(std::string host, int port)$/;"	f	struct:spdlog::sinks::tcp_sink_config
tcp_sink_config	include/spdlog/sinks/tcp_sink.h	/^struct tcp_sink_config {$/;"	s	namespace:spdlog::sinks
tcp_sink_mt	include/spdlog/sinks/tcp_sink.h	/^using tcp_sink_mt = tcp_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:tcp_sink<std::mutex>
tcp_sink_st	include/spdlog/sinks/tcp_sink.h	/^using tcp_sink_st = tcp_sink<spdlog::details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:tcp_sink<spdlog::details::null_mutex>
teal	include/spdlog/fmt/bundled/color.h	/^  teal = 0x008080,                     \/\/ rgb(0,128,128)$/;"	e	enum:color
term_color	include/spdlog/fmt/bundled/color.h	/^    uint8_t term_color;$/;"	m	union:detail::color_type::color_union	typeref:typename:uint8_t
terminal_color	include/spdlog/fmt/bundled/color.h	/^enum class terminal_color : uint8_t {$/;"	g	typeref:typename:uint8_t
terminate	include/spdlog/details/thread_pool.h	/^enum class async_msg_type { log, flush, terminate };$/;"	e	enum:spdlog::details::async_msg_type
test_menu	src/mpris_media_player.cpp	/^void MprisMediaPlayer::test_menu() {$/;"	f	class:MprisMediaPlayer	typeref:typename:void
text	include/spdlog/fmt/bundled/compile.h	/^template <typename Char> struct text {$/;"	s	namespace:detail
text_style	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR text_style(bool is_foreground,$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR
text_style	include/spdlog/fmt/bundled/color.h	/^  FMT_CONSTEXPR text_style(emphasis em = emphasis()) noexcept$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR
text_style	include/spdlog/fmt/bundled/color.h	/^class text_style {$/;"	c
thistle	include/spdlog/fmt/bundled/color.h	/^  thistle = 0xD8BFD8,                  \/\/ rgb(216,191,216)$/;"	e	enum:color
thousands_sep	include/spdlog/fmt/bundled/format.h	/^  Char thousands_sep;$/;"	m	struct:detail::thousands_sep_result	typeref:typename:Char
thousands_sep	include/spdlog/fmt/bundled/format.h	/^inline auto thousands_sep(locale_ref loc) -> thousands_sep_result<Char> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<Char>
thousands_sep	include/spdlog/fmt/bundled/format.h	/^inline auto thousands_sep(locale_ref loc) -> thousands_sep_result<wchar_t> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<wchar_t>
thousands_sep_	include/spdlog/fmt/bundled/format.h	/^  std::basic_string<Char> thousands_sep_;$/;"	m	class:detail::digit_grouping	typeref:typename:std::basic_string<Char>
thousands_sep_impl	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto thousands_sep_impl(locale_ref loc) -> thousands_sep_result<Char> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<Char>
thousands_sep_impl	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto thousands_sep_impl(locale_ref) -> thousands_sep_result<Char> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<Char>
thousands_sep_result	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct thousands_sep_result {$/;"	s	namespace:detail
thread_id	include/spdlog/details/log_msg.h	/^    size_t thread_id{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
thread_id	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE size_t thread_id() SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE size_t
thread_pool	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::details::thread_pool> thread_pool() {$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::details::thread_pool>
thread_pool	include/spdlog/details/thread_pool-inl.h	/^SPDLOG_INLINE thread_pool::thread_pool(size_t q_max_items, size_t threads_n)$/;"	f	class:spdlog::details::thread_pool	typeref:typename:SPDLOG_INLINE
thread_pool	include/spdlog/details/thread_pool-inl.h	/^SPDLOG_INLINE thread_pool::thread_pool(size_t q_max_items,$/;"	f	class:spdlog::details::thread_pool	typeref:typename:SPDLOG_INLINE
thread_pool	include/spdlog/details/thread_pool.h	/^class SPDLOG_API thread_pool {$/;"	c	namespace:spdlog::details
thread_pool_	include/spdlog/async_logger.h	/^    std::weak_ptr<details::thread_pool> thread_pool_;$/;"	m	class:spdlog::async_logger	typeref:typename:std::weak_ptr<details::thread_pool>
threads_	include/spdlog/details/thread_pool.h	/^    std::vector<std::thread> threads_;$/;"	m	class:spdlog::details::thread_pool	typeref:typename:std::vector<std::thread>
throw_format_error	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void throw_format_error(const char* message) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
throw_if_exists_	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE void registry::throw_if_exists_(const std::string &logger_name) {$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE void
throw_spdlog_ex	include/spdlog/common-inl.h	/^SPDLOG_INLINE void throw_spdlog_ex(const std::string &msg, int last_errno) {$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
throw_spdlog_ex	include/spdlog/common-inl.h	/^SPDLOG_INLINE void throw_spdlog_ex(std::string msg) { SPDLOG_THROW(spdlog_ex(std::move(msg))); }$/;"	f	namespace:spdlog	typeref:typename:SPDLOG_INLINE void
throw_winsock_error_	include/spdlog/details/tcp_client-windows.h	/^    static void throw_winsock_error_(const std::string &msg, int last_error) {$/;"	f	class:spdlog::details::tcp_client	typeref:typename:void
throw_winsock_error_	include/spdlog/details/udp_client-windows.h	/^    static void throw_winsock_error_(const std::string &msg, int last_error) {$/;"	f	class:spdlog::details::udp_client	typeref:typename:void
time	include/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:log_clock::time_point
time	include/spdlog/fmt/bundled/chrono.h	/^  auto time() const -> std::tm {$/;"	f	struct:detail::chrono_formatter	typeref:typename:std::tm
time_	include/spdlog/fmt/bundled/chrono.h	/^    std::time_t time_;$/;"	m	struct:gmtime::dispatcher	typeref:typename:std::time_t
time_	include/spdlog/fmt/bundled/chrono.h	/^    std::time_t time_;$/;"	m	struct:localtime::dispatcher	typeref:typename:std::time_t
time_fraction	include/spdlog/details/fmt_helper.h	/^inline ToDuration time_fraction(log_clock::time_point tp) {$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:ToDuration
title	include/mpris_media_player.h	/^  std::string title;$/;"	m	struct:DBusMetadata	typeref:typename:std::string
tm_	include/spdlog/fmt/bundled/chrono.h	/^    std::tm tm_;$/;"	m	struct:gmtime::dispatcher	typeref:typename:std::tm
tm_	include/spdlog/fmt/bundled/chrono.h	/^    std::tm tm_;$/;"	m	struct:localtime::dispatcher	typeref:typename:std::tm
tm_	include/spdlog/fmt/bundled/chrono.h	/^  const std::tm& tm_;$/;"	m	class:detail::tm_writer	typeref:typename:const std::tm &
tm_format_checker	include/spdlog/fmt/bundled/chrono.h	/^struct tm_format_checker : null_chrono_spec_handler<tm_format_checker> {$/;"	s	namespace:detail
tm_hour	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_hour() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_hour12	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_hour12() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_iso_week_of_year	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_iso_week_of_year() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_iso_week_year	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_iso_week_year() const noexcept -> long long {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_mday	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_mday() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_min	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_min() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_mon	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_mon() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_mon_full_name	include/spdlog/fmt/bundled/chrono.h	/^inline auto tm_mon_full_name(int mon) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_mon_short_name	include/spdlog/fmt/bundled/chrono.h	/^inline auto tm_mon_short_name(int mon) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_sec	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_sec() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_wday	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_wday() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_wday_full_name	include/spdlog/fmt/bundled/chrono.h	/^inline auto tm_wday_full_name(int wday) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_wday_short_name	include/spdlog/fmt/bundled/chrono.h	/^inline auto tm_wday_short_name(int wday) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_writer	include/spdlog/fmt/bundled/chrono.h	/^  tm_writer(const std::locale& loc, OutputIt out, const std::tm& tm,$/;"	f	class:detail::tm_writer
tm_writer	include/spdlog/fmt/bundled/chrono.h	/^class tm_writer {$/;"	c	namespace:detail
tm_writer_type	include/spdlog/fmt/bundled/chrono.h	/^  using tm_writer_type = tm_writer<OutputIt, char_type>;$/;"	t	struct:detail::chrono_formatter	typeref:typename:tm_writer<OutputIt,char_type>
tm_yday	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_yday() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_year	include/spdlog/fmt/bundled/chrono.h	/^  auto tm_year() const noexcept -> long long { return 1900ll + tm_.tm_year; }$/;"	f	class:detail::tm_writer	typeref:typename:auto
to12h	include/spdlog/pattern_formatter-inl.h	/^static int to12h(const tm &t) { return t.tm_hour > 12 ? t.tm_hour - 12 : t.tm_hour; }$/;"	f	namespace:spdlog::details	typeref:typename:int
to_ascii	include/spdlog/fmt/bundled/core.h	/^constexpr auto to_ascii(Char c) -> char {$/;"	f	namespace:detail	typeref:typename:char
to_decimal	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> auto to_decimal(T x) noexcept -> decimal_fp<T> {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
to_esc	include/spdlog/fmt/bundled/color.h	/^  static FMT_CONSTEXPR void to_esc(uint8_t c, Char* out,$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR void
to_hex	include/spdlog/fmt/bin_to_hex.h	/^inline details::dump_info<It> to_hex(const It range_begin,$/;"	f	namespace:spdlog	typeref:typename:details::dump_info<It>
to_hex	include/spdlog/fmt/bin_to_hex.h	/^inline details::dump_info<typename Container::const_iterator> to_hex(const Container &container,$/;"	f	namespace:spdlog	typeref:typename:details::dump_info<typename Container::const_iterator>
to_hex	include/spdlog/fmt/bin_to_hex.h	/^inline details::dump_info<typename std::span<Value, Extent>::iterator> to_hex($/;"	f	namespace:spdlog	typeref:typename:details::dump_info<typename std::span<Value,Extent>::iterator>
to_lower_	include/spdlog/cfg/helpers-inl.h	/^inline std::string &to_lower_(std::string &str) {$/;"	f	namespace:spdlog::cfg::helpers	typeref:typename:std::string &
to_nonnegative_int	include/spdlog/fmt/bundled/chrono.h	/^inline auto to_nonnegative_int(T value, Int upper) -> Int {$/;"	f	namespace:detail	typeref:typename:Int
to_pointer	include/spdlog/fmt/bundled/format.h	/^constexpr auto to_pointer(OutputIt, size_t) -> T* {$/;"	f	namespace:detail	typeref:typename:T *
to_pointer	include/spdlog/fmt/bundled/format.h	/^template <typename T> auto to_pointer(buffer_appender<T> it, size_t n) -> T* {$/;"	f	namespace:detail	typeref:typename:T *
to_short_c_str	include/spdlog/common-inl.h	/^SPDLOG_INLINE const char *to_short_c_str(spdlog::level::level_enum l) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::level	typeref:typename:SPDLOG_INLINE const char *
to_string	include/spdlog/fmt/bundled/format.h	/^FMT_NODISCARD auto to_string(const basic_memory_buffer<Char, SIZE>& buf)$/;"	f	typeref:typename:std::basic_string<Char>
to_string	include/spdlog/fmt/bundled/format.h	/^FMT_NODISCARD inline auto to_string(T value) -> std::string {$/;"	f	typeref:typename:std::string
to_string	include/spdlog/fmt/bundled/format.h	/^inline auto to_string(const T& value) -> std::string {$/;"	f	typeref:typename:std::string
to_string_	include/spdlog/sinks/ansicolor_sink-inl.h	/^SPDLOG_INLINE std::string ansicolor_sink<ConsoleMutex>::to_string_(const string_view_t &sv) {$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:SPDLOG_INLINE std::string
to_string_view	include/spdlog/common-inl.h	/^SPDLOG_INLINE const string_view_t &to_string_view(spdlog::level::level_enum l) SPDLOG_NOEXCEPT {$/;"	f	namespace:spdlog::level	typeref:typename:SPDLOG_INLINE const string_view_t &
to_string_view	include/spdlog/common.h	/^SPDLOG_CONSTEXPR_FUNC spdlog::string_view_t to_string_view(const memory_buf_t &buf)$/;"	f	namespace:spdlog::details	typeref:typename:SPDLOG_CONSTEXPR_FUNC spdlog::string_view_t
to_string_view	include/spdlog/common.h	/^SPDLOG_CONSTEXPR_FUNC spdlog::string_view_t to_string_view(spdlog::string_view_t str)$/;"	f	namespace:spdlog::details	typeref:typename:SPDLOG_CONSTEXPR_FUNC spdlog::string_view_t
to_string_view	include/spdlog/common.h	/^SPDLOG_CONSTEXPR_FUNC spdlog::wstring_view_t to_string_view(const wmemory_buf_t &buf)$/;"	f	namespace:spdlog::details	typeref:typename:SPDLOG_CONSTEXPR_FUNC spdlog::wstring_view_t
to_string_view	include/spdlog/common.h	/^SPDLOG_CONSTEXPR_FUNC spdlog::wstring_view_t to_string_view(spdlog::wstring_view_t str)$/;"	f	namespace:spdlog::details	typeref:typename:SPDLOG_CONSTEXPR_FUNC spdlog::wstring_view_t
to_string_view	include/spdlog/common.h	/^SPDLOG_CONSTEXPR_FUNC std::basic_string_view<T> to_string_view($/;"	f	namespace:spdlog::details	typeref:typename:SPDLOG_CONSTEXPR_FUNC std::basic_string_view<T>
to_string_view	include/spdlog/common.h	/^inline fmt::basic_string_view<T> to_string_view(fmt::basic_format_string<T, Args...> fmt) {$/;"	f	namespace:spdlog::details	typeref:typename:fmt::basic_string_view<T>
to_string_view	include/spdlog/fmt/bundled/core.h	/^FMT_INLINE auto to_string_view(const Char* s) -> basic_string_view<Char> {$/;"	f	namespace:detail	typeref:typename:basic_string_view<Char>
to_string_view	include/spdlog/fmt/bundled/core.h	/^constexpr auto to_string_view(basic_string_view<Char> s)$/;"	f	namespace:detail	typeref:typename:basic_string_view<Char>
to_string_view	include/spdlog/fmt/bundled/core.h	/^constexpr auto to_string_view(const S& s)$/;"	f	namespace:detail	typeref:typename:basic_string_view<typename S::char_type>
to_string_view	include/spdlog/fmt/bundled/core.h	/^inline auto to_string_view(const std::basic_string<Char, Traits, Alloc>& s)$/;"	f	namespace:detail	typeref:typename:basic_string_view<Char>
to_string_view	include/spdlog/fmt/bundled/core.h	/^inline auto to_string_view(std_string_view<Char> s) -> basic_string_view<Char> {$/;"	f	namespace:detail	typeref:typename:basic_string_view<Char>
to_time_t	include/spdlog/fmt/bundled/chrono.h	/^auto to_time_t($/;"	f	namespace:detail	typeref:typename:std::time_t
to_unsigned	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR auto to_unsigned(Int value) ->$/;"	f	namespace:detail	typeref:typename:std::make_unsigned<Int>::type
to_utf8	include/spdlog/fmt/bundled/format.h	/^  explicit to_utf8(basic_string_view<WChar> s,$/;"	f	class:detail::to_utf8
to_utf8	include/spdlog/fmt/bundled/format.h	/^  to_utf8() {}$/;"	f	class:detail::to_utf8
to_utf8	include/spdlog/fmt/bundled/format.h	/^template <typename WChar, typename Buffer = memory_buffer> class to_utf8 {$/;"	c	namespace:detail
to_utf8_error_policy	include/spdlog/fmt/bundled/format.h	/^enum class to_utf8_error_policy { abort, replace };$/;"	g	namespace:detail
to_wstring	include/spdlog/fmt/bundled/xchar.h	/^template <typename T> inline auto to_wstring(const T& value) -> std::wstring {$/;"	f	typeref:typename:std::wstring
token_handle_	include/spdlog/sinks/win_eventlog_sink.h	/^            HANDLE token_handle_ = INVALID_HANDLE_VALUE;$/;"	m	struct:spdlog::sinks::win_eventlog::internal::sid_t::get_current_user_sid::process_token_t	typeref:typename:HANDLE
tomato	include/spdlog/fmt/bundled/color.h	/^  tomato = 0xFF6347,                   \/\/ rgb(255,99,71)$/;"	e	enum:color
topic_	include/spdlog/sinks/kafka_sink.h	/^    std::unique_ptr<RdKafka::Topic> topic_ = nullptr;$/;"	m	class:spdlog::sinks::kafka_sink	typeref:typename:std::unique_ptr<RdKafka::Topic>
tp_	include/spdlog/details/registry.h	/^    std::shared_ptr<thread_pool> tp_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::shared_ptr<thread_pool>
tp_mutex	include/spdlog/details/registry-inl.h	/^SPDLOG_INLINE std::recursive_mutex &registry::tp_mutex() { return tp_mutex_; }$/;"	f	class:spdlog::details::registry	typeref:typename:SPDLOG_INLINE std::recursive_mutex &
tp_mutex_	include/spdlog/details/registry.h	/^    std::recursive_mutex tp_mutex_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::recursive_mutex
trace	include/spdlog/common.h	/^    trace = SPDLOG_LEVEL_TRACE,$/;"	e	enum:spdlog::level::level_enum
trace	include/spdlog/logger.h	/^    void trace(const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
trace	include/spdlog/logger.h	/^    void trace(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
trace	include/spdlog/logger.h	/^    void trace(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
trace	include/spdlog/spdlog.h	/^inline void trace(const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
trace	include/spdlog/spdlog.h	/^inline void trace(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
trace	include/spdlog/spdlog.h	/^inline void trace(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
tracer_	include/spdlog/logger.h	/^    details::backtracer tracer_;$/;"	m	class:spdlog::logger	typeref:typename:details::backtracer
track_id	include/mpris_media_player.h	/^  std::string track_id;$/;"	m	struct:DBusMetadata	typeref:typename:std::string
track_number	include/mpris_media_player.h	/^  int32_t track_number;$/;"	m	struct:DBusMetadata	typeref:typename:int32_t
traits	include/spdlog/fmt/bundled/compile.h	/^  using traits = detail::fixed_buffer_traits;$/;"	t	function:format_to_n	typeref:typename:detail::fixed_buffer_traits
traits	include/spdlog/fmt/bundled/core.h	/^  using traits = detail::fixed_buffer_traits;$/;"	t	function:vformat_to_n	typeref:typename:detail::fixed_buffer_traits
traits	include/spdlog/fmt/bundled/xchar.h	/^  using traits = detail::fixed_buffer_traits;$/;"	t	function:vformat_to_n	typeref:typename:detail::fixed_buffer_traits
traits_type	include/spdlog/fmt/bundled/ostream.h	/^  using traits_type = typename Streambuf::traits_type;$/;"	t	class:detail::formatbuf	typeref:typename:Streambuf::traits_type
trim_	include/spdlog/cfg/helpers-inl.h	/^inline std::string &trim_(std::string &str) {$/;"	f	namespace:spdlog::cfg::helpers	typeref:typename:std::string &
truncate_	include/spdlog/pattern_formatter.h	/^    bool truncate_ = false;$/;"	m	struct:spdlog::details::padding_info	typeref:typename:bool
truncate_	include/spdlog/sinks/daily_file_sink.h	/^    bool truncate_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:bool
truncate_	include/spdlog/sinks/hourly_file_sink.h	/^    bool truncate_;$/;"	m	class:spdlog::sinks::hourly_file_sink	typeref:typename:bool
try_format_argument	include/spdlog/fmt/bundled/compile.h	/^  constexpr static bool try_format_argument($/;"	f	struct:detail::runtime_named_field	typeref:typename:bool
try_reserve	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 void try_reserve(size_t new_capacity) {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR20 void
try_resize	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR20 void try_resize(size_t count) {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR20 void
tuple	include/spdlog/fmt/bundled/ranges.h	/^  const std::tuple<T...>& tuple;$/;"	m	struct:tuple_join_view	typeref:typename:const std::tuple<T...> &
tuple	include/spdlog/fmt/bundled/ranges.h	/^namespace tuple {$/;"	n	namespace:detail
tuple_index_sequence	include/spdlog/fmt/bundled/ranges.h	/^using tuple_index_sequence = make_index_sequence<std::tuple_size<T>::value>;$/;"	t	namespace:detail	typeref:typename:make_index_sequence<std::tuple_size<T>::value>
tuple_join_view	include/spdlog/fmt/bundled/ranges.h	/^  tuple_join_view(const std::tuple<T...>& t, basic_string_view<Char> s)$/;"	f	struct:tuple_join_view
tuple_join_view	include/spdlog/fmt/bundled/ranges.h	/^template <typename Char, typename... T> struct tuple_join_view : detail::view {$/;"	s
turquoise	include/spdlog/fmt/bundled/color.h	/^  turquoise = 0x40E0D0,                \/\/ rgb(64,224,208)$/;"	e	enum:color
type	include/spdlog/fmt/bundled/chrono.h	/^  using type = T;$/;"	t	struct:detail::make_unsigned_or_unchanged	typeref:typename:T
type	include/spdlog/fmt/bundled/chrono.h	/^  using type = typename std::make_unsigned<T>::type;$/;"	t	struct:detail::make_unsigned_or_unchanged	typeref:typename:std::make_unsigned<T>::type
type	include/spdlog/fmt/bundled/compile.h	/^  using type = remove_cvref_t<T>;$/;"	t	struct:detail::field_type	typeref:typename:remove_cvref_t<T>
type	include/spdlog/fmt/bundled/compile.h	/^  using type = remove_cvref_t<decltype(T::value)>;$/;"	t	struct:detail::field_type
type	include/spdlog/fmt/bundled/compile.h	/^  using type =$/;"	t	struct:detail::get_type_impl
type	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR auto type(int index) const -> detail::type {$/;"	f	class:basic_format_args	typeref:typename:detail::type
type	include/spdlog/fmt/bundled/core.h	/^  auto type() const -> detail::type { return type_; }$/;"	f	class:basic_format_arg	typeref:typename:detail::type
type	include/spdlog/fmt/bundled/core.h	/^  presentation_type type;$/;"	m	struct:format_specs	typeref:typename:presentation_type
type	include/spdlog/fmt/bundled/core.h	/^  using type = T;$/;"	t	struct:detail::strip_named_arg	typeref:typename:T
type	include/spdlog/fmt/bundled/core.h	/^  using type = T;$/;"	t	struct:type_identity	typeref:typename:T
type	include/spdlog/fmt/bundled/core.h	/^  using type = basic_format_args<$/;"	t	struct:detail::vformat_args	typeref:typename:basic_format_args<basic_format_context<std::back_insert_iterator<buffer<Char>>,Char>>
type	include/spdlog/fmt/bundled/core.h	/^  using type = decltype(map(static_cast<T*>(nullptr)));$/;"	t	struct:detail::format_as_result
type	include/spdlog/fmt/bundled/core.h	/^  using type = format_args;$/;"	t	struct:detail::vformat_args	typeref:typename:format_args
type	include/spdlog/fmt/bundled/core.h	/^  using type = remove_cvref_t<decltype(T::value)>;$/;"	t	struct:detail::strip_named_arg
type	include/spdlog/fmt/bundled/core.h	/^  using type = typename result::value_type;$/;"	t	struct:detail::char_t_impl	typeref:typename:result::value_type
type	include/spdlog/fmt/bundled/core.h	/^  using type = void;$/;"	t	struct:detail::void_t_impl	typeref:typename:void
type	include/spdlog/fmt/bundled/core.h	/^enum class type {$/;"	g	namespace:detail
type	include/spdlog/fmt/bundled/printf.h	/^  using type = bool;$/;"	t	struct:detail::make_unsigned_or_bool	typeref:typename:bool
type	include/spdlog/fmt/bundled/ranges.h	/^  using type = T&;$/;"	t	struct:detail::range_reference_type_impl	typeref:typename:T &
type	include/spdlog/fmt/bundled/ranges.h	/^  using type = decltype(*detail::range_begin(std::declval<R&>()));$/;"	t	struct:detail::range_reference_type_impl
type_	include/spdlog/fmt/bundled/core.h	/^  detail::type type_;$/;"	m	class:basic_format_arg	typeref:typename:detail::type
type_	include/spdlog/fmt/bundled/printf.h	/^  char_type type_;$/;"	m	class:detail::arg_converter	typeref:typename:char_type
type_constant	include/spdlog/fmt/bundled/core.h	/^struct type_constant : std::integral_constant<type, type::custom_type> {};$/;"	s	namespace:detail
type_identity	include/spdlog/fmt/bundled/core.h	/^template <typename T> struct type_identity {$/;"	s
type_identity_t	include/spdlog/fmt/bundled/core.h	/^template <typename T> using type_identity_t = typename type_identity<T>::type;$/;"	t	typeref:typename:type_identity<T>::type
type_list	include/spdlog/fmt/bundled/compile.h	/^template <typename... Args> struct type_list {};$/;"	s	namespace:detail
typed_node	include/spdlog/fmt/bundled/args.h	/^    FMT_CONSTEXPR typed_node(const Arg& arg) : value(arg) {}$/;"	f	struct:detail::dynamic_arg_list::typed_node	typeref:typename:FMT_CONSTEXPR
typed_node	include/spdlog/fmt/bundled/args.h	/^    FMT_CONSTEXPR typed_node(const basic_string_view<Char>& arg)$/;"	f	struct:detail::dynamic_arg_list::typed_node	typeref:typename:FMT_CONSTEXPR
typed_node	include/spdlog/fmt/bundled/args.h	/^  template <typename T> struct typed_node : node<> {$/;"	s	class:detail::dynamic_arg_list
types_	include/spdlog/fmt/bundled/core.h	/^  const type* types_;$/;"	m	class:detail::compile_parse_context	typeref:typename:const type *
types_	include/spdlog/fmt/bundled/core.h	/^  type types_[num_args > 0 ? static_cast<size_t>(num_args) : 1];$/;"	m	class:detail::format_string_checker	typeref:typename:type[]
tzset_once	include/spdlog/fmt/bundled/chrono.h	/^inline void tzset_once() {$/;"	f	namespace:detail	typeref:typename:void
uchar	include/spdlog/fmt/bundled/core.h	/^  using uchar = unsigned char;$/;"	t	function:detail::is_utf8	typeref:typename:unsigned char
uchar	include/spdlog/fmt/bundled/format.h	/^  using uchar = unsigned char;$/;"	t	function:detail::utf8_decode	typeref:typename:unsigned char
udl_arg	include/spdlog/fmt/bundled/format.h	/^struct udl_arg {$/;"	s	namespace:detail
udl_arg	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct udl_arg {$/;"	s	namespace:detail
udl_compiled_string	include/spdlog/fmt/bundled/compile.h	/^struct udl_compiled_string : compiled_string {$/;"	s	namespace:detail
udp_client	include/spdlog/details/udp_client-windows.h	/^    udp_client(const std::string &host, uint16_t port) {$/;"	f	class:spdlog::details::udp_client
udp_client	include/spdlog/details/udp_client-windows.h	/^class udp_client {$/;"	c	namespace:spdlog::details
udp_client	include/spdlog/details/udp_client.h	/^    udp_client(const std::string &host, uint16_t port) {$/;"	f	class:spdlog::details::udp_client
udp_client	include/spdlog/details/udp_client.h	/^class udp_client {$/;"	c	namespace:spdlog::details
udp_logger_mt	include/spdlog/sinks/udp_sink.h	/^inline std::shared_ptr<logger> udp_logger_mt(const std::string &logger_name,$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
udp_sink	include/spdlog/sinks/udp_sink.h	/^    explicit udp_sink(udp_sink_config sink_config)$/;"	f	class:spdlog::sinks::udp_sink
udp_sink	include/spdlog/sinks/udp_sink.h	/^class udp_sink : public spdlog::sinks::base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks
udp_sink_config	include/spdlog/sinks/udp_sink.h	/^    udp_sink_config(std::string host, uint16_t port)$/;"	f	struct:spdlog::sinks::udp_sink_config
udp_sink_config	include/spdlog/sinks/udp_sink.h	/^struct udp_sink_config {$/;"	s	namespace:spdlog::sinks
udp_sink_mt	include/spdlog/sinks/udp_sink.h	/^using udp_sink_mt = udp_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:udp_sink<std::mutex>
udp_sink_st	include/spdlog/sinks/udp_sink.h	/^using udp_sink_st = udp_sink<spdlog::details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:udp_sink<spdlog::details::null_mutex>
uint128_fallback	include/spdlog/fmt/bundled/format.h	/^  constexpr uint128_fallback(uint64_t hi, uint64_t lo) : lo_(lo), hi_(hi) {}$/;"	f	class:detail::uint128_fallback
uint128_fallback	include/spdlog/fmt/bundled/format.h	/^  constexpr uint128_fallback(uint64_t value = 0) : lo_(value), hi_(0) {}$/;"	f	class:detail::uint128_fallback
uint128_fallback	include/spdlog/fmt/bundled/format.h	/^class uint128_fallback {$/;"	c	namespace:detail
uint128_opt	include/spdlog/fmt/bundled/core.h	/^enum class uint128_opt {};$/;"	g	namespace:detail
uint128_opt	include/spdlog/fmt/bundled/core.h	/^using uint128_opt = __uint128_t;$/;"	t	namespace:detail	typeref:typename:__uint128_t
uint128_t	include/spdlog/fmt/bundled/format.h	/^using uint128_t = conditional_t<FMT_USE_INT128, uint128_opt, uint128_fallback>;$/;"	t	namespace:detail	typeref:typename:conditional_t<FMT_USE_INT128,uint128_opt,uint128_fallback>
uint128_type	include/spdlog/fmt/bundled/core.h	/^  uint128_type,$/;"	e	enum:detail::type
uint128_value	include/spdlog/fmt/bundled/core.h	/^    uint128_opt uint128_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:uint128_opt
uint32_or_64_or_128_t	include/spdlog/fmt/bundled/format.h	/^using uint32_or_64_or_128_t =$/;"	t	namespace:detail
uint64_or_128_t	include/spdlog/fmt/bundled/format.h	/^using uint64_or_128_t = conditional_t<num_bits<T>() <= 64, uint64_t, uint128_t>;$/;"	t	namespace:detail
uint_set	include/spdlog/fmt/bundled/core.h	/^  uint_set = set(type::uint_type) | set(type::ulong_long_type) |$/;"	e	enum:detail::__anon0accc0920103
uint_type	include/spdlog/fmt/bundled/core.h	/^  uint_type,$/;"	e	enum:detail::type
uint_value	include/spdlog/fmt/bundled/core.h	/^    unsigned uint_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:unsigned
uintptr_t	include/spdlog/fmt/bundled/format.h	/^using uintptr_t = ::uintptr_t;$/;"	t	namespace:detail	typeref:typename:::uintptr_t
uintptr_t	include/spdlog/fmt/bundled/format.h	/^using uintptr_t = uint128_t;$/;"	t	namespace:detail	typeref:typename:uint128_t
ulong_long_type	include/spdlog/fmt/bundled/core.h	/^  ulong_long_type,$/;"	e	enum:detail::type
ulong_long_value	include/spdlog/fmt/bundled/core.h	/^    unsigned long long ulong_long_value;$/;"	m	union:detail::value::__anon0accc092050a	typeref:typename:unsigned long long
ulong_type	include/spdlog/fmt/bundled/core.h	/^using ulong_type = conditional_t<long_short, unsigned, unsigned long long>;$/;"	t	namespace:detail	typeref:typename:conditional_t<long_short,unsigned,unsigned long long>
umul128	include/spdlog/fmt/bundled/format.h	/^inline auto umul128(uint64_t x, uint64_t y) noexcept -> uint128_fallback {$/;"	f	namespace:detail	typeref:typename:auto
umul128_upper64	include/spdlog/fmt/bundled/format.h	/^inline auto umul128_upper64(uint64_t x, uint64_t y) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul192_lower128	include/spdlog/fmt/bundled/format-inl.h	/^inline auto umul192_lower128(uint64_t x, uint128_fallback y) noexcept$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul192_upper128	include/spdlog/fmt/bundled/format.h	/^inline auto umul192_upper128(uint64_t x, uint128_fallback y) noexcept$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul96_lower64	include/spdlog/fmt/bundled/format-inl.h	/^inline auto umul96_lower64(uint32_t x, uint64_t y) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul96_upper64	include/spdlog/fmt/bundled/format-inl.h	/^inline auto umul96_upper64(uint32_t x, uint64_t y) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
uncvref_type	include/spdlog/fmt/bundled/ranges.h	/^using uncvref_type = remove_cvref_t<range_reference_type<Range>>;$/;"	t	namespace:detail	typeref:typename:remove_cvref_t<range_reference_type<Range>>
underline	include/spdlog/fmt/bundled/color.h	/^  underline = 1 << 3,$/;"	e	enum:emphasis
underline	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t underline = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
underlying	include/spdlog/fmt/bundled/format.h	/^constexpr auto underlying(Enum e) noexcept -> underlying_t<Enum> {$/;"	f	typeref:typename:auto
underlying	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto underlying() -> detail::range_formatter_type<Char, T>& {$/;"	f	struct:range_formatter	typeref:typename:detail::range_formatter_type<Char,T> &
underlying_	include/spdlog/fmt/bundled/ranges.h	/^  detail::range_formatter_type<Char, T> underlying_;$/;"	m	struct:range_formatter	typeref:typename:detail::range_formatter_type<Char,T>
underlying_	include/spdlog/fmt/bundled/ranges.h	/^  range_formatter<detail::uncvref_type<range_type>, Char> underlying_;$/;"	m	struct:detail::range_default_formatter	typeref:typename:range_formatter<detail::uncvref_type<range_type>,Char>
underlying_	include/spdlog/fmt/bundled/std.h	/^  formatter<T, Char> underlying_;$/;"	m	struct:formatter	typeref:typename:formatter<T,Char>
underlying_t	include/spdlog/fmt/bundled/core.h	/^using underlying_t = typename std::underlying_type<T>::type;$/;"	t	typeref:typename:std::underlying_type<T>::type
unformattable	include/spdlog/fmt/bundled/core.h	/^struct unformattable {};$/;"	s	namespace:detail
unformattable_char	include/spdlog/fmt/bundled/core.h	/^struct unformattable_char : unformattable {};$/;"	s	namespace:detail
unformattable_pointer	include/spdlog/fmt/bundled/core.h	/^struct unformattable_pointer : unformattable {};$/;"	s	namespace:detail
unit_t	include/spdlog/fmt/bundled/chrono.h	/^    using unit_t = codecvt_result<code_unit>;$/;"	t	function:detail::write_encoded_tm_str	typeref:typename:codecvt_result<code_unit>
unknown_format	include/spdlog/fmt/bundled/compile.h	/^struct unknown_format {};$/;"	s	namespace:detail
unlock	include/spdlog/details/null_mutex.h	/^    void unlock() const {}$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:void
unsigned_streamsize	include/spdlog/fmt/bundled/ostream.h	/^  using unsigned_streamsize = std::make_unsigned<std::streamsize>::type;$/;"	t	function:detail::write_buffer	typeref:typename:std::make_unsigned<std::streamsize>::type
unsigned_type	include/spdlog/fmt/bundled/format.h	/^  using unsigned_type =$/;"	t	function:detail::write	typeref:typename:conditional_t<std::is_same<Char,char>::value,unsigned char,unsigned>
unsigned_type	include/spdlog/fmt/bundled/printf.h	/^        using unsigned_type = typename make_unsigned_or_bool<target_type>::type;$/;"	t	function:detail::arg_converter::operator ()	typeref:typename:make_unsigned_or_bool<target_type>::type
unspecified	include/spdlog/fmt/bundled/chrono.h	/^  unspecified,$/;"	e	enum:detail::pad_type
unsupported	include/spdlog/fmt/bundled/chrono.h	/^  FMT_CONSTEXPR void unsupported() {$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
unsupported	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void unsupported() { FMT_THROW(format_error("no date")); }$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_NORETURN void
unsupported	include/spdlog/fmt/bundled/chrono.h	/^  FMT_NORETURN void unsupported() { FMT_THROW(format_error("no format")); }$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_NORETURN void
unwrap	include/spdlog/fmt/bundled/args.h	/^auto unwrap(const std::reference_wrapper<T>& v) -> const T& {$/;"	f	namespace:detail	typeref:typename:const T &
unwrap	include/spdlog/fmt/bundled/args.h	/^template <typename T> auto unwrap(const T& v) -> const T& { return v; }$/;"	f	namespace:detail	typeref:typename:const T &
update_string_views	include/spdlog/details/log_msg_buffer-inl.h	/^SPDLOG_INLINE void log_msg_buffer::update_string_views() {$/;"	f	class:spdlog::details::log_msg_buffer	typeref:typename:SPDLOG_INLINE void
upper	include/spdlog/fmt/bundled/format-inl.h	/^  unsigned char upper;$/;"	m	struct:detail::singleton	typeref:typename:unsigned char
upper	include/spdlog/fmt/bundled/format.h	/^  bool upper : 1;$/;"	m	struct:detail::float_specs	typeref:typename:bool:1
url	include/mpris_media_player.h	/^  std::string url;$/;"	m	struct:DBusMetadata	typeref:typename:std::string
use_raw_msg_	include/spdlog/sinks/android_sink.h	/^    bool use_raw_msg_;$/;"	m	class:spdlog::sinks::android_sink	typeref:typename:bool
use_uppercase	include/spdlog/fmt/bin_to_hex.h	/^    bool use_uppercase = false;$/;"	m	struct:std::formatter	typeref:typename:bool
user_rating	include/mpris_media_player.h	/^  double user_rating;$/;"	m	struct:DBusMetadata	typeref:typename:double
utc	include/spdlog/common.h	/^    utc     \/\/ log utc$/;"	e	enum:spdlog::pattern_time_type
utc_minutes_offset	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE int utc_minutes_offset(const std::tm &tm) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE int
utf8_decode	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR inline auto utf8_decode(const char* s, uint32_t* c, int* e)$/;"	f	namespace:detail	typeref:typename:const char *
utf8_to_utf16	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC detail::utf8_to_utf16::utf8_to_utf16(string_view s) {$/;"	f	class:detail::utf8_to_utf16	typeref:typename:FMT_FUNC
utf8_to_utf16	include/spdlog/fmt/bundled/format.h	/^class utf8_to_utf16 {$/;"	c	namespace:detail
utf8_to_wstrbuf	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE void utf8_to_wstrbuf(string_view_t str, wmemory_buf_t &target) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE void
v_	include/spdlog/details/circular_q.h	/^    std::vector<T> v_;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>
v_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit v_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::v_formatter
v_formatter	include/spdlog/pattern_formatter-inl.h	/^class v_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
val	include/spdlog/fmt/bundled/chrono.h	/^  rep val;$/;"	m	struct:detail::chrono_formatter	typeref:typename:rep
val	include/spdlog/fmt/bundled/core.h	/^  } val;$/;"	m	struct:detail::arg_ref	typeref:union:detail::arg_ref::value
value	include/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int	typeref:typename:int
value	include/spdlog/fmt/bundled/args.h	/^      value = !(detail::is_reference_wrapper<T>::value ||$/;"	e	enum:dynamic_format_arg_store::need_copy::__anon0652ec360103
value	include/spdlog/fmt/bundled/args.h	/^    T value;$/;"	m	struct:detail::dynamic_arg_list::typed_node	typeref:typename:T
value	include/spdlog/fmt/bundled/chrono.h	/^  static constexpr int value = (Num % Den == 0) ? N : 6;$/;"	m	struct:detail::count_fractional_digits	typeref:typename:int
value	include/spdlog/fmt/bundled/chrono.h	/^  static constexpr int value =$/;"	m	struct:detail::count_fractional_digits	typeref:typename:int
value	include/spdlog/fmt/bundled/chrono.h	/^  unsigned char value;$/;"	m	class:weekday	typeref:typename:unsigned char
value	include/spdlog/fmt/bundled/color.h	/^  const T& value;$/;"	m	struct:detail::styled_arg	typeref:typename:const T &
value	include/spdlog/fmt/bundled/color.h	/^  } value;$/;"	m	struct:detail::color_type	typeref:union:detail::color_type::color_union
value	include/spdlog/fmt/bundled/compile.h	/^  Char value;$/;"	m	struct:detail::code_unit	typeref:typename:Char
value	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR value(basic_string_view<Char> n) : name(n) {}$/;"	f	union:detail::arg_ref::value	typeref:typename:FMT_CONSTEXPR
value	include/spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}$/;"	f	union:detail::arg_ref::value	typeref:typename:FMT_CONSTEXPR
value	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE value(basic_string_view<char_type> val) {$/;"	f	class:detail::value	typeref:typename:FMT_CONSTEXPR FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR FMT_INLINE value(const char_type* val) {$/;"	f	class:detail::value	typeref:typename:FMT_CONSTEXPR FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE value(const named_arg_info<char_type>* args, size_t size)$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE value(const void* val) : pointer(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE value(int128_opt val) : int128_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE value(long double val) : long_double_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  FMT_INLINE value(uint128_opt val) : uint128_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  const T& value;$/;"	m	struct:detail::named_arg	typeref:typename:const T &
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value() : no_value() {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(bool val) : bool_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(char_type val) : char_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(double val) : double_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(float val) : float_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(int val) : int_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(long long val) : long_long_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(unsigned long long val) : ulong_long_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  constexpr FMT_INLINE value(unsigned val) : uint_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  template <typename T> FMT_CONSTEXPR20 FMT_INLINE value(T& val) {$/;"	f	class:detail::value	typeref:typename:FMT_CONSTEXPR20 FMT_INLINE
value	include/spdlog/fmt/bundled/core.h	/^  union value {$/;"	u	struct:detail::arg_ref
value	include/spdlog/fmt/bundled/core.h	/^  void* value;$/;"	m	struct:detail::custom_value	typeref:typename:void *
value	include/spdlog/fmt/bundled/core.h	/^template <typename Context> class value {$/;"	c	namespace:detail
value	include/spdlog/fmt/bundled/format.h	/^    unsigned value[static_cast<unsigned>(size)];$/;"	m	struct:detail::bit_cast::data_t	typeref:typename:unsigned[]
value	include/spdlog/fmt/bundled/format.h	/^  T value;$/;"	m	struct:group_digits_view	typeref:typename:T
value	include/spdlog/fmt/bundled/format.h	/^  const T& value;$/;"	m	struct:detail::statically_named_arg	typeref:typename:const T &
value	include/spdlog/fmt/bundled/format.h	/^  const T* value;$/;"	m	struct:nested_view	typeref:typename:const T *
value	include/spdlog/fmt/bundled/format.h	/^  static constexpr CharT value[sizeof...(C)] = {C...};$/;"	m	struct:detail::string_literal	typeref:typename:CharT[]
value	include/spdlog/fmt/bundled/format.h	/^constexpr CharT string_literal<CharT, C...>::value[sizeof...(C)];$/;"	m	class:detail::string_literal<CharT, C...>	typeref:typename:CharT[]
value	include/spdlog/fmt/bundled/os.h	/^  size_t value = 0;$/;"	m	struct:detail::buffer_size	typeref:typename:size_t
value	include/spdlog/fmt/bundled/ostream.h	/^  const T& value;$/;"	m	struct:detail::streamed_view	typeref:typename:const T &
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value = false;$/;"	m	class:detail::is_map	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value = false;$/;"	m	class:detail::is_set	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value = false;$/;"	m	class:detail::is_tuple_formattable_	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_container_adaptor_like	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_std_string_like	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_tuple_formattable_	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_tuple_like_	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value =$/;"	m	struct:is_range	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value =$/;"	m	struct:is_tuple_formattable	typeref:typename:const bool
value	include/spdlog/fmt/bundled/ranges.h	/^  static constexpr const bool value =$/;"	m	struct:is_tuple_like	typeref:typename:const bool
value	include/spdlog/fmt/bundled/std.h	/^  static constexpr const bool value = detail::is_variant_like_<T>::value;$/;"	m	struct:is_variant_like	typeref:typename:const bool
value	include/spdlog/fmt/bundled/std.h	/^  static constexpr const bool value = true;$/;"	m	struct:detail::is_bit_reference_like	typeref:typename:const bool
value	include/spdlog/fmt/bundled/std.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_variant_formattable_	typeref:typename:const bool
value	include/spdlog/fmt/bundled/std.h	/^  static constexpr const bool value =$/;"	m	struct:detail::is_bit_reference_like	typeref:typename:const bool
value	include/spdlog/fmt/bundled/std.h	/^  static constexpr const bool value =$/;"	m	struct:is_variant_formattable	typeref:typename:const bool
value_	include/spdlog/fmt/bundled/core.h	/^  detail::value<Context> value_;$/;"	m	class:basic_format_arg	typeref:typename:detail::value<Context>
value_	include/spdlog/fmt/bundled/format.h	/^  basic_format_arg<format_context> value_;$/;"	m	class:loc_value	typeref:typename:basic_format_arg<format_context>
value_formatter_	include/spdlog/fmt/bundled/format.h	/^  formatter<remove_cvref_t<value_type>, Char> value_formatter_;$/;"	m	struct:formatter	typeref:typename:formatter<remove_cvref_t<value_type>,Char>
value_type	include/spdlog/details/circular_q.h	/^    using value_type = T;$/;"	t	class:spdlog::details::circular_q	typeref:typename:T
value_type	include/spdlog/fmt/bundled/core.h	/^    using value_type = remove_const_t<T>;$/;"	t	function:detail::value::value	typeref:typename:remove_const_t<T>
value_type	include/spdlog/fmt/bundled/core.h	/^  using value_type = Char;$/;"	t	class:basic_string_view	typeref:typename:Char
value_type	include/spdlog/fmt/bundled/core.h	/^  using value_type = T;$/;"	t	class:detail::buffer	typeref:typename:T
value_type	include/spdlog/fmt/bundled/core.h	/^  using value_type = conditional_t<is_packed, detail::value<Context>,$/;"	t	class:format_arg_store	typeref:typename:conditional_t<is_packed,detail::value<Context>,basic_format_arg<Context>>
value_type	include/spdlog/fmt/bundled/format.h	/^  struct value_type {$/;"	s	class:detail::counting_iterator
value_type	include/spdlog/fmt/bundled/format.h	/^  using value_type = T;$/;"	t	class:basic_memory_buffer	typeref:typename:T
value_type	include/spdlog/fmt/bundled/format.h	/^  using value_type =$/;"	t	struct:formatter	typeref:typename:std::iter_value_t<It>
value_type	include/spdlog/fmt/bundled/ranges.h	/^  using value_type = T;$/;"	t	struct:detail::integer_sequence	typeref:typename:T
values_	include/spdlog/fmt/bundled/core.h	/^    const detail::value<Context>* values_;$/;"	m	union:basic_format_args::__anon0accc0920c0a	typeref:typename:const detail::value<Context> *
variant_index_sequence	include/spdlog/fmt/bundled/std.h	/^using variant_index_sequence =$/;"	t	namespace:detail	typeref:typename:std::make_index_sequence<std::variant_size<T>::value>
vformat	include/spdlog/fmt/bundled/color.h	/^inline auto vformat($/;"	f	typeref:typename:std::basic_string<Char>
vformat	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto vformat(string_view fmt, format_args args) -> std::string {$/;"	f	typeref:typename:std::string
vformat	include/spdlog/fmt/bundled/format.h	/^auto vformat(const Locale& loc, basic_string_view<Char> fmt,$/;"	f	namespace:detail	typeref:typename:std::basic_string<Char>
vformat	include/spdlog/fmt/bundled/format.h	/^inline auto vformat(const Locale& loc, string_view fmt, format_args args)$/;"	f	typeref:typename:std::string
vformat	include/spdlog/fmt/bundled/xchar.h	/^auto vformat(basic_string_view<Char> format_str,$/;"	f	typeref:typename:std::basic_string<Char>
vformat	include/spdlog/fmt/bundled/xchar.h	/^inline auto vformat($/;"	f	typeref:typename:std::basic_string<Char>
vformat_args	include/spdlog/fmt/bundled/core.h	/^template <> struct vformat_args<char> {$/;"	s	namespace:detail
vformat_args	include/spdlog/fmt/bundled/core.h	/^template <typename Char = char> struct vformat_args {$/;"	s	namespace:detail
vformat_to	include/spdlog/fmt/bundled/color.h	/^auto vformat_to(OutputIt out, const text_style& ts,$/;"	f	typeref:typename:OutputIt
vformat_to	include/spdlog/fmt/bundled/color.h	/^void vformat_to(buffer<Char>& buf, const text_style& ts,$/;"	f	namespace:detail	typeref:typename:void
vformat_to	include/spdlog/fmt/bundled/core.h	/^auto vformat_to(OutputIt out, string_view fmt, format_args args) -> OutputIt {$/;"	f	typeref:typename:OutputIt
vformat_to	include/spdlog/fmt/bundled/format.h	/^auto vformat_to(OutputIt out, const Locale& loc, string_view fmt,$/;"	f	typeref:typename:OutputIt
vformat_to	include/spdlog/fmt/bundled/format.h	/^void vformat_to(buffer<Char>& buf, basic_string_view<Char> fmt,$/;"	f	namespace:detail	typeref:typename:void
vformat_to	include/spdlog/fmt/bundled/xchar.h	/^auto vformat_to(OutputIt out, const S& format_str,$/;"	f	typeref:typename:OutputIt
vformat_to	include/spdlog/fmt/bundled/xchar.h	/^inline auto vformat_to($/;"	f	typeref:typename:OutputIt
vformat_to_n	include/spdlog/fmt/bundled/core.h	/^auto vformat_to_n(OutputIt out, size_t n, string_view fmt, format_args args)$/;"	f	typeref:typename:format_to_n_result<OutputIt>
vformat_to_n	include/spdlog/fmt/bundled/xchar.h	/^inline auto vformat_to_n($/;"	f	typeref:typename:format_to_n_result<OutputIt>
vfprintf	include/spdlog/fmt/bundled/printf.h	/^inline auto vfprintf($/;"	f	typeref:typename:int
view	include/spdlog/fmt/bundled/core.h	/^struct view {};$/;"	s	namespace:detail
violet	include/spdlog/fmt/bundled/color.h	/^  violet = 0xEE82EE,                   \/\/ rgb(238,130,238)$/;"	e	enum:color
visit	include/spdlog/fmt/bundled/format.h	/^  template <typename Visitor> auto visit(Visitor&& vis) -> decltype(vis(0)) {$/;"	f	class:loc_value	typeref:typename:decltype(vis (0))
visit_format_arg	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR FMT_INLINE auto visit_format_arg($/;"	f	typeref:typename:decltype(vis (0))
void_t	include/spdlog/fmt/bundled/core.h	/^template <typename... T> using void_t = typename void_t_impl<T...>::type;$/;"	t	namespace:detail	typeref:typename:void_t_impl<T...>::type
void_t	include/spdlog/fmt/bundled/core.h	/^template <typename...> using void_t = void;$/;"	t	namespace:detail	typeref:typename:void
void_t_impl	include/spdlog/fmt/bundled/core.h	/^template <typename...> struct void_t_impl {$/;"	s	namespace:detail
volatile	build/CMakeFiles/3.29.3/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
volatile	build/CMakeFiles/3.29.5/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
volatile	build/CMakeFiles/3.29.6/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vprint	include/spdlog/fmt/bundled/color.h	/^inline void vprint(std::FILE* f, const text_style& ts, string_view fmt,$/;"	f	typeref:typename:void
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE* f, string_view fmt, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(string_view fmt, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	include/spdlog/fmt/bundled/os.h	/^  void vprint(string_view format_str, format_args args) {$/;"	f	class:buffered_file	typeref:typename:void
vprint	include/spdlog/fmt/bundled/ostream.h	/^void vprint(std::basic_ostream<Char>& os,$/;"	f	typeref:typename:FMT_EXPORT void
vprint	include/spdlog/fmt/bundled/xchar.h	/^inline void vprint(std::FILE* f, wstring_view fmt, wformat_args args) {$/;"	f	typeref:typename:void
vprint	include/spdlog/fmt/bundled/xchar.h	/^inline void vprint(wstring_view fmt, wformat_args args) {$/;"	f	typeref:typename:void
vprint_directly	include/spdlog/fmt/bundled/ostream.h	/^inline void vprint_directly(std::ostream& os, string_view format_str,$/;"	f	namespace:detail	typeref:typename:void
vprint_mojibake	include/spdlog/fmt/bundled/core.h	/^inline void vprint_mojibake(std::FILE*, string_view, format_args) {}$/;"	f	namespace:detail	typeref:typename:void
vprint_mojibake	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint_mojibake(std::FILE* f, string_view fmt, format_args args) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
vprintf	include/spdlog/fmt/bundled/printf.h	/^FMT_DEPRECATED inline auto vprintf($/;"	f	typeref:typename:int
vprintf	include/spdlog/fmt/bundled/printf.h	/^void vprintf(buffer<Char>& buf, basic_string_view<Char> format,$/;"	f	namespace:detail	typeref:typename:void
vsprintf	include/spdlog/fmt/bundled/printf.h	/^inline auto vsprintf($/;"	f	typeref:typename:std::basic_string<Char>
vsystem_error	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto vsystem_error(int error_code, string_view fmt, format_args args)$/;"	f	typeref:typename:std::system_error
warn	include/spdlog/common.h	/^    warn = SPDLOG_LEVEL_WARN,$/;"	e	enum:spdlog::level::level_enum
warn	include/spdlog/logger.h	/^    void warn(const T &msg) {$/;"	f	class:spdlog::logger	typeref:typename:void
warn	include/spdlog/logger.h	/^    void warn(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
warn	include/spdlog/logger.h	/^    void warn(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	class:spdlog::logger	typeref:typename:void
warn	include/spdlog/spdlog.h	/^inline void warn(const T &msg) {$/;"	f	namespace:spdlog	typeref:typename:void
warn	include/spdlog/spdlog.h	/^inline void warn(format_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
warn	include/spdlog/spdlog.h	/^inline void warn(wformat_string_t<Args...> fmt, Args &&...args) {$/;"	f	namespace:spdlog	typeref:typename:void
wcstring_view	include/spdlog/fmt/bundled/os.h	/^using wcstring_view = basic_cstring_view<wchar_t>;$/;"	t	typeref:typename:basic_cstring_view<wchar_t>
weekday	include/spdlog/fmt/bundled/chrono.h	/^  explicit constexpr weekday(unsigned wd) noexcept$/;"	f	class:weekday
weekday	include/spdlog/fmt/bundled/chrono.h	/^class weekday {$/;"	c
weekday	include/spdlog/fmt/bundled/chrono.h	/^using weekday = std::chrono::weekday;$/;"	t	typeref:typename:std::chrono::weekday
wformat_args	include/spdlog/fmt/bundled/xchar.h	/^using wformat_args = basic_format_args<wformat_context>;$/;"	t	typeref:typename:basic_format_args<wformat_context>
wformat_context	include/spdlog/fmt/bundled/xchar.h	/^using wformat_context = buffer_context<wchar_t>;$/;"	t	typeref:typename:buffer_context<wchar_t>
wformat_parse_context	include/spdlog/fmt/bundled/xchar.h	/^using wformat_parse_context = basic_format_parse_context<wchar_t>;$/;"	t	typeref:typename:basic_format_parse_context<wchar_t>
wformat_string	include/spdlog/fmt/bundled/xchar.h	/^template <typename... Args> using wformat_string = wstring_view;$/;"	t	typeref:typename:wstring_view
wformat_string	include/spdlog/fmt/bundled/xchar.h	/^using wformat_string = basic_format_string<wchar_t, type_identity_t<Args>...>;$/;"	t	typeref:typename:basic_format_string<wchar_t,type_identity_t<Args>...>
wformat_string_t	include/spdlog/common.h	/^using wformat_string_t = fmt::wformat_string<Args...>;$/;"	t	namespace:spdlog	typeref:typename:fmt::wformat_string<Args...>
wformat_string_t	include/spdlog/common.h	/^using wformat_string_t = std::wformat_string<Args...>;$/;"	t	namespace:spdlog	typeref:typename:std::wformat_string<Args...>
what	include/spdlog/common-inl.h	/^SPDLOG_INLINE const char *spdlog_ex::what() const SPDLOG_NOEXCEPT { return msg_.c_str(); }$/;"	f	class:spdlog::spdlog_ex	typeref:typename:SPDLOG_INLINE const char *
wheat	include/spdlog/fmt/bundled/color.h	/^  wheat = 0xF5DEB3,                    \/\/ rgb(245,222,179)$/;"	e	enum:color
white	include/spdlog/fmt/bundled/color.h	/^  white = 0xFFFFFF,                    \/\/ rgb(255,255,255)$/;"	e	enum:color
white	include/spdlog/fmt/bundled/color.h	/^  white,$/;"	e	enum:terminal_color
white	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t white = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
white_smoke	include/spdlog/fmt/bundled/color.h	/^  white_smoke = 0xF5F5F5,              \/\/ rgb(245,245,245)$/;"	e	enum:color
width	include/spdlog/fmt/bundled/core.h	/^  int width;$/;"	m	struct:format_specs	typeref:typename:int
width	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
width_	include/spdlog/fmt/bundled/format.h	/^  int width_;$/;"	m	struct:nested_formatter	typeref:typename:int
width_	include/spdlog/pattern_formatter.h	/^    size_t width_ = 0;$/;"	m	struct:spdlog::details::padding_info	typeref:typename:size_t
width_checker	include/spdlog/fmt/bundled/format.h	/^struct width_checker {$/;"	s	namespace:detail
width_ref	include/spdlog/fmt/bundled/core.h	/^  arg_ref<Char> width_ref;$/;"	m	struct:detail::dynamic_format_specs	typeref:typename:arg_ref<Char>
width_ref_	include/spdlog/fmt/bundled/chrono.h	/^  detail::arg_ref<Char> width_ref_;$/;"	m	struct:formatter	typeref:typename:detail::arg_ref<Char>
width_ref_	include/spdlog/fmt/bundled/std.h	/^  detail::arg_ref<Char> width_ref_;$/;"	m	struct:formatter	typeref:typename:detail::arg_ref<Char>
win32_error	include/spdlog/sinks/win_eventlog_sink.h	/^    explicit win32_error(std::string const &func_name, DWORD error = GetLastError())$/;"	f	struct:spdlog::sinks::win_eventlog::internal::win32_error
win32_error	include/spdlog/sinks/win_eventlog_sink.h	/^struct win32_error : public spdlog_ex {$/;"	s	namespace:spdlog::sinks::win_eventlog::internal
win_eventlog	include/spdlog/sinks/win_eventlog_sink.h	/^namespace win_eventlog {$/;"	n	namespace:spdlog::sinks
win_eventlog_sink	include/spdlog/sinks/win_eventlog_sink.h	/^    win_eventlog_sink(std::string const &source,$/;"	f	class:spdlog::sinks::win_eventlog::win_eventlog_sink
win_eventlog_sink	include/spdlog/sinks/win_eventlog_sink.h	/^class win_eventlog_sink : public base_sink<Mutex> {$/;"	c	namespace:spdlog::sinks::win_eventlog
win_eventlog_sink_mt	include/spdlog/sinks/win_eventlog_sink.h	/^using win_eventlog_sink_mt = win_eventlog::win_eventlog_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:win_eventlog::win_eventlog_sink<std::mutex>
win_eventlog_sink_st	include/spdlog/sinks/win_eventlog_sink.h	/^using win_eventlog_sink_st = win_eventlog::win_eventlog_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:win_eventlog::win_eventlog_sink<details::null_mutex>
wincolor_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_sink<ConsoleMutex>::wincolor_sink(void *out_handle, color_mode mode)$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:SPDLOG_INLINE
wincolor_sink	include/spdlog/sinks/wincolor_sink.h	/^class wincolor_sink : public sink {$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_stderr_sink<ConsoleMutex>::wincolor_stderr_sink(color_mode mode)$/;"	f	class:spdlog::sinks::wincolor_stderr_sink	typeref:typename:SPDLOG_INLINE
wincolor_stderr_sink	include/spdlog/sinks/wincolor_sink.h	/^class wincolor_stderr_sink : public wincolor_sink<ConsoleMutex> {$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink_mt	include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stderr_sink_mt = wincolor_stderr_sink<details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink<details::console_mutex>
wincolor_stderr_sink_st	include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stderr_sink_st = wincolor_stderr_sink<details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink<details::console_nullmutex>
wincolor_stdout_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_stdout_sink<ConsoleMutex>::wincolor_stdout_sink(color_mode mode)$/;"	f	class:spdlog::sinks::wincolor_stdout_sink	typeref:typename:SPDLOG_INLINE
wincolor_stdout_sink	include/spdlog/sinks/wincolor_sink.h	/^class wincolor_stdout_sink : public wincolor_sink<ConsoleMutex> {$/;"	c	namespace:spdlog::sinks
wincolor_stdout_sink_mt	include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stdout_sink_mt = wincolor_stdout_sink<details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink<details::console_mutex>
wincolor_stdout_sink_st	include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stdout_sink_st = wincolor_stdout_sink<details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink<details::console_nullmutex>
windebug_sink_mt	include/spdlog/sinks/msvc_sink.h	/^using windebug_sink_mt = msvc_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink_mt
windebug_sink_st	include/spdlog/sinks/msvc_sink.h	/^using windebug_sink_st = msvc_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink_st
windows_error	include/spdlog/fmt/bundled/os.h	/^std::system_error windows_error(int error_code, string_view message,$/;"	f	typeref:typename:std::system_error
with_typename_	include/spdlog/fmt/bundled/std.h	/^  bool with_typename_ = false;$/;"	m	struct:formatter	typeref:typename:bool
wmemory_buf_t	include/spdlog/common.h	/^using wmemory_buf_t = fmt::basic_memory_buffer<wchar_t, 250>;$/;"	t	namespace:spdlog	typeref:typename:fmt::basic_memory_buffer<wchar_t,250>
wmemory_buf_t	include/spdlog/common.h	/^using wmemory_buf_t = std::wstring;$/;"	t	namespace:spdlog	typeref:typename:std::wstring
wmemory_buffer	include/spdlog/fmt/bundled/xchar.h	/^using wmemory_buffer = basic_memory_buffer<wchar_t>;$/;"	t	typeref:typename:basic_memory_buffer<wchar_t>
worker_loop_	include/spdlog/details/thread_pool-inl.h	/^void SPDLOG_INLINE thread_pool::worker_loop_() {$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void SPDLOG_INLINE
worker_ptr	include/spdlog/details/thread_pool.h	/^    async_logger_ptr worker_ptr;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:async_logger_ptr
worker_thread_	include/spdlog/details/periodic_worker.h	/^    std::thread worker_thread_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:std::thread
wprintf_args	include/spdlog/fmt/bundled/printf.h	/^using wprintf_args = basic_format_args<wprintf_context>;$/;"	t	typeref:typename:basic_format_args<wprintf_context>
wprintf_context	include/spdlog/fmt/bundled/printf.h	/^using wprintf_context = basic_printf_context<wchar_t>;$/;"	t	typeref:typename:basic_printf_context<wchar_t>
write	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE void file_helper::write(const memory_buf_t &buf) {$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE void
write	include/spdlog/fmt/bundled/chrono.h	/^  void write(Rep value, int width, pad_type pad = pad_type::unspecified) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write	include/spdlog/fmt/bundled/chrono.h	/^auto write(OutputIt out, const std::tm& time, const std::locale& loc,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR FMT_INLINE auto write(OutputIt out, T value,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, Char value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, Char value,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, T value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, T value,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, basic_string_view<Char> s,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, basic_string_view<Char> value)$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, const Char* s,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, const T& value) -> enable_if_t<$/;"	f	namespace:detail
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, const T& value)$/;"	f	namespace:detail	typeref:typename:enable_if_t<mapped_type_constant<T,Context>::value==type::custom_type,OutputIt>
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write(OutputIt out,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto write(OutputIt out, T value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto write(OutputIt out, T value, format_specs<Char> specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR_CHAR_TRAITS auto write(OutputIt out, const Char* value)$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^auto write(OutputIt out, const T* value, const format_specs<Char>& specs = {},$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^auto write(OutputIt out, monostate, format_specs<Char> = {}, locale_ref = {})$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^constexpr auto write(OutputIt out, const T& value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	include/spdlog/fmt/bundled/format.h	/^inline auto write(OutputIt out, T value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write1	include/spdlog/fmt/bundled/chrono.h	/^  void write1(int value) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write2	include/spdlog/fmt/bundled/chrono.h	/^  void write2(int value) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write2	include/spdlog/fmt/bundled/chrono.h	/^  void write2(int value, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write_buffer	include/spdlog/fmt/bundled/ostream.h	/^void write_buffer(std::basic_ostream<Char>& os, buffer<Char>& buf) {$/;"	f	namespace:detail	typeref:typename:void
write_bytes	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write_bytes(OutputIt out, string_view bytes,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_char	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write_char(OutputIt out, Char value,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_codecvt	include/spdlog/fmt/bundled/chrono.h	/^void write_codecvt(codecvt_result<CodeUnit>& out, string_view in_buf,$/;"	f	namespace:detail	typeref:typename:void
write_codepoint	include/spdlog/fmt/bundled/format.h	/^auto write_codepoint(OutputIt out, char prefix, uint32_t cp) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_console	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto write_console(int, string_view) -> bool { return false; }$/;"	f	namespace:detail	typeref:typename:bool
write_console	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto write_console(std::FILE*, string_view) -> bool { return false; }$/;"	f	namespace:detail	typeref:typename:bool
write_digit2_separated	include/spdlog/fmt/bundled/chrono.h	/^inline void write_digit2_separated(char* buf, unsigned a, unsigned b,$/;"	f	namespace:detail	typeref:typename:void
write_encoded_tm_str	include/spdlog/fmt/bundled/chrono.h	/^auto write_encoded_tm_str(OutputIt out, string_view in, const std::locale& loc)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_escaped_char	include/spdlog/fmt/bundled/format.h	/^auto write_escaped_char(OutputIt out, Char v) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_escaped_cp	include/spdlog/fmt/bundled/format.h	/^auto write_escaped_cp(OutputIt out, const find_escape_result<Char>& escape)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_escaped_path	include/spdlog/fmt/bundled/std.h	/^void write_escaped_path(basic_memory_buffer<Char>& quoted,$/;"	f	namespace:detail	typeref:typename:void
write_escaped_string	include/spdlog/fmt/bundled/format.h	/^auto write_escaped_string(OutputIt out, basic_string_view<Char> str)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_exponent	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write_exponent(int exp, It it) -> It {$/;"	f	namespace:detail	typeref:typename:It
write_float	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto write_float(OutputIt out, T value,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_float	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto write_float(OutputIt out, const DecimalFP& f,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_floating_seconds	include/spdlog/fmt/bundled/chrono.h	/^void write_floating_seconds(memory_buffer& buf, Duration duration,$/;"	f	namespace:detail	typeref:typename:void
write_fractional_seconds	include/spdlog/fmt/bundled/chrono.h	/^void write_fractional_seconds(OutputIt& out, Duration d, int precision = -1) {$/;"	f	namespace:detail	typeref:typename:void
write_int	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR FMT_INLINE auto write_int(OutputIt out, int num_digits,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_int	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR FMT_INLINE auto write_int(OutputIt out, write_int_arg<T> arg,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_int	include/spdlog/fmt/bundled/format.h	/^auto write_int(OutputIt out, UInt value, unsigned prefix,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_int_arg	include/spdlog/fmt/bundled/format.h	/^template <typename UInt> struct write_int_arg {$/;"	s	namespace:detail
write_int_data	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR write_int_data(int num_digits, unsigned prefix,$/;"	f	struct:detail::write_int_data	typeref:typename:FMT_CONSTEXPR
write_int_data	include/spdlog/fmt/bundled/format.h	/^template <typename Char> struct write_int_data {$/;"	s	namespace:detail
write_int_noinline	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR FMT_NOINLINE auto write_int_noinline($/;"	f	namespace:detail	typeref:typename:OutputIt
write_loc	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC auto write_loc(appender out, loc_value value,$/;"	f	namespace:detail	typeref:typename:bool
write_loc	include/spdlog/fmt/bundled/format.h	/^inline auto write_loc(OutputIt, loc_value, const format_specs<Char>&,$/;"	f	namespace:detail	typeref:typename:bool
write_loc	include/spdlog/fmt/bundled/xchar.h	/^inline auto write_loc(std::back_insert_iterator<detail::buffer<wchar_t>> out,$/;"	f	namespace:detail	typeref:typename:bool
write_nan	include/spdlog/fmt/bundled/chrono.h	/^  void write_nan() { std::copy_n("nan", 3, out); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_ninf	include/spdlog/fmt/bundled/chrono.h	/^  void write_ninf() { std::copy_n("-inf", 4, out); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_nonfinite	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto write_nonfinite(OutputIt out, bool isnan,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_null_pointer	include/spdlog/fmt/bundled/printf.h	/^  void write_null_pointer(bool is_string = false) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
write_ostream_unicode	include/spdlog/fmt/bundled/ostream.h	/^inline auto write_ostream_unicode(std::ostream& os, fmt::string_view data)$/;"	f	namespace:detail	typeref:typename:bool
write_ostream_unicode	include/spdlog/fmt/bundled/ostream.h	/^inline auto write_ostream_unicode(std::wostream&,$/;"	f	namespace:detail	typeref:typename:bool
write_padded	include/spdlog/fmt/bundled/format.h	/^  auto write_padded(format_context& ctx, F write) const -> decltype(ctx.out()) {$/;"	f	struct:nested_formatter	typeref:typename:decltype(ctx.out ())
write_padded	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write_padded(OutputIt out, const format_specs<Char>& specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_padded	include/spdlog/fmt/bundled/format.h	/^constexpr auto write_padded(OutputIt out, const format_specs<Char>& specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_padding	include/spdlog/fmt/bundled/chrono.h	/^auto write_padding(OutputIt out, pad_type pad) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_padding	include/spdlog/fmt/bundled/chrono.h	/^auto write_padding(OutputIt out, pad_type pad, int width) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_pinf	include/spdlog/fmt/bundled/chrono.h	/^  void write_pinf() { std::copy_n("inf", 3, out); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_ptr	include/spdlog/fmt/bundled/format.h	/^auto write_ptr(OutputIt out, UIntPtr value, const format_specs<Char>* specs)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_sign	include/spdlog/fmt/bundled/chrono.h	/^  void write_sign() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_significand	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto write_significand(OutputIt out, const char* significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_significand	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR20 auto write_significand(OutputIt out, T significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_significand	include/spdlog/fmt/bundled/format.h	/^constexpr auto write_significand(OutputIt out, const char* significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_significand	include/spdlog/fmt/bundled/format.h	/^inline auto write_significand(Char* out, UInt significand, int significand_size,$/;"	f	namespace:detail	typeref:typename:Char *
write_significand	include/spdlog/fmt/bundled/format.h	/^inline auto write_significand(OutputIt out, UInt significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_tm_str	include/spdlog/fmt/bundled/chrono.h	/^auto write_tm_str(OutputIt out, string_view sv, const std::locale& loc)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_to_file_	include/spdlog/sinks/wincolor_sink-inl.h	/^void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::write_to_file_(const memory_buf_t &formatted) {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void SPDLOG_INLINE
write_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  void write_utc_offset(long offset, numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write_variant_alternative	include/spdlog/fmt/bundled/std.h	/^auto write_variant_alternative(OutputIt out, const T& v) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_year	include/spdlog/fmt/bundled/chrono.h	/^  void write_year(long long year) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write_year_extended	include/spdlog/fmt/bundled/chrono.h	/^  void write_year_extended(long long year) {$/;"	f	class:detail::tm_writer	typeref:typename:void
writer	include/spdlog/fmt/bundled/core.h	/^  struct writer {$/;"	s	function:detail::parse_format_string
writer	include/spdlog/fmt/bundled/std.h	/^  struct writer {$/;"	s	struct:formatter
wstr_to_utf8buf	include/spdlog/details/os-inl.h	/^SPDLOG_INLINE void wstr_to_utf8buf(wstring_view_t wstr, memory_buf_t &target) {$/;"	f	namespace:spdlog::details::os	typeref:typename:SPDLOG_INLINE void
wstring_view	include/spdlog/fmt/bundled/xchar.h	/^using wstring_view = basic_string_view<wchar_t>;$/;"	t	typeref:typename:basic_string_view<wchar_t>
wstring_view_t	include/spdlog/common.h	/^using wstring_view_t = fmt::basic_string_view<wchar_t>;$/;"	t	namespace:spdlog	typeref:typename:fmt::basic_string_view<wchar_t>
wstring_view_t	include/spdlog/common.h	/^using wstring_view_t = std::wstring_view;$/;"	t	namespace:spdlog	typeref:typename:std::wstring_view
xsputn	include/spdlog/fmt/bundled/ostream.h	/^  auto xsputn(const char_type* s, streamsize count) -> streamsize override {$/;"	f	class:detail::formatbuf	typeref:typename:streamsize override
year_month_day	include/spdlog/fmt/bundled/chrono.h	/^class year_month_day {};$/;"	c
yellow	include/spdlog/fmt/bundled/color.h	/^  yellow = 0xFFFF00,                   \/\/ rgb(255,255,0)$/;"	e	enum:color
yellow	include/spdlog/fmt/bundled/color.h	/^  yellow,$/;"	e	enum:terminal_color
yellow	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t yellow = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
yellow_bold	include/spdlog/sinks/ansicolor_sink.h	/^    const string_view_t yellow_bold = "\\033[33m\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const string_view_t
yellow_green	include/spdlog/fmt/bundled/color.h	/^  yellow_green = 0x9ACD32              \/\/ rgb(154,205,50)$/;"	e	enum:color
z_formatter	include/spdlog/pattern_formatter-inl.h	/^    explicit z_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::z_formatter
z_formatter	include/spdlog/pattern_formatter-inl.h	/^class z_formatter final : public flag_formatter {$/;"	c	namespace:spdlog::details
zero	include/spdlog/fmt/bundled/chrono.h	/^  zero,$/;"	e	enum:detail::pad_type
zero	include/spdlog/fmt/bundled/core.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
~basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20
~file_helper	include/spdlog/details/file_helper-inl.h	/^SPDLOG_INLINE file_helper::~file_helper() { close(); }$/;"	f	class:spdlog::details::file_helper	typeref:typename:SPDLOG_INLINE
~get_locale	include/spdlog/fmt/bundled/chrono.h	/^  ~get_locale() {$/;"	f	class:detail::get_locale
~iterator_buffer	include/spdlog/fmt/bundled/core.h	/^  ~iterator_buffer() { flush(); }$/;"	f	class:detail::iterator_buffer
~kafka_sink	include/spdlog/sinks/kafka_sink.h	/^    ~kafka_sink() { producer_->flush(config_.flush_timeout_ms); }$/;"	f	class:spdlog::sinks::kafka_sink
~local_alloc_t	include/spdlog/sinks/win_eventlog_sink.h	/^    ~local_alloc_t() SPDLOG_NOEXCEPT {$/;"	f	struct:spdlog::sinks::win_eventlog::internal::local_alloc_t
~mongo_sink	include/spdlog/sinks/mongo_sink.h	/^    ~mongo_sink() { flush_(); }$/;"	f	class:spdlog::sinks::mongo_sink
~periodic_worker	include/spdlog/details/periodic_worker-inl.h	/^SPDLOG_INLINE periodic_worker::~periodic_worker() {$/;"	f	class:spdlog::details::periodic_worker	typeref:typename:SPDLOG_INLINE
~process_token_t	include/spdlog/sinks/win_eventlog_sink.h	/^            ~process_token_t() { ::CloseHandle(token_handle_); }$/;"	f	struct:spdlog::sinks::win_eventlog::internal::sid_t::get_current_user_sid::process_token_t
~qt_color_sink	include/spdlog/sinks/qt_sinks.h	/^    ~qt_color_sink() { flush_(); }$/;"	f	class:spdlog::sinks::qt_color_sink
~qt_sink	include/spdlog/sinks/qt_sinks.h	/^    ~qt_sink() { flush_(); }$/;"	f	class:spdlog::sinks::qt_sink
~scoped_padder	include/spdlog/pattern_formatter-inl.h	/^    ~scoped_padder() {$/;"	f	class:spdlog::details::scoped_padder
~syslog_sink	include/spdlog/sinks/syslog_sink.h	/^    ~syslog_sink() override { ::closelog(); }$/;"	f	class:spdlog::sinks::syslog_sink
~systemd_sink	include/spdlog/sinks/systemd_sink.h	/^    ~systemd_sink() override {}$/;"	f	class:spdlog::sinks::systemd_sink
~tcp_client	include/spdlog/details/tcp_client-windows.h	/^    ~tcp_client() {$/;"	f	class:spdlog::details::tcp_client
~tcp_client	include/spdlog/details/tcp_client.h	/^    ~tcp_client() { close(); }$/;"	f	class:spdlog::details::tcp_client
~thread_pool	include/spdlog/details/thread_pool-inl.h	/^SPDLOG_INLINE thread_pool::~thread_pool() {$/;"	f	class:spdlog::details::thread_pool	typeref:typename:SPDLOG_INLINE
~udp_client	include/spdlog/details/udp_client-windows.h	/^    ~udp_client() { cleanup_(); }$/;"	f	class:spdlog::details::udp_client
~udp_client	include/spdlog/details/udp_client.h	/^    ~udp_client() { cleanup_(); }$/;"	f	class:spdlog::details::udp_client
~win_eventlog_sink	include/spdlog/sinks/win_eventlog_sink.h	/^    ~win_eventlog_sink() {$/;"	f	class:spdlog::sinks::win_eventlog::win_eventlog_sink
~wincolor_sink	include/spdlog/sinks/wincolor_sink-inl.h	/^SPDLOG_INLINE wincolor_sink<ConsoleMutex>::~wincolor_sink() {$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:SPDLOG_INLINE
